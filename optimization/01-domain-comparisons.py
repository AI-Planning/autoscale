#! /usr/bin/env python3

from collections import defaultdict
import itertools

from lab.reports import Report, Table

from project import DOMAIN_RENAMINGS


OLD = [
("barman", "bjolp", 4),
("barman", "blind", 4),
("barman", "dblind", 8),
("barman", "celmcut", 4),
("barman", "comp2", 6),
("barman", "ipdb", 5),
("barman", "lmcut", 2),
("barman", "mas1", 4),
("barman", "mas2", 4),
("barman", "miasm", 8),
("barman", "sccdfp", 4),
("barman", "scorpion", 4),
("barman", "symba1", 12),
("barman", "symba2", 12),
("blocksworld", "bjolp", 26),
("blocksworld", "blind", 18),
("blocksworld", "dblind", 18),
("blocksworld", "celmcut", 28),
("blocksworld", "comp2", 30),
("blocksworld", "ipdb", 28),
("blocksworld", "lmcut", 28),
("blocksworld", "mas1", 28),
("blocksworld", "mas2", 20),
("blocksworld", "miasm", 25),
("blocksworld", "sccdfp", 27),
("blocksworld", "scorpion", 28),
("blocksworld", "symba1", 30),
("blocksworld", "symba2", 30),
("childsnack", "bjolp", 0),
("childsnack", "blind", 0),
("childsnack", "dblind", 5),
("childsnack", "celmcut", 6),
("childsnack", "comp2", 0),
("childsnack", "ipdb", 5),
("childsnack", "lmcut", 0),
("childsnack", "mas1", 0),
("childsnack", "mas2", 0),
("childsnack", "miasm", 5),
("childsnack", "sccdfp", 6),
("childsnack", "scorpion", 0),
("childsnack", "symba1", 3),
("childsnack", "symba2", 3),
("depot", "bjolp", 7),
("depot", "blind", 4),
("depot", "dblind", 5),
("depot", "celmcut", 7),
("depot", "comp2", 6),
("depot", "ipdb", 9),
("depot", "lmcut", 6),
("depot", "mas1", 7),
("depot", "mas2", 6),
("depot", "miasm", 7),
("depot", "sccdfp", 8),
("depot", "scorpion", 13),
("depot", "symba1", 6),
("depot", "symba2", 7),
("driverlog", "bjolp", 14),
("driverlog", "blind", 7),
("driverlog", "dblind", 7),
("driverlog", "celmcut", 13),
("driverlog", "comp2", 14),
("driverlog", "ipdb", 13),
("driverlog", "lmcut", 13),
("driverlog", "mas1", 12),
("driverlog", "mas2", 13),
("driverlog", "miasm", 12),
("driverlog", "sccdfp", 12),
("driverlog", "scorpion", 15),
("driverlog", "symba1", 12),
("driverlog", "symba2", 12),
("floortile", "bjolp", 2),
("floortile", "blind", 2),
("floortile", "dblind", 16),
("floortile", "celmcut", 31),
("floortile", "comp2", 31),
("floortile", "ipdb", 16),
("floortile", "lmcut", 9),
("floortile", "mas1", 3),
("floortile", "mas2", 13),
("floortile", "miasm", 21),
("floortile", "sccdfp", 16),
("floortile", "scorpion", 12),
("floortile", "symba1", 34),
("floortile", "symba2", 34),
("gripper", "bjolp", 7),
("gripper", "blind", 7),
("gripper", "dblind", 20),
("gripper", "celmcut", 20),
("gripper", "comp2", 18),
("gripper", "ipdb", 20),
("gripper", "lmcut", 6),
("gripper", "mas1", 8),
("gripper", "mas2", 20),
("gripper", "miasm", 20),
("gripper", "sccdfp", 20),
("gripper", "scorpion", 7),
("gripper", "symba1", 20),
("gripper", "symba2", 20),
("hiking", "bjolp", 9),
("hiking", "blind", 10),
("hiking", "dblind", 14),
("hiking", "celmcut", 11),
("hiking", "comp2", 13),
("hiking", "ipdb", 15),
("hiking", "lmcut", 8),
("hiking", "mas1", 11),
("hiking", "mas2", 12),
("hiking", "miasm", 15),
("hiking", "sccdfp", 15),
("hiking", "scorpion", 13),
("hiking", "symba1", 14),
("hiking", "symba2", 14),
("miconic-strips", "bjolp", 142),
("miconic-strips", "blind", 50),
("miconic-strips", "dblind", 50),
("miconic-strips", "celmcut", 141),
("miconic-strips", "comp2", 85),
("miconic-strips", "ipdb", 53),
("miconic-strips", "lmcut", 140),
("miconic-strips", "mas1", 50),
("miconic-strips", "mas2", 77),
("miconic-strips", "miasm", 55),
("miconic-strips", "sccdfp", 80),
("miconic-strips", "scorpion", 125),
("miconic-strips", "symba1", 99),
("miconic-strips", "symba2", 99),
("nomystery", "bjolp", 20),
("nomystery", "blind", 8),
("nomystery", "dblind", 8),
("nomystery", "celmcut", 14),
("nomystery", "comp2", 19),
("nomystery", "ipdb", 20),
("nomystery", "lmcut", 14),
("nomystery", "mas1", 14),
("nomystery", "mas2", 19),
("nomystery", "miasm", 20),
("nomystery", "sccdfp", 20),
("nomystery", "scorpion", 20),
("nomystery", "symba1", 14),
("nomystery", "symba2", 14),
("parking", "bjolp", 3),
("parking", "blind", 0),
("parking", "dblind", 0),
("parking", "celmcut", 2),
("parking", "comp2", 1),
("parking", "ipdb", 12),
("parking", "lmcut", 2),
("parking", "mas1", 13),
("parking", "mas2", 0),
("parking", "miasm", 0),
("parking", "sccdfp", 6),
("parking", "scorpion", 13),
("parking", "symba1", 1),
("parking", "symba2", 1),
("rovers", "bjolp", 8),
("rovers", "blind", 5),
("rovers", "dblind", 6),
("rovers", "celmcut", 9),
("rovers", "comp2", 12),
("rovers", "ipdb", 9),
("rovers", "lmcut", 7),
("rovers", "mas1", 6),
("rovers", "mas2", 8),
("rovers", "miasm", 9),
("rovers", "sccdfp", 9),
("rovers", "scorpion", 10),
("rovers", "symba1", 12),
("rovers", "symba2", 12),
("satellite", "bjolp", 7),
("satellite", "blind", 4),
("satellite", "dblind", 6),
("satellite", "celmcut", 14),
("satellite", "comp2", 7),
("satellite", "ipdb", 7),
("satellite", "lmcut", 7),
("satellite", "mas1", 6),
("satellite", "mas2", 7),
("satellite", "miasm", 7),
("satellite", "sccdfp", 9),
("satellite", "scorpion", 8),
("satellite", "symba1", 9),
("satellite", "symba2", 9),
("snake", "bjolp", 11),
("snake", "blind", 10),
("snake", "dblind", 11),
("snake", "celmcut", 4),
("snake", "comp2", 7),
("snake", "ipdb", 11),
("snake", "lmcut", 4),
("snake", "mas1", 10),
("snake", "mas2", 11),
("snake", "miasm", 10),
("snake", "sccdfp", 9),
("snake", "scorpion", 11),
("snake", "symba1", 3),
("snake", "symba2", 3),
("storage", "bjolp", 15),
("storage", "blind", 14),
("storage", "dblind", 16),
("storage", "celmcut", 16),
("storage", "comp2", 15),
("storage", "ipdb", 17),
("storage", "lmcut", 15),
("storage", "mas1", 15),
("storage", "mas2", 15),
("storage", "miasm", 16),
("storage", "sccdfp", 16),
("storage", "scorpion", 15),
("storage", "symba1", 15),
("storage", "symba2", 15),
("tpp", "bjolp", 6),
("tpp", "blind", 5),
("tpp", "dblind", 6),
("tpp", "celmcut", 7),
("tpp", "comp2", 13),
("tpp", "ipdb", 6),
("tpp", "lmcut", 6),
("tpp", "mas1", 6),
("tpp", "mas2", 7),
("tpp", "miasm", 8),
("tpp", "sccdfp", 9),
("tpp", "scorpion", 7),
("tpp", "symba1", 8),
("tpp", "symba2", 8),
#("transport", "bjolp", 22),
#("transport", "blind", 23),
#("transport", "dblind", 24),
#("transport", "celmcut", 23),
#("transport", "comp2", 31),
#("transport", "ipdb", 25),
#("transport", "lmcut", 23),
#("transport", "mas1", 23),
#("transport", "mas2", 25),
#("transport", "miasm", 24),
#("transport", "sccdfp", 24),
#("transport", "scorpion", 33),
#("transport", "symba1", 24),
#("transport", "symba2", 24),
("trucks", "bjolp", 7),
("trucks", "blind", 11),
("trucks", "dblind", 6),
("trucks", "celmcut", 10),
("trucks", "comp2", 9),
("trucks", "ipdb", 9),
("trucks", "lmcut", 9),
("trucks", "mas1", 6),
("trucks", "mas2", 7),
("trucks", "miasm", 10),
("trucks", "sccdfp", 7),
("trucks", "scorpion", 12),
("trucks", "symba1", 11),
("trucks", "symba2", 11),
("visitall", "bjolp", 14),
("visitall", "blind", 12),
("visitall", "dblind", 12),
("visitall", "celmcut", 15),
("visitall", "comp2", 24),
("visitall", "ipdb", 28),
("visitall", "lmcut", 15),
("visitall", "mas1", 28),
("visitall", "mas2", 13),
("visitall", "miasm", 13),
("visitall", "sccdfp", 13),
("visitall", "scorpion", 29),
("visitall", "symba1", 18),
("visitall", "symba2", 18),
("woodworking", "bjolp", 23),
("woodworking", "blind", 9),
("woodworking", "dblind", 30),
("woodworking", "celmcut", 49),
("woodworking", "comp2", 38),
("woodworking", "ipdb", 30),
("woodworking", "lmcut", 25),
("woodworking", "mas1", 23),
("woodworking", "mas2", 19),
("woodworking", "miasm", 48),
("woodworking", "sccdfp", 49),
("woodworking", "scorpion", 50),
("woodworking", "symba1", 39),
("woodworking", "symba2", 39),
("zenotravel", "bjolp", 10),
("zenotravel", "blind", 7),
("zenotravel", "dblind", 7),
("zenotravel", "celmcut", 12),
("zenotravel", "comp2", 10),
("zenotravel", "ipdb", 11),
("zenotravel", "lmcut", 11),
("zenotravel", "mas1", 10),
("zenotravel", "mas2", 12),
("zenotravel", "miasm", 10),
("zenotravel", "sccdfp", 11),
("zenotravel", "scorpion", 13),
("zenotravel", "symba1", 10),
("zenotravel", "symba2", 10),
]

NEW_SART = [
("barman", "bjolp", 3),
("barman", "blind", 2),
("barman", "dblind", 3),
("barman", "celmcut", 4),
("barman", "comp2", 5),
("barman", "ipdb", 6),
("barman", "lmcut", 1),
("barman", "mas1", 2),
("barman", "mas2", 2),
("barman", "miasm", 7),
("barman", "sccdfp", 5),
("barman", "scorpion", 4),
("barman", "symba1", 7),
("barman", "symba2", 7),
("blocksworld", "bjolp", 8),
("blocksworld", "blind", 4),
("blocksworld", "dblind", 4),
("blocksworld", "celmcut", 9),
("blocksworld", "comp2", 9),
("blocksworld", "ipdb", 9),
("blocksworld", "lmcut", 8),
("blocksworld", "mas1", 10),
("blocksworld", "mas2", 8),
("blocksworld", "miasm", 9),
("blocksworld", "sccdfp", 9),
("blocksworld", "scorpion", 10),
("blocksworld", "symba1", 10),
("blocksworld", "symba2", 10),
("childsnack", "bjolp", 3),
("childsnack", "blind", 3),
("childsnack", "dblind", 10),
("childsnack", "celmcut", 11),
("childsnack", "comp2", 4),
("childsnack", "ipdb", 10),
("childsnack", "lmcut", 4),
("childsnack", "mas1", 4),
("childsnack", "mas2", 4),
("childsnack", "miasm", 10),
("childsnack", "sccdfp", 10),
("childsnack", "scorpion", 4),
("childsnack", "symba1", 9),
("childsnack", "symba2", 9),
("depot", "bjolp", 16),
("depot", "blind", 12),
("depot", "dblind", 16),
("depot", "celmcut", 18),
("depot", "comp2", 13),
("depot", "ipdb", 18),
("depot", "lmcut", 13),
("depot", "mas1", 14),
("depot", "mas2", 13),
("depot", "miasm", 16),
("depot", "sccdfp", 17),
("depot", "scorpion", 21),
("depot", "symba1", 16),
("depot", "symba2", 16),
("driverlog", "bjolp", 21),
("driverlog", "blind", 12),
("driverlog", "dblind", 10),
("driverlog", "celmcut", 19),
("driverlog", "comp2", 25),
("driverlog", "ipdb", 19),
("driverlog", "lmcut", 19),
("driverlog", "mas1", 19),
("driverlog", "mas2", 20),
("driverlog", "miasm", 15),
("driverlog", "sccdfp", 19),
("driverlog", "scorpion", 22),
("driverlog", "symba1", 20),
("driverlog", "symba2", 20),
("floortile", "bjolp", 9),
("floortile", "blind", 7),
("floortile", "dblind", 15),
("floortile", "celmcut", 20),
("floortile", "comp2", 20),
("floortile", "ipdb", 14),
("floortile", "lmcut", 11),
("floortile", "mas1", 10),
("floortile", "mas2", 13),
("floortile", "miasm", 19),
("floortile", "sccdfp", 15),
("floortile", "scorpion", 14),
("floortile", "symba1", 22),
("floortile", "symba2", 22),
("gripper", "bjolp", 5),
("gripper", "blind", 5),
("gripper", "dblind", 30),
("gripper", "celmcut", 30),
("gripper", "comp2", 29),
("gripper", "ipdb", 30),
("gripper", "lmcut", 3),
("gripper", "mas1", 6),
("gripper", "mas2", 30),
("gripper", "miasm", 30),
("gripper", "sccdfp", 30),
("gripper", "scorpion", 5),
("gripper", "symba1", 30),
("gripper", "symba2", 30),
("hiking", "bjolp", 21),
("hiking", "blind", 7),
("hiking", "dblind", 21),
("hiking", "celmcut", 23),
("hiking", "comp2", 21),
("hiking", "ipdb", 29),
("hiking", "lmcut", 21),
("hiking", "mas1", 21),
("hiking", "mas2", 10),
("hiking", "miasm", 27),
("hiking", "sccdfp", 28),
("hiking", "scorpion", 21),
("hiking", "symba1", 23),
("hiking", "symba2", 22),
("miconic-strips", "bjolp", 28),
("miconic-strips", "blind", 5),
("miconic-strips", "dblind", 5),
("miconic-strips", "celmcut", 24),
("miconic-strips", "comp2", 14),
("miconic-strips", "ipdb", 7),
("miconic-strips", "lmcut", 23),
("miconic-strips", "mas1", 5),
("miconic-strips", "mas2", 12),
("miconic-strips", "miasm", 8),
("miconic-strips", "sccdfp", 13),
("miconic-strips", "scorpion", 25),
("miconic-strips", "symba1", 15),
("miconic-strips", "symba2", 15),
("nomystery", "bjolp", 19),
("nomystery", "blind", 8),
("nomystery", "dblind", 10),
("nomystery", "celmcut", 18),
("nomystery", "comp2", 20),
("nomystery", "ipdb", 17),
("nomystery", "lmcut", 17),
("nomystery", "mas1", 14),
("nomystery", "mas2", 19),
("nomystery", "miasm", 19),
("nomystery", "sccdfp", 19),
("nomystery", "scorpion", 18),
("nomystery", "symba1", 16),
("nomystery", "symba2", 16),
("parking", "bjolp", 5),
("parking", "blind", 3),
("parking", "dblind", 4),
("parking", "celmcut", 5),
("parking", "comp2", 4),
("parking", "ipdb", 5),
("parking", "lmcut", 5),
("parking", "mas1", 5),
("parking", "mas2", 4),
("parking", "miasm", 4),
("parking", "sccdfp", 5),
("parking", "scorpion", 5),
("parking", "symba1", 4),
("parking", "symba2", 4),
("rovers", "bjolp", 24),
("rovers", "blind", 14),
("rovers", "dblind", 20),
("rovers", "celmcut", 23),
("rovers", "comp2", 24),
("rovers", "ipdb", 23),
("rovers", "lmcut", 22),
("rovers", "mas1", 18),
("rovers", "mas2", 20),
("rovers", "miasm", 23),
("rovers", "sccdfp", 22),
("rovers", "scorpion", 25),
("rovers", "symba1", 23),
("rovers", "symba2", 23),
("satellite", "bjolp", 7),
("satellite", "blind", 6),
("satellite", "dblind", 7),
("satellite", "celmcut", 10),
("satellite", "comp2", 11),
("satellite", "ipdb", 10),
("satellite", "lmcut", 7),
("satellite", "mas1", 6),
("satellite", "mas2", 10),
("satellite", "miasm", 10),
("satellite", "sccdfp", 11),
("satellite", "scorpion", 10),
("satellite", "symba1", 11),
("satellite", "symba2", 11),
("snake", "bjolp", 9),
("snake", "blind", 9),
("snake", "dblind", 9),
("snake", "celmcut", 9),
("snake", "comp2", 9),
("snake", "ipdb", 9),
("snake", "lmcut", 9),
("snake", "mas1", 9),
("snake", "mas2", 9),
("snake", "miasm", 9),
("snake", "sccdfp", 9),
("snake", "scorpion", 9),
("snake", "symba1", 7),
("snake", "symba2", 7),
("storage", "bjolp", 24),
("storage", "blind", 13),
("storage", "dblind", 20),
("storage", "celmcut", 24),
("storage", "comp2", 21),
("storage", "ipdb", 26),
("storage", "lmcut", 23),
("storage", "mas1", 24),
("storage", "mas2", 24),
("storage", "miasm", 22),
("storage", "sccdfp", 24),
("storage", "scorpion", 25),
("storage", "symba1", 12),
("storage", "symba2", 12),
("tpp", "bjolp", 8),
("tpp", "blind", 8),
("tpp", "dblind", 8),
("tpp", "celmcut", 13),
("tpp", "comp2", 15),
("tpp", "ipdb", 10),
("tpp", "lmcut", 11),
("tpp", "mas1", 9),
("tpp", "mas2", 13),
("tpp", "miasm", 12),
("tpp", "sccdfp", 15),
("tpp", "scorpion", 10),
("tpp", "symba1", 12),
("tpp", "symba2", 12),
("trucks", "bjolp", 7),
("trucks", "blind", 3),
("trucks", "dblind", 4),
("trucks", "celmcut", 4),
("trucks", "comp2", 7),
("trucks", "ipdb", 4),
("trucks", "lmcut", 4),
("trucks", "mas1", 4),
("trucks", "mas2", 4),
("trucks", "miasm", 3),
("trucks", "sccdfp", 4),
("trucks", "scorpion", 5),
("trucks", "symba1", 7),
("trucks", "symba2", 7),
("visitall", "bjolp", 7),
("visitall", "blind", 6),
("visitall", "dblind", 6),
("visitall", "celmcut", 7),
("visitall", "comp2", 10),
("visitall", "ipdb", 10),
("visitall", "lmcut", 7),
("visitall", "mas1", 10),
("visitall", "mas2", 7),
("visitall", "miasm", 7),
("visitall", "sccdfp", 7),
("visitall", "scorpion", 9),
("visitall", "symba1", 8),
("visitall", "symba2", 8),
("woodworking", "bjolp", 16),
("woodworking", "blind", 11),
("woodworking", "dblind", 26),
("woodworking", "celmcut", 27),
("woodworking", "comp2", 22),
("woodworking", "ipdb", 22),
("woodworking", "lmcut", 16),
("woodworking", "mas1", 16),
("woodworking", "mas2", 15),
("woodworking", "miasm", 27),
("woodworking", "sccdfp", 28),
("woodworking", "scorpion", 28),
("woodworking", "symba1", 22),
("woodworking", "symba2", 22),
("zenotravel", "bjolp", 18),
("zenotravel", "blind", 11),
("zenotravel", "dblind", 10),
("zenotravel", "celmcut", 21),
("zenotravel", "comp2", 20),
("zenotravel", "ipdb", 18),
("zenotravel", "lmcut", 18),
("zenotravel", "mas1", 19),
("zenotravel", "mas2", 21),
("zenotravel", "miasm", 17),
("zenotravel", "sccdfp", 18),
("zenotravel", "scorpion", 26),
("zenotravel", "symba1", 20),
("zenotravel", "symba2", 20),
]

names = ["old", "new_sart"]

sets = {}
dicts = {}
domains = None
planners = None
for name in names:
    original_list = globals()[name.upper()]
    sanitized = [(DOMAIN_RENAMINGS[domain], algo, coverage) for domain, algo, coverage in original_list]
    new_set = set(sanitized)
    sets[name] = new_set

    new_domains = sorted({domain for domain, _, _ in sanitized})
    assert domains is None or domains == new_domains
    domains = new_domains

    new_planners = sorted({planner for _, planner, _ in sanitized})
    assert planners is None or planners == new_planners
    planners = new_planners

    dic = defaultdict(dict)
    for domain, algo, coverage in sanitized:
        dic[domain][algo] = coverage
    dicts[name] = dic

assert len({len(s) for s in sets.values()}) == 1

table = Table(title="different scores", min_wins=False)
table.set_column_order(names)
for name in names:
    different_coverage_scores = defaultdict(set)
    for domain, algo, coverage in sets[name]:
        different_coverage_scores[domain].add(coverage)
    for domain, different_scores in different_coverage_scores.items():
        table.add_cell(domain, name, len(different_scores))

tables = [table]

for name1, name2 in itertools.combinations(names, 2):
    set1 = sets[name1]
    set2 = sets[name2]

    table = Table(title=f"{name1} vs. {name2}", min_wins=False)
    outcomes = [f"only {name1}", f"only {name2}"]
    table.set_column_order(outcomes)

    for domain in domains:
        result = {outcome: 0 for outcome in outcomes}
        for planner1, planner2 in itertools.permutations(planners, 2):
            coverage11 = dicts[name1][domain][planner1]
            coverage12 = dicts[name1][domain][planner2]
            coverage21 = dicts[name2][domain][planner1]
            coverage22 = dicts[name2][domain][planner2]
            if coverage11 > coverage12 and coverage21 <= coverage22:
                result[f"only {name1}"] += 1
            elif coverage21 > coverage22 and coverage11 <= coverage12:
                result[f"only {name2}"] += 1
        for key, value in result.items():
            table.add_cell(domain, key, value)

    tables.append(table)

def render_txt2tags(text, target="xhtml"):
    from lab.reports import markup
    doc = markup.Document()
    doc.add_text(text)
    return doc.render(target=target)

print(render_txt2tags("\n\n\n".join(str(table) for table in tables)))
