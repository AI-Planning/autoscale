#include "ranking.h"

#include "globals.h"
#include "operator.h"
#include "option_parser.h"
#include "plugin.h"

using namespace std;

Ranking::Ranking(const Options &opts) :
            maximize(opts.get<bool>("maximize")) { }


VarInt Ranking::get_rank(const vector<set<int>> & factoring) {
    return rank(factoring);
}


void print_all_rankings(const vector<set<int> > &factoring) {
    MobilityRanking *mobility = new MobilityRanking();
    cout << "mis_ranking_mobility: ";
    mobility->get_rank(factoring).dump_number();
    LeavesRanking *leaves = new LeavesRanking();
    cout << "mis_ranking_leaves: ";
    leaves->get_rank(factoring).dump_number();
    DomSizeRanking *dom_size = new DomSizeRanking();
    cout << "mis_ranking_dom_size: ";
    dom_size->get_rank(factoring).dump_number();
    VariablesRanking *vars = new VariablesRanking();
    cout << "mis_ranking_variables: ";
    vars->get_rank(factoring).dump_number();
    AffActionsRanking *aff_actions = new AffActionsRanking();
    cout << "mis_ranking_aff_actions: ";
    aff_actions->get_rank(factoring).dump_number();
}

VarInt MobilityRanking::rank(const vector<set<int> > &factoring) {
    if (factoring.size() == 0){
        return 0;
    }
    vector<int> factor_actions(factoring.size(), 0);
    vector<int> belongs_to_factor(g_variable_domain.size(), -1);

    for (size_t i = 0; i < factoring.size(); i++){
        for (set<int>::iterator it = factoring[i].begin(); it != factoring[i].end(); ++it){
            belongs_to_factor[*it] = i;
        }
    }

    for (const Operator &op : g_operators){
        bool center = false;
        set<int> eff_factors;
        int affects_factor = -1;

        for (const Effect &eff : op.get_effects()){
            eff_factors.insert(belongs_to_factor[eff.var]);
            affects_factor = belongs_to_factor[eff.var];
            if (affects_factor == -1 || eff_factors.size() > 1){
                center = true;
                break;
            }
        }

        if (center){
            // op affects center variable or has effect on more than 1 factor
            continue;
        }

        set<int> pre_factors;
        for (const Condition &pre : op.get_preconditions()) {
            pre_factors.insert(belongs_to_factor[pre.var]);
        }
        pre_factors.erase(-1);

        if (pre_factors.size() <= 1  && (pre_factors.empty() || *pre_factors.begin() == *eff_factors.begin())){
            // op has only preconditions and effects on (at most) a single leaf factor
            ++factor_actions[affects_factor];
        }
    }
    VarInt mobility(1);
    bool any_actions = false;
    for (int i:factor_actions) {
        if (i > 0) {
            any_actions = true;
            VarInt f(i);
            mobility *= f;
        }
    }
    if (!any_actions) {
        mobility = 0;
    }
    return mobility;
}

VarInt LeavesRanking::rank(const vector<set<int>> &factoring) {
    if (factoring.size() == 0){
        return 0;
    }
    vector<bool> is_frozen_factor(factoring.size(), true);
    vector<int> belongs_to_factor(g_variable_domain.size(), -1);
    size_t num_frozen = factoring.size();
    
    for (size_t i = 0; i < factoring.size(); i++){
        for (int var : factoring[i]){
            belongs_to_factor[var] = i;
        }
    }
    
    for (const Operator &op : g_operators){
        bool center = false;
        set<int> eff_factors;
        int affects_factor = -1;
        
        for (const Effect &eff : op.get_effects()){
            eff_factors.insert(belongs_to_factor[eff.var]);
            affects_factor = belongs_to_factor[eff.var];
            if (affects_factor == -1 || eff_factors.size() > 1){
                center = true;
                break;
            }
        }
        
        if (center){
            // op affects center variable or has effect on more than 1 factor
            continue;
        }
        if (!is_frozen_factor[affects_factor]){
            // factor is mobile, no need to continue
            continue;
        }
        
        set<int> pre_factors;
        for (const Condition &pre : op.get_preconditions()) {
            pre_factors.insert(belongs_to_factor[pre.var]);
        }
        pre_factors.erase(-1);
        
        if (pre_factors.size() <= 1  && (pre_factors.empty() || *pre_factors.begin() == *eff_factors.begin())){
            // op has only preconditions and effects on (at most) a single leaf factor
            if (is_frozen_factor[affects_factor]){
                --num_frozen;
                is_frozen_factor[affects_factor] = false;
                if (num_frozen == 0){
                    return VarInt(factoring.size());
                }
            }
        }
    }

    return VarInt(factoring.size() - num_frozen);
}

VarInt DomSizeRanking::rank(const vector<set<int>> & factoring) {
    if (factoring.size() == 0){
        return 0;
    }
    VarInt leaf(1);
    VarInt center(1);
    vector<bool> in_center(g_variable_domain.size(), true);
    for (size_t i = 0; i < factoring.size(); i++) {
        for (set<int>::iterator it = factoring[i].begin(); it != factoring[i].end(); ++it) {
            in_center[*it] = false;
        }
    }
    for (size_t i = 0; i < g_variable_domain.size(); ++i) {
        if (in_center[i]) {
            if (g_variable_domain[i] == 0) {
                VarInt f(g_variable_domain[i]);
                center *= f;
            }
        } else {
            VarInt f(g_variable_domain[i]);
            leaf *= f;
        }
    }
    if (center.count() == 0) {
        return leaf;
    } else {
        return leaf / center;
    }
}

VarInt VariablesRanking::rank(const vector<set<int>> & factoring) {
    if (factoring.size() == 0){
        return 0;
    }
    size_t leaf = 0;
    size_t center = 0;
    size_t size = g_variable_domain.size();
    center = size;
    for (set<int> f:factoring){
        center -= f.size();
    }
    if (center == 0) {
        VarInt res(size);
        return res;
    } else {
        leaf = size - center;
        leaf = leaf * 100 / center;
        VarInt res(leaf);
        return res;
    }
}

VarInt AffActionsRanking::rank(const vector<set<int>> &factoring) {
    if (factoring.size() == 0){
        return 0;
    }
    vector<int> affecting_center(factoring.size(),0);
    vector<int> affecting_leaf(factoring.size(),0);
    vector<int> belongs_to_factor(g_variable_domain.size(), -1);

    for (size_t i = 0; i < factoring.size(); i++){
        for (set<int>::iterator it = factoring[i].begin(); it != factoring[i].end(); ++it){
            belongs_to_factor[*it] = i;
        }
    }

    for (const Operator &op : g_operators){
        bool center = false;
        set<int> eff_factors;
        int affects_factor = -1;

        for (const Effect &eff : op.get_effects()){
            eff_factors.insert(belongs_to_factor[eff.var]);
            affects_factor = belongs_to_factor[eff.var];
            if (affects_factor == -1 || eff_factors.size() > 1){
                center = true;
            }
        }

        if (center) {
            if (eff_factors.size() == 1) {
                // op affects only center
                continue;
            } else {
                for (int f:eff_factors) {
                    if (f != -1) {
                        ++affecting_center[f];

                    }
                }
            }
        }
        set<int> pre_factors;
        for (const Condition &pre : op.get_preconditions()) {
            pre_factors.insert(belongs_to_factor[pre.var]);
        }
        pre_factors.erase(-1);

        if ((pre_factors.size() <= 1) && (pre_factors.empty() || (*pre_factors.begin() == *eff_factors.begin()))) {
            ++affecting_leaf[affects_factor];
        } else {
            for (int f:eff_factors) {
                if (f != -1) {
                    ++affecting_center[f];
                }
            }
        }
    }
    vector<int> affecting_ratio(factoring.size(),0);
    for (size_t i = 0; i < factoring.size(); ++i) {
        affecting_ratio[i] = (affecting_leaf[i] * 100) / (affecting_leaf[i] + affecting_center[i]);
    }
    int result = 0;
    for (size_t i = 0; i < factoring.size(); ++i) {
        result += affecting_ratio[i];
    }
    result = result / factoring.size();
    VarInt res(result);
    return res;
}

void Ranking::add_options_to_parser(OptionParser &parser) {
    parser.add_option<bool>(
            "maximize",
            "TODO",
            "true");
}

static Ranking *_parse_mobility(OptionParser &parser) {

    Ranking::add_options_to_parser(parser);
    Options opts = parser.parse();
    MobilityRanking *ranking = 0;
    if (!parser.dry_run()) {
        ranking = new MobilityRanking(opts);
    }

    return ranking;
}

static Ranking *_parse_leaves(OptionParser &parser) {

    Ranking::add_options_to_parser(parser);
    Options opts = parser.parse();
    LeavesRanking *ranking = 0;
    if (!parser.dry_run()) {
        ranking = new LeavesRanking(opts);
    }

    return ranking;
}

static Ranking *_parse_dom_size(OptionParser &parser) {

    Ranking::add_options_to_parser(parser);
    Options opts = parser.parse();
    DomSizeRanking *ranking = 0;
    if (!parser.dry_run()) {
        ranking = new DomSizeRanking(opts);
    }

    return ranking;
}

static Ranking *_parse_vars(OptionParser &parser) {

    Ranking::add_options_to_parser(parser);
    Options opts = parser.parse();
    VariablesRanking *ranking = 0;
    if (!parser.dry_run()) {
        ranking = new VariablesRanking(opts);
    }

    return ranking;
}

static Ranking *_parse_aff_actions(OptionParser &parser) {

    Ranking::add_options_to_parser(parser);
    Options opts = parser.parse();
    AffActionsRanking *ranking = 0;
    if (!parser.dry_run()) {
        ranking = new AffActionsRanking(opts);
    }

    return ranking;
}

static Plugin<Ranking> _plugin_mobility("mobility", _parse_mobility);
static Plugin<Ranking> _plugin_leaves("leaves", _parse_leaves);
static Plugin<Ranking> _plugin_dom_size("dom_size", _parse_dom_size);
static Plugin<Ranking> _plugin_vars("vars", _parse_vars);
static Plugin<Ranking> _plugin_aff_actions("aff_actions", _parse_aff_actions);
