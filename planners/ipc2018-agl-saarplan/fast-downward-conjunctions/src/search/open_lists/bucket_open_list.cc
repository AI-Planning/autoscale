#include "bucket_open_list.h"

#include "../option_parser.h"
#include "../plugin.h"

#include "../utils/memory.h"

using namespace std;


BucketOpenListFactory::BucketOpenListFactory(
    const Options &options)
    : options(options) {
}

unique_ptr<StateOpenList>
BucketOpenListFactory::create_state_open_list() {
    return utils::make_unique_ptr<BucketOpenList<StateOpenListEntry>>(options);
}

unique_ptr<EdgeOpenList>
BucketOpenListFactory::create_edge_open_list() {
    return utils::make_unique_ptr<BucketOpenList<EdgeOpenListEntry>>(options);
}

static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {
    parser.document_synopsis(
        "Bucket-based open list",
        "Bucket-based open list implementation that uses a single evaluator. "
        "Ties are broken in FIFO order.");
    parser.add_option<ScalarEvaluator *>("eval", "scalar evaluator");
    parser.add_option<bool>(
        "pref_only",
        "insert only nodes generated by preferred operators",
        "false");

    Options opts = parser.parse();
    if (parser.dry_run())
        return nullptr;
    else
        return make_shared<BucketOpenListFactory>(opts);
}

static PluginShared<OpenListFactory> _plugin("single_buckets", _parse);
