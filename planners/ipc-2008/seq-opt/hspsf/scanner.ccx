#include <stdlib.h>
#include <stdio.h>
#include <stdio.h>
#include <string.h>
inline char* strndup(char* s, unsigned int n)
{
  char* d = new char[n+1];
  strncpy(s, d, n);
  return d;
}
#include <assert.h>
#include <limits.h>
#include <vector>
#include <utility>
#include <iostream>
namespace hsps {
typedef unsigned int index_type;
const index_type index_type_max = (UINT_MAX - 1);
const index_type LARGE_PRIME = 2147483629U;
const index_type no_such_index = UINT_MAX;
typedef unsigned long count_type;
const count_type count_type_max = ULONG_MAX;
template<class T> class swapable_pair : public std::pair<T, T>
{
 public:
  swapable_pair()
    : std::pair<T, T>() { };
  swapable_pair(const T& v1, const T& v2)
    : std::pair<T, T>(v1, v2) { };
  swapable_pair(const T& v)
    : std::pair<T, T>(v, v) { };
  swapable_pair(const swapable_pair& p)
    : std::pair<T, T>(p) { };

  void swap();
};

template<class T> class comparable_pair : public swapable_pair<T>
{
 public:
  comparable_pair()
    : swapable_pair<T>() { };
  comparable_pair(const T& v1, const T& v2)
    : swapable_pair<T>(v1, v2) { };
  comparable_pair(const T& v)
    : swapable_pair<T>(v) { };
  comparable_pair(const comparable_pair& p)
    : swapable_pair<T>(p) { };

  void sort_ascending();
  void sort_descending();
};

typedef comparable_pair<index_type> index_pair;

template<class T> class zero_init_pair : public comparable_pair<T>
{
 public:
  zero_init_pair()
    : comparable_pair<T>(0) { };
  zero_init_pair(const T& v1, const T& v2)
    : comparable_pair<T>(v1, v2) { };
  zero_init_pair(const T& v)
    : comparable_pair<T>(v) { };
  zero_init_pair(const zero_init_pair& p)
    : comparable_pair<T>(p) { };
};




class index_set;
class bool_vec;

template<class T> class lvector : public std::vector<T>
{
 public:
  lvector() : std::vector<T>() { };
  lvector(const T& v, index_type l) : std::vector<T>(l, v) { };
  lvector(const lvector<T>& vec) : std::vector<T>(vec) { };




  class element_reference {
    lvector* _vec;
    index_type _pos;
  public:
    element_reference() : _vec(0), _pos(no_such_index) { };
    element_reference(lvector& v, index_type p) : _vec(&v), _pos(p) { };
    operator T*() const {
      if (_vec == 0) return 0;
      return &((*_vec)[_pos]);
    };
  };

  class order {
   public:
    virtual bool operator()(const T& v0, const T& v1) const = 0;
  };

  index_type length() const;
  bool contains(const T& v) const;
  index_type first(const T& v) const;
  index_type next(const T& v, index_type i) const;
  index_type find(const T& v, bool_vec& s) const;
  index_type count(const T& v) const;
  index_type arg_max() const;
  index_type arg_min() const;
  index_type arg_first(const order& o) const;
  index_type arg_last(const order& o) const;
  index_pair first_common(const lvector<T>& vec) const;
  index_pair next_common(const lvector<T>& vec, index_pair p) const;
  void difference(const lvector& v1, lvector& d0, lvector& d1);
  bool operator==(const lvector& _vec) const;
  bool operator!=(const lvector& _vec) const;
  bool operator<(const lvector& vec) const;
  bool operator>(const lvector& vec) const;
  bool operator<=(const lvector& vec) const;
  bool operator>=(const lvector& vec) const;
  void assign_copy(const lvector& _vec);
  void assign_copy(const T* _arr, index_type n);
  void assign_value(const T& val);
  void assign_value(const T& val, index_type l);
  void assign_remap(const lvector& vec, const lvector<index_type>& map);
  void remap(const lvector<index_type>& map);
  void assign_select(const lvector& _vec, const index_set& s);
  void assign_select(const lvector& _vec, const bool_vec& s);
  const lvector& operator=(const lvector& _vec);
  void set_length(index_type l);
  void set_length(index_type l, const T& v);
  void inc_length_to(index_type l);
  void inc_length_to(index_type l, const T& v);
  index_type inc_length() { return inc_length(1); };
  index_type inc_length(index_type d);
  index_type inc_length(index_type d, const T& v);
  index_type dec_length() { return dec_length(1); };
  index_type dec_length(index_type d);
  void clear();
  void append(const T& v);
  void append(const lvector& v);
  T& append();
  void insert(const T& v, index_type p);
  index_type insert_ordered(const T& v, const order& o, index_type f = 0);
  index_type insert_ordered(const lvector& vec, const order& o);
  void remove(index_type p);
  void remove(index_type p0, index_type p1);
  void remove(const index_set& s);
  void remove(const index_set& s, lvector<index_type>& map);
  void remove(const bool_vec& s);
  void remove(const bool_vec& s, lvector<index_type>& map);
  void remove_duplicate_elements();
  void swap(index_type i, index_type j);
};
template<class T> class auto_expanding_vector : public lvector<T>
{
  T _default;
 public:
  auto_expanding_vector() : lvector<T>() { };
  auto_expanding_vector(const T& v, index_type l)
    : lvector<T>(v, l), _default(v) { };
  auto_expanding_vector(const lvector<T>& vec)
    : lvector<T>(vec) { };
  auto_expanding_vector(const auto_expanding_vector<T>& vec)
    : lvector<T>(vec), _default(vec._default) { };
  typename std::vector<T>::reference
  operator[](typename std::vector<T>::size_type k)
  {
    inc_length_to(k + 1, _default);
    return lvector<T>::operator[](k);
  };
  typename std::vector<T>::const_reference
  operator[](typename std::vector<T>::size_type k) const
  {
    if (k >= std::vector<T>::size())
      return _default;
    else
      return lvector<T>::operator[](k);
  };
  void assign_value(const T& val)
  {
    _default = val;
    lvector<T>::assign_value(val);
  };
  void assign_value(const T& val, index_type l)
  {
    _default = val;
    lvector<T>::assign_value(val, l);
  };
};
typedef lvector<index_type> index_vec;
typedef lvector<index_pair> pair_vec;
class index_vec_util : public index_vec
{
 public:
  class decreasing_index_order : public index_vec::order {
  public:
    virtual bool operator()
      (const index_type& v0, const index_type& v1) const
      { return (v0 > v1); };
  };
  class increasing_index_order : public index_vec::order {
  public:
    virtual bool operator()
      (const index_type& v0, const index_type& v1) const
      { return (v0 < v1); };
  };
  class increasing_value_order : public index_vec::order {
    const index_vec& value;
  public:
    increasing_value_order(const index_vec& v) : value(v) { };
    virtual bool operator()
      (const index_type& v0, const index_type& v1) const
      {
 assert(v0 < value.length());
 assert(v1 < value.length());
 return (value[v0] < value[v1]);
      };
  };
  static class decreasing_index_order decreasing;
  static class increasing_index_order increasing;
  static void fill(index_vec& vec, index_type max);
  static index_type min(const index_vec& vec, index_type def = no_such_index);
  static index_type max(const index_vec& vec, index_type def = no_such_index);
  static int compare(const index_vec& v0, const index_vec& v1);
  static index_type hash(const index_vec& vec);
  void fill(index_type max);
  int compare(const index_vec& v1) const;
  index_type hash() const;
};
void factors(index_type n, index_vec& f);
template<class T> class svector : public lvector<T>
{
 public:
  svector() : lvector<T>() { };
  svector(const svector<T>& _svec) : lvector<T>(_svec) { };
  svector(const lvector<T>& _lvec) : lvector<T>() {
    for (index_type k = 0; k < _lvec.size(); k++) insert(_lvec[k]);
  };
  bool contains(const T& v) const;
  bool contains(const svector& vec) const;
  bool subset(const svector& vec) const;
  index_pair first_common(const lvector<T>& vec) const;
  index_pair next_common(const lvector<T>& vec, index_pair p) const;
  index_pair first_common(const svector<T>& vec) const;
  index_pair next_common(const svector<T>& vec, index_pair p) const;
  index_type count_common(const svector& vec) const;
  void assign_singleton(const T& _val);
  void assign_values(const lvector<T>& vec);
  void insert(const T& v);
  void insert(const lvector<T>& vec);
  void intersect(const svector& vec);
  void difference(const svector& vec);
  void subtract(const svector& vec);
  void subtract(const T& v);
};
class index_set : public svector<index_type>
{
 public:
  index_set()
    : svector<index_type>() { };
  index_set(const index_set& _svec)
    : svector<index_type>(_svec) { };
  index_set(const lvector<index_type>& _lvec)
    : svector<index_type>(_lvec) { };
  index_set(const bool* _arr, index_type n);
  index_set(const bool_vec& _vec);
  index_set(const index_set& s0, const index_set& s);
  index_set(const index_set& s0, const bool_vec& s);
  index_set(const index_set& s0, const index_vec& map);
  index_type first_common_element(const index_set& set) const;
  index_type first_common_element(const index_vec& vec) const;
  index_type first_common_element(const bool_vec vec) const;
  index_type first_common_element(const bool* vec, index_type n) const;
  index_type count_common(const index_set& set) const;
  index_type count_common(const bool_vec& set) const;
  bool have_common_element(const index_set& set) const;
  bool have_common_element(const bool_vec& set) const;
  void insert(const index_type& v);
  void insert(const index_vec& vec);
  void insert(const bool_vec& set);
  void intersect(const index_set& vec);
  void intersect(const bool_vec& set);
  void subtract(const index_vec& vec);
  void subtract(const bool_vec& set);
  void subtract(const index_type& v);
  bool* copy_to(bool* s, index_type n) const;
  void fill(index_type to);
  void assign_remap(const index_set& set, const index_vec& map);
  void remap(const index_vec& map);
};
extern const index_set EMPTYSET;
typedef svector<index_pair> pair_set;
class bool_vec : public lvector<bool>
{
 public:
  bool_vec() : lvector<bool>() { };
  bool_vec(bool _val, index_type l) : lvector<bool>(_val, l) { };
  bool_vec(const bool_vec& _vec) : lvector<bool>(_vec) { };
  bool_vec(const bool* _arr, index_type n) : lvector<bool>(false, n) {
    for (index_type k = 0; k < n; k++) {
      if (_arr[k])
 (*this)[k] = true;
      else
 (*this)[k] = false;
    }
  };
  bool_vec(const index_set& set, index_type l);
  void complement();
  void insert(const bool_vec& vec);
  void insert(const index_set& set);
  void intersect(const bool_vec& vec);
  void intersect(const index_set& set);
  void subtract(const bool_vec& vec);
  void subtract(const index_set& set);
  bool subset(const bool_vec& vec) const;
  bool strict_subset(const bool_vec& vec) const;
  bool superset(const bool_vec& vec) const;
  bool strict_superset(const bool_vec& vec) const;
  bool contains(const bool& v) const;
  bool contains(const bool_vec& set) const;
  bool contains(const index_set& set) const;
  bool contains_any(const index_set& set) const;
  index_type first_common_element(const index_set& vec) const;
  index_type first_common_element(const bool_vec vec) const;
  index_type count_common(const bool_vec& vec) const;
  index_type count_common(const index_set& set) const;
  index_set& copy_to(index_set& set) const;
  index_set& insert_into(index_set& set) const;
  index_set& subtract_from(index_set& set) const;
  bool* copy_to(bool* s, index_type n) const;
  int compare(const bool_vec& vec) const;
  index_type hash() const;
};
class index_set_vec : public lvector<index_set>
{
 public:
  index_set_vec()
    : lvector<index_set>() { };
  index_set_vec(const index_set& set, index_type l)
    : lvector<index_set>(set, l) { };
  index_set_vec(index_type l)
    : lvector<index_set>(EMPTYSET, l) { };
  index_set_vec(const index_set_vec& vec)
    : lvector<index_set>(vec) { };
  class decreasing_cardinality_order : public index_set_vec::order {
  public:
    virtual bool operator()
      (const index_set& v0, const index_set& v1) const
      { return (v0.size() > v1.size()); };
  };
  decreasing_cardinality_order decreasing_cardinality;
  index_type minimum_cardinality() const;
  index_type maxmimum_cardinality() const;
  index_type selected_minimum_cardinality(const index_set& sel) const;
  index_type selected_maximum_cardinality(const index_set& sel) const;
  index_type first_minimum_cardinality_set() const;
  index_type first_maxmimum_cardinality_set() const;
  index_type first_superset(const index_set& set) const;
  index_type first_strict_superset(const index_set& set) const;
  index_type first_subset(const index_set& set) const;
  index_type first_strict_subset(const index_set& set) const;
  index_set& union_set(index_set& set) const;
  index_set& selected_union_set(const index_set& sel, index_set& set) const;
  index_set& intersection_set(index_set& set) const;
  void insert_maximal(const index_set& set);
  void insert_minimal(const index_set& set);
  void reduce_to_maximal();
  void reduce_to_minimal();
  void append_if_not_subset(const index_set& set);
  void append_if_not_superset(const index_set& set);
  void append_if_new(const index_set& set);
  void remove_sets_size_le(index_type l);
  void remove_empty_sets();
  void insert_in_all(index_type i);
  void insert_in_all(const index_set& set);
  void subtract_from_all(index_type i);
  void subtract_from_all(const index_set& set);
  void combinations_by_union(const index_set_vec& sv);
  void combinations_by_union(const index_set_vec& sv1,
        const index_set_vec& sv2);
};
template<class T> class matrix : public lvector< lvector<T> >
{
 public:
  typedef lvector<T> row_type;
  matrix()
    : lvector<row_type>() { };
  matrix(const T& _val, index_type r, index_type c)
    : lvector<row_type>(row_type(_val, c), r) { };
  matrix(const matrix& _mat)
    : lvector<row_type>(_mat) { };
  index_type rows() const
  {
    return lvector<row_type>::length();
  };
  index_type columns() const
  {
    if (lvector<row_type>::length() == 0) return 0;
    else return (*this)[0].length();
  };
  void set_size(index_type r, index_type c);
  void assign_value(const T& _val);
  void assign_value(const T& _val, index_type r, index_type c);
};
class bool_matrix : public matrix<bool> {
 public:
  bool_matrix()
    : matrix<bool>() { };
  bool_matrix(const bool& v, index_type r, index_type c)
    : matrix<bool>(v, c, r) { };
  bool_matrix(const bool_matrix& m)
    : matrix<bool>(m) { };
  void complement();
  void insert(const bool_matrix& m);
  void intersect(const bool_matrix& m);
  void subtract(const bool_matrix& m);
  void multiply(const bool_matrix& m0, const bool_matrix& m1);
  void transitive_closure();
};
typedef matrix<index_type> index_matrix;
class mapping : public index_vec
{
 public:
  static void identity_map
    (index_type n, index_vec& map)
    { index_vec_util::fill(map, n); };
  static bool invert_map
    (const index_vec& map, index_vec& inv, index_type m = 0);
  static void delete_index_map
    (index_type n, index_type i, index_vec& map);
  static void compose
    (const index_vec& m0, const index_vec& m1, index_vec& cm);
  static void map_image
    (const index_vec& map, const index_vec& vec, index_vec& img);
  static void inverse_map_image
    (const index_vec& map, index_type x, index_set& img);
  static void inverse_map_image
    (const index_vec& map, const index_set& x, index_set& img);
  static index_type range(const index_vec& map, index_type d);
  mapping()
    : index_vec() { };
  mapping(index_type n)
    : index_vec() { identity_map(n, *this); };
  mapping(index_type n, index_type i, bool out) : index_vec() {
    if (out) delete_index_map(n, i, *this); else assign_value(i, n);
  };
  mapping(const mapping& map)
    : index_vec(map) { };
  void assign_identity(index_type n)
    { identity_map(n, *this); };
  index_type operator()(index_type x) const
    { assert(x < size()); return (*this)[x]; };
  index_vec operator()(const index_vec& vec) const
    { index_vec res; map_image(*this, vec, res); return res; };
  index_vec& inverse(index_type x, index_set& res) const
    { inverse_map_image(*this, x, res); return res; };
  index_vec& inverse(const index_set& x, index_set& res) const
    { inverse_map_image(*this, x, res); return res; };
  bool invert(index_vec& rmap) const
    { return invert_map(*this, rmap); };
  bool invert()
    { index_vec tmp(*this); return invert_map(tmp, *this); };
  index_type range() const
    { return range(*this, length()); };
};
class sparse_mapping : public pair_vec
{
 public:
  static void dense_to_sparse(const index_vec& dm, pair_vec sm);
  static void sparse_to_dense(const pair_vec& sm, index_vec dm);
  static index_type map_image
    (const pair_vec& map, index_type x);
  static void map_image
    (const pair_vec& map, const index_vec& vec, index_vec& img);
  static void inverse_map_image
    (const pair_vec& map, index_type x, index_set& img);
  static void inverse_map_image
    (const pair_vec& map, const index_set& x, index_set& img);
  sparse_mapping()
    : pair_vec() { };
  sparse_mapping(const pair_vec& m)
    : pair_vec(m) { };
  sparse_mapping(const index_vec& m)
    : pair_vec() { dense_to_sparse(m, *this); };
  index_type operator()(index_type x) const
    { return map_image(*this, x); };
  index_vec operator()(const index_vec& vec) const
    { index_vec res; map_image(*this, vec, res); return res; };
  index_set& inverse(index_type x, index_set& res) const
    { inverse_map_image(*this, x, res); return res; };
  index_set& inverse(const index_set& x, index_set& res) const
    { inverse_map_image(*this, x, res); return res; };
};
class equivalence : public index_vec
{
 public:
  equivalence()
    : index_vec() { };
  equivalence(index_type n)
    : index_vec(no_such_index, n) { index_vec_util::fill(*this, n); };
  equivalence(const equivalence& eq)
    : index_vec(eq) { };
  bool operator()(index_type a, index_type b) const;
  index_type canonical(index_type a) const;
  void extend(index_type a);
  void merge(index_type a, index_type b);
  void merge(const equivalence& eq);
  void merge(const index_set& set);
  void merge(const index_set& sa, const index_set& sb);
  void reset();
  void reset(index_type n);
  void canonical_set(index_set& set) const;
  void canonical_elements(index_set& set) const;
  void class_elements(index_type rep, index_set& set) const;
  index_type n_class_elements(index_type rep) const;
  void classes(index_set_vec& sets) const;
  void make_map(index_vec& map) const;
  index_type n_classes() const;
  index_type n_squeezed() const;
};
class set_hash_function : index_vec
{
 public:
  set_hash_function(index_type n)
    : index_vec() { init(n); };
  void init(index_type n);
  index_type operator()(index_type& i, index_type v) const;
  index_type operator()(const index_set& set) const;
  index_type operator()(const bool_vec& set) const;
  index_type operator()(const bool* set, index_type n) const;
};
template<class T, class N> struct weighted
{
  T value;
  N weight;
  weighted() : weight(0) { };
  weighted(const T& v) : value(v), weight(0) { };
  weighted(const T& v, const N& w) : value(v), weight(w) { };
  weighted(const weighted& w) : value(w.value), weight(w.weight) { };
  ~weighted() { };
  weighted& operator=(const T& v)
  {
    value = v;
    weight = 0;
    return *this;
  };
  weighted& operator=(const weighted& w)
  {
    value = w.value;
    weight = w.weight;
    return *this;
  };
  bool operator==(const weighted& w) const
  {
    return (value == w.value);
  };
  bool operator!=(const weighted& w) const
  {
    return (value != w.value);
  };
  bool operator<(const weighted& w) const
  {
    return (value < w.value);
  };
  bool operator<=(const weighted& w) const
  {
    return (value <= w.value);
  };
  bool operator>(const weighted& w) const
  {
    return (value > w.value);
  };
  bool operator>=(const weighted& w) const
  {
    return (value >= w.value);
  };
};
template<class T, class N> class weighted_vec
: public lvector< weighted<T, N> >
{
 public:
  class decreasing_weight_order : public lvector< weighted<T,N> >::order {
  public:
    virtual bool operator()
      (const weighted<T,N>& v0, const weighted<T,N>& v1) const
      { return (v0.weight > v1.weight); };
  };
  class increasing_weight_order : public lvector< weighted<T,N> >::order {
  public:
    virtual bool operator()
      (const weighted<T,N>& v0, const weighted<T,N>& v1) const
      { return (v0.weight < v1.weight); };
  };
  static class decreasing_weight_order decreasing;
  static class increasing_weight_order increasing;
  void insert_increasing(const weighted<T,N>& v);
  void insert_decreasing(const weighted<T,N>& v);
  void insert_increasing(const T& v, const N& w);
  void insert_decreasing(const T& v, const N& w);
};
template<class T, class N> class weighted_set
: public svector< weighted<T,N> >
{
 public:
  void insert(const T& v, const N& w);
  void insert(const T& v);
  index_type arg_max();
  index_type arg_min();
};
template<class T>
bool lvector<T>::operator==(const lvector& _vec) const
{
  if (lvector<T>::size() != _vec.size()) return false;
  for (index_type k = 0; k < lvector<T>::size(); k++)
    if (!((*this)[k] == _vec[k])) return false;
  return true;
}
template<class T>
bool lvector<T>::operator!=(const lvector& _vec) const
{
  if (*this == _vec) return false;
  else return true;
}
template<class T>
bool lvector<T>::operator<(const lvector& vec) const
{
  if (lvector<T>::size() < vec.size()) return true;
  else if (lvector<T>::size() > vec.size()) return false;
  else {
    for (index_type k = 0; k < lvector<T>::size(); k++) {
      if ((*this)[k] < vec[k]) return true;
      else if ((*this)[k] > vec[k]) return false;
    }
    return false;
  }
}
template<class T>
bool lvector<T>::operator<=(const lvector& vec) const
{
  if (lvector<T>::size() < vec.size()) return true;
  else if (lvector<T>::size() > vec.size()) return false;
  else {
    for (index_type k = 0; k < lvector<T>::size(); k++) {
      if ((*this)[k] < vec[k]) return true;
      else if ((*this)[k] > vec[k]) return false;
    }
    return true;
  }
}
template<class T>
bool lvector<T>::operator>(const lvector& vec) const
{
  if (lvector<T>::size() < vec.size()) return false;
  else if (lvector<T>::size() > vec.size()) return true;
  else {
    for (index_type k = 0; k < lvector<T>::size(); k++) {
      if ((*this)[k] < vec[k]) return false;
      else if ((*this)[k] > vec[k]) return true;
    }
    return false;
  }
}
template<class T>
bool lvector<T>::operator>=(const lvector& vec) const
{
  if (lvector<T>::size() < vec.size()) return false;
  else if (lvector<T>::size() > vec.size()) return true;
  else {
    for (index_type k = 0; k < lvector<T>::size(); k++) {
      if ((*this)[k] < vec[k]) return false;
      else if ((*this)[k] > vec[k]) return true;
    }
    return true;
  }
}
template<class T>
bool lvector<T>::contains(const T& v) const
{
  for (index_type k = 0; k < lvector<T>::size(); k++)
    if ((*this)[k] == v) return true;
  return false;
}
template<class T>
index_type lvector<T>::first(const T& v) const
{
  for (index_type k = 0; k < lvector<T>::size(); k++)
    if ((*this)[k] == v) return k;
  return no_such_index;
}
template<class T>
index_type lvector<T>::next(const T& v, index_type p) const
{
  for (index_type k = p + 1; k < lvector<T>::size(); k++)
    if ((*this)[k] == v) return k;
  return no_such_index;
}
template<class T>
index_type lvector<T>::find(const T& v, bool_vec& s) const
{
  index_type n = 0;
  s.assign_value(false, lvector<T>::size());
  for (index_type k = 0; k < lvector<T>::size(); k++)
    if ((*this)[k] == v) {
      s[k] = true;
      n += 1;
    }
  return n;
}
template<class T>
index_type lvector<T>::count(const T& v) const
{
  index_type c = 0;
  for (index_type k = 0; k < lvector<T>::size(); k++)
    if ((*this)[k] == v) c += 1;
  return c;
}
template<class T>
index_type lvector<T>::length() const
{
  return std::vector<T>::size();
}
template<class T>
index_type lvector<T>::arg_max() const
{
  if (lvector<T>::empty()) return no_such_index;
  index_type m = 0;
  for (index_type k = 1; k < lvector<T>::size(); k++)
    if ((*this)[k] > (*this)[m]) m = k;
  return m;
}
template<class T>
index_type lvector<T>::arg_min() const
{
  if (lvector<T>::empty()) return no_such_index;
  index_type m = 0;
  for (index_type k = 1; k < lvector<T>::size(); k++)
    if ((*this)[k] < (*this)[m]) m = k;
  return m;
}
template<class T>
index_type lvector<T>::arg_first(const order& o) const
{
  if (lvector<T>::empty()) return no_such_index;
  index_type m = 0;
  for (index_type k = 1; k < lvector<T>::size(); k++)
    if (o((*this)[k], (*this)[m])) m = k;
  return m;
}
template<class T>
index_type lvector<T>::arg_last(const order& o) const
{
  if (lvector<T>::empty()) return no_such_index;
  index_type m = 0;
  for (index_type k = 1; k < lvector<T>::size(); k++)
    if (o((*this)[m], (*this)[k])) m = k;
  return m;
}
template<class T>
index_pair lvector<T>::first_common(const lvector<T>& vec) const
{
  for (index_type i = 0; i < lvector<T>::size(); i++) {
    for (index_type j = 0; j < vec.size(); j++)
      if ((*this)[i] == vec[j]) return index_pair(i, j);
  }
  return index_pair(no_such_index, no_such_index);
}
template<class T>
index_pair lvector<T>::next_common(const lvector<T>& vec, index_pair p) const
{
  index_type i = p.first;
  index_type j = p.second + 1;
  while (j < vec.size()) {
    if ((*this)[i] == vec[j])
      return index_pair(i, j);
    j += 1;
  }
  i += 1;
  while (i < lvector<T>::size()) {
    j = 0;
    while (j < vec.size()) {
      if ((*this)[i] == vec[j])
 return index_pair(i, j);
      j += 1;
    }
    i += 1;
  }
  return index_pair(no_such_index, no_such_index);
}
template<class T>
void lvector<T>::difference
(const lvector& v1, lvector& d0, lvector& d1)
{
  d0.assign_copy(*this);
  d1.assign_copy(v1);
  index_type i0 = 0;
  while (i0 < d0.size()) {
    index_type i1 = d1.first(d0[i0]);
    if (i1 != no_such_index) {
      d0.remove(i0);
      d1.remove(i1);
    }
    else {
      i0 += 1;
    }
  }
}
template<class T>
void lvector<T>::assign_copy(const lvector& _vec)
{
  std::vector<T>::resize(_vec.size());
  for (index_type k = 0; k < _vec.size(); k++)
    (*this)[k] = _vec[k];
}
template<class T>
void lvector<T>::assign_copy(const T* _arr, index_type n)
{
  std::vector<T>::resize(n);
  for (index_type k = 0; k < n; k++)
    (*this)[k] = _arr[k];
}
template<class T>
void lvector<T>::assign_value(const T& _val)
{
  for (index_type k = 0; k < lvector<T>::size(); k++)
    (*this)[k] = _val;
}
template<class T>
void lvector<T>::assign_value(const T& _val, index_type l)
{
  std::vector<T>::resize(l);
  for (index_type k = 0; k < lvector<T>::size(); k++)
    (*this)[k] = _val;
}
template<class T>
void lvector<T>::assign_remap(const lvector<T>& vec, const index_vec& map)
{
  assert(map.length() == vec.length());
  index_type m = 0;
  for (index_type k = 0; k < vec.length(); k++)
    if (map[k] != no_such_index)
      if (map[k] > m) m = map[k];
  set_length(m + 1);
  for (index_type k = 0; k < vec.length(); k++)
    if (map[k] != no_such_index)
      (*this)[map[k]] = vec[k];
}
template<class T>
void lvector<T>::remap(const index_vec& map)
{
  lvector v0(*this);
  assign_remap(v0, map);
}
template<class T>
void lvector<T>::assign_select(const lvector& _vec, const index_set& s)
{
  set_length(s.length());
  for (index_type k = 0; k < s.length(); k++)
    (*this)[k] = _vec[s[k]];
}
template<class T>
void lvector<T>::assign_select(const lvector& _vec, const bool_vec& s)
{
  clear();
  for (index_type k = 0; k < _vec.length(); k++)
    if (s[k]) append(_vec[k]);
}
template<class T>
const lvector<T>& lvector<T>::operator=(const lvector<T>& _vec)
{
  assign_copy(_vec);
  return _vec;
}
template<class T>
void lvector<T>::set_length(index_type l)
{
  std::vector<T>::resize(l);
}
template<class T>
void lvector<T>::set_length(index_type l, const T& v)
{
  std::vector<T>::resize(l, v);
}
template<class T>
void lvector<T>::inc_length_to(index_type l)
{
  if (std::vector<T>::size() < l)
    std::vector<T>::resize(l);
}
template<class T>
void lvector<T>::inc_length_to(index_type l, const T& v)
{
  if (std::vector<T>::size() < l)
    std::vector<T>::resize(l, v);
}
template<class T>
index_type lvector<T>::inc_length(index_type d)
{
  std::vector<T>::resize(std::vector<T>::size() + d);
  return std::vector<T>::size();
}
template<class T>
index_type lvector<T>::inc_length(index_type d, const T& v)
{
  std::vector<T>::resize(std::vector<T>::size() + d, v);
  return std::vector<T>::size();
}
template<class T>
index_type lvector<T>::dec_length(index_type d)
{
  assert(std::vector<T>::size() >= d);
  std::vector<T>::resize(std::vector<T>::size() - d);
  return std::vector<T>::size();
}
template<class T>
void lvector<T>::clear()
{
  std::vector<T>::clear();
}
template<class T>
void lvector<T>::append(const T& v)
{
  std::vector<T>::push_back(v);
}
template<class T>
void lvector<T>::append(const lvector<T>& v)
{
  for (index_type k = 0; k < v.size(); k++) append(v[k]);
}
template<class T>
T& lvector<T>::append()
{
  T v;
  std::vector<T>::push_back(v);
  return (*this)[std::vector<T>::size() - 1];
}
template<class T>
void lvector<T>::insert(const T& v, index_type p)
{
  if (p < lvector<T>::size()) {
    std::vector<T>::insert(std::vector<T>::begin() + p, v);
  }
  else {
    std::vector<T>::resize(p + 1);
    (*this)[p] = v;
  }
}
template<class T>
index_type lvector<T>::insert_ordered(const T& v, const order& o, index_type f)
{
  assert(f <= lvector<T>::size());
  for (index_type k = f; k < lvector<T>::size(); k++) {
    if (o(v, (*this)[k])) {
      insert(v, k);
      return k;
    }
  }
  append(v);
  return (lvector<T>::size() - 1);
}
template<class T>
index_type lvector<T>::insert_ordered(const lvector& vec, const order& o)
{
  if (vec.empty()) return no_such_index;
  index_type p0 = insert_ordered(vec[0], o);
  for (index_type k = 1; k < vec.size(); k++) {
    index_type p1 = insert_ordered(vec[k], o);
    if (p1 < p0) p0 = p1;
  }
  return p0;
}
template<class T>
void lvector<T>::remove(index_type p)
{
  if (p < lvector<T>::size())
    std::vector<T>::erase(std::vector<T>::begin() + p);
}
template<class T>
void lvector<T>::remove(index_type p0, index_type p1)
{
  assert(p0 < p1);
  if (p1 < lvector<T>::size())
    std::vector<T>::erase(std::vector<T>::begin() + p0,
     std::vector<T>::begin() + p1);
  else
    std::vector<T>::erase(std::vector<T>::begin() + p0,
     std::vector<T>::end());
}
template<class T>
void lvector<T>::remove(const bool_vec& s, index_vec& map)
{
  assert(s.size() >= lvector<T>::size());
  index_type scan_p = 0;
  index_type put_p = 0;
  index_vec rm_map(no_such_index, lvector<T>::size());
  while (scan_p < lvector<T>::size()) {
    if (!s[scan_p]) {
      if (put_p < scan_p) {
 (*this)[put_p] = (*this)[scan_p];
      }
      rm_map[scan_p] = put_p;
      put_p += 1;
    }
    else {
      rm_map[scan_p] = no_such_index;
    }
    scan_p += 1;
  }
  std::vector<T>::resize(put_p);
  for (index_type k = 0; k < map.size(); k++)
    if (map[k] != no_such_index) {
      assert(map[k] < rm_map.size());
      map[k] = rm_map[map[k]];
    }
}
template<class T>
void lvector<T>::remove(const bool_vec& s)
{
  assert(s.size() >= lvector<T>::size());
  index_type scan_p = 0;
  index_type put_p = 0;
  while (scan_p < lvector<T>::size()) {
    if (!s[scan_p]) {
      if (put_p < scan_p) {
 (*this)[put_p] = (*this)[scan_p];
      }
      put_p += 1;
    }
    scan_p += 1;
  }
  std::vector<T>::resize(put_p);
}
template<class T>
void lvector<T>::remove(const index_set& s)
{
  bool_vec s1(s, lvector<T>::size());
  remove(s1);
}
template<class T>
void lvector<T>::remove(const index_set& s, index_vec& map)
{
  bool_vec s1(s, std::vector<T>::size());
  lvector<T>::remove(s1, map);
}
template<class T>
void lvector<T>::remove_duplicate_elements()
{
  equivalence eq(lvector<T>::size());
  for (index_type i = 0; i < lvector<T>::size(); i++)
    for (index_type j = i+1; j < lvector<T>::size(); j++)
      if ((*this)[i] == (*this)[j])
 eq.merge(i, j);
  bool_vec s(false, lvector<T>::size());
  for (index_type i = 0; i < lvector<T>::size(); i++)
    if (eq.canonical(i) != i)
      s[i] = true;
  remove(s);
}
template<class T>
void lvector<T>::swap(index_type i, index_type j)
{
  T tmp = (*this)[i];
  (*this)[i] = (*this)[j];
  (*this)[j] = tmp;
}
template<class T>
void svector<T>::assign_singleton(const T& _val)
{
  lvector<T>::set_length(1);
  (*this)[0] = _val;
}
template<class T>
void svector<T>::assign_values(const lvector<T>& vec)
{
  lvector<T>::clear();
  for (index_type k = 0; k < vec.size(); k++)
    insert(vec[k]);
}
template<class T>
void svector<T>::insert(const T& v) {
  index_type i = 0;
  bool seeking = (i < std::vector<T>::size());
  while (seeking) {
    if ((*this)[i] < v) {
      i += 1;
      if (i >= std::vector<T>::size())
 seeking = false;
    }
    else {
      seeking = false;
    }
  }
  if (i < lvector<T>::size()) {
    if ((*this)[i] == v)
      return;
    else
      lvector<T>::insert(v, i);
  }
  else {
    lvector<T>::append(v);
  }
}
template<class T>
void svector<T>::insert(const lvector<T>& vec)
{
  for (index_type k = 0; k < vec.size(); k++) insert(vec[k]);
}
template<class T>
bool svector<T>::contains(const T& v) const
{
  index_type i = 0;
  while ((i < lvector<T>::size()) &&
  ((*this)[i] < v)) i += 1;
  if (i < lvector<T>::size())
    if ((*this)[i] == v) return true;
  return false;
}
template<class T>
bool svector<T>::contains(const svector& vec) const
{
  index_type v_i = 0;
  index_type i = 0;
  while (v_i < vec.size()) {
    if (i >= lvector<T>::size()) return false;
    if ((*this)[i] == vec[v_i]) {
      v_i += 1;
      i += 1;
    }
    else if ((*this)[i] > vec[v_i]) {
      return false;
    }
    else {
      while ((i < lvector<T>::size()) && ((*this)[i] < vec[v_i]))
 i += 1;
    }
  }
  return true;
}
template<class T>
bool svector<T>::subset(const svector& vec) const
{
  return vec.contains(*this);
}
template<class T>
void svector<T>::intersect(const svector& vec)
{
  index_type i = 0;
  while (i < lvector<T>::size()) {
    if (!vec.contains((*this)[i]))
      lvector<T>::remove(i);
    else
      i += 1;
  }
}
template<class T>
void svector<T>::difference(const svector& vec)
{
  svector d(vec);
  d.subtract(*this);
  subtract(vec);
  insert(d);
}
template<class T>
index_pair svector<T>::first_common(const lvector<T>& vec) const
{
  return lvector<T>::first_common(vec);
}
template<class T>
index_pair svector<T>::next_common(const lvector<T>& vec, index_pair p) const
{
  return lvector<T>::next_common(vec, p);
}
template<class T>
index_pair svector<T>::first_common(const svector<T>& vec) const
{
  index_type i = 0;
  index_type j = 0;
  while ((i < svector<T>::size()) && (j < vec.size())) {
    if ((*this)[i] == vec[j])
      return index_pair(i, j);
    else if
      ((*this)[i] < vec[j]) i += 1;
    else
      j += 1;
  }
  return index_pair(no_such_index, no_such_index);
}
template<class T>
index_pair svector<T>::next_common(const svector<T>& vec, index_pair p) const
{
  index_type i = p.first + 1;
  index_type j = p.second + 1;
  while ((i < svector<T>::size()) && (j < vec.size())) {
    if ((*this)[i] == vec[j])
      return index_pair(i, j);
    else if ((*this)[i] < vec[j])
      i += 1;
    else
      j += 1;
  }
  return index_pair(no_such_index, no_such_index);
}
template<class T>
index_type svector<T>::count_common(const svector& vec) const
{
  index_type i = 0;
  index_type j = 0;
  index_type c = 0;
  while ((i < svector<T>::size()) && (j < vec.size())) {
    if ((*this)[i] == vec[j]) {
      c += 1;
      i += 1;
      j += 1;
    }
    else if ((*this)[i] < vec[j])
      i += 1;
    else
      j += 1;
  }
  return c;
}
template<class T>
void svector<T>::subtract(const svector& vec)
{
  index_type i = 0;
  while (i < lvector<T>::size()) {
    if (vec.contains((*this)[i]))
      lvector<T>::remove(i);
    else
      i += 1;
  }
}
template<class T>
void svector<T>::subtract(const T& v)
{
  index_type i = 0;
  while (i < lvector<T>::size()) {
    if ((*this)[i] == v) {
      lvector<T>::remove(i);
      return;
    }
    else {
      i += 1;
    }
  }
}
template<class T>
void matrix<T>::set_size(index_type r, index_type c)
{
  lvector<row_type>::set_length(r);
  for (index_type k = 0; k < lvector<row_type>::size(); k++)
    (*this)[k].set_length(c);
}
template<class T>
void matrix<T>::assign_value(const T& _val)
{
  for (index_type k = 0; k < lvector<row_type>::size(); k++)
    (*this)[k].assign_value(_val);
}
template<class T>
void matrix<T>::assign_value(const T& _val, index_type r, index_type c)
{
  lvector<row_type>::set_length(r);
  for (index_type k = 0; k < lvector<row_type>::size(); k++)
    (*this)[k].assign_value(_val, c);
}
template<class T>
void swapable_pair<T>::swap()
{
  T tmp = this->first;
  this->first = this->second;
  this->second = tmp;
}
template<class T>
void comparable_pair<T>::sort_ascending()
{
  if (this->first > this->second) swapable_pair<T>::swap();
}
template<class T>
void comparable_pair<T>::sort_descending()
{
  if (this->first < this->second) swapable_pair<T>::swap();
}
template<class T, class N>
class weighted_vec<T,N>::decreasing_weight_order
  weighted_vec<T,N>::decreasing;
template<class T, class N>
class weighted_vec<T,N>::increasing_weight_order
  weighted_vec<T,N>::increasing;
template<class T, class N>
void weighted_vec<T,N>::insert_increasing(const weighted<T,N>& v)
{
  insert_ordered(v, increasing);
}
template<class T, class N>
void weighted_vec<T,N>::insert_decreasing(const weighted<T,N>& v)
{
  insert_ordered(v, decreasing);
}
template<class T, class N>
void weighted_vec<T,N>::insert_increasing(const T& v, const N& w)
{
  insert_ordered(weighted<T,N>(v, w), increasing);
}
template<class T, class N>
void weighted_vec<T,N>::insert_decreasing(const T& v, const N& w)
{
  insert_ordered(weighted<T,N>(v, w), decreasing);
}
template<class T, class N>
void weighted_set<T,N>::insert(const T& v, const N& w)
{
  index_type p = svector< weighted<T,N> >::first(v);
  if (p == no_such_index) {
    svector< weighted<T,N> >::insert(weighted<T,N>(v, w));
  }
  else {
    (*this)[p].weight += w;
  }
}
template<class T, class N>
void weighted_set<T,N>::insert(const T& v)
{
  index_type p = svector< weighted<T,N> >::first(v);
  if (p == no_such_index) {
    svector< weighted<T,N> >::insert(weighted<T,N>(v, 1));
  }
  else {
    (*this)[p].weight += 1;
  }
}
template<class T, class N>
index_type weighted_set<T,N>::arg_max()
{
  if (weighted_set<T,N>::empty()) return no_such_index;
  index_type m = 0;
  for (index_type k = 1; k < weighted_set<T,N>::size(); k++)
    if ((*this)[k].weight > (*this)[m].weight) m = k;
  return m;
}
template<class T, class N>
index_type weighted_set<T,N>::arg_min()
{
  if (weighted_set<T,N>::empty()) return no_such_index;
  index_type m = 0;
  for (index_type k = 1; k < weighted_set<T,N>::size(); k++)
    if ((*this)[k].weight < (*this)[m].weight) m = k;
  return m;
}
template<class T>
inline std::ostream& operator<<(std::ostream& s, const swapable_pair<T>& p)
{
  return s << '(' << p.first << ',' << p.second << ')';
}
template<class T>
::std::ostream& operator<<(::std::ostream& s, const lvector<T>& _vec)
{
  s << '[';
  for (index_type k = 0; k < _vec.size(); k++) {
    if (k > 0) s << ',';
    s << _vec[k];
  }
  s << ']';
  return s;
}
inline std::ostream& operator<<(std::ostream& s, const mapping& m)
{
  s << '{';
  for (index_type k = 0; k < m.length(); k++) {
    if (k > 0) s << ',';
    s << k << '-' << '>';
    if (m[k] == no_such_index)
      s << '_';
    else
      s << m[k];
  }
  return s << '}';
}
inline std::ostream& operator<<(std::ostream& s, const equivalence& eq)
{
  s << '{';
  bool first = true;
  for (index_type k = 0; k < eq.length(); k++) {
    index_type c = eq.canonical(k);
    if (!first) {
      s << ',';
    }
    else {
      first = false;
    }
    s << k << '=' << c;
  }
  return s << '}';
}
template<class T, class N>
std::ostream& operator<<(::std::ostream& s, const weighted<T,N>& w)
{
  s << '<' << w.value << ':' << w.weight << '>';
}
}
namespace hsps {
class char_map {
 public:
  static const unsigned int _CHAR_COUNT = 256;
 private:
  char _map[_CHAR_COUNT];
 public:
  char_map();
  char_map(const char in[_CHAR_COUNT]);
  void identify(const char _c0, const char _c1);
  char operator[](const char _in) const
    { return _map[(unsigned char)_in]; };
  void apply(char* s) const;
  void apply(char* s, index_type len) const;
  int strcmp(const char *s0, const char *s1) const;
  int strcmp(const char *s0, const char *s1, index_type len) const;
  const char* strchr(const char* s, char c) const;
  const char* strchr(const char* s, index_type len, char c) const;
  char* strcpy(const char *s0, char *s1) const;
  char* strcpy(const char *s0, index_type len, char *s1) const;
  char* strdup(const char *s0) const;
  char* strdup(const char *s0, index_type len) const;
  index_type hash(const char *s) const;
  index_type hash(const char *s, index_type len) const;
};
extern const char lowercase[char_map::_CHAR_COUNT];
extern const char rot13[char_map::_CHAR_COUNT];
extern char_map lowercase_map;
extern char_map rot13_map;
}
namespace hsps {
typedef lvector<char*> string_vec;
typedef lvector<void*> element_vec;
inline ::std::ostream& operator<<(::std::ostream& s, const string_vec& vec) {
  s << '[';
  for (index_type k = 0; k < vec.length(); k++) {
    if (k > 0) s << ',';
    s << '"' << vec[k] << '"';
  }
  s << ']';
  return s;
}
class StringTable {
 public:
  struct Cell {
    index_type bin;
    char* text;
    void* val;
    Cell* next;
    Cell(const char* s, char_map& map, index_type b, Cell* n)
      : bin(b), text(map.strdup(s)), val(0), next(n) { };
    Cell(const char* s, index_type len, char_map& map, index_type b, Cell* n)
      : bin(b), text(map.strdup(s, len)), val(0), next(n) { };
    Cell(const char* s, char_map& map, void* v, index_type b, Cell* n)
      : bin(b), text(map.strdup(s)), val(v), next(n) { };
    Cell(const char* s, index_type len, char_map& map, void* v, index_type b, Cell* n)
      : bin(b), text(map.strdup(s, len)), val(v), next(n) { };
    ~Cell() { delete text; if (next) delete next; };
  };
 private:
  index_type n_bin;
  char_map& map;
  Cell** table;
  index_type n_entries;
 public:
  StringTable(index_type b, char_map& cm);
  ~StringTable();
  StringTable::Cell* inserta(const char* str);
  StringTable::Cell* inserta(const char* str, index_type len);
  StringTable::Cell* gensym(const char* str);
  char* insert(const char* str);
  char* insert(const char* str, index_type len);
  char* set(const char* str, void* val);
  char* set(const char* str, index_type len, void* val);
  char* set(const char* str)
    { return set(str, (void*)0); };
  char* set(const char* str, index_type len)
    { return set(str, len, (void*)0); };
  const StringTable::Cell* find(const char* str) const;
  const StringTable::Cell* find(const char* str, index_type len) const;
  void* find_val(const char* str) const;
  void* find_val(const char* str, index_type len) const;
  const StringTable::Cell* first() const;
  const StringTable::Cell* next(const StringTable::Cell* c) const;
  string_vec* keys();
  element_vec* values();
  index_type table_bins() { return n_bin; };
  index_type table_entries() { return n_entries; };
  char_map& table_char_map() { return map; };
  void apply_map(const char_map& map);
};
}
#include <stdio.h>
#include <stdlib.h>
namespace hsps {
typedef zero_init_pair<void*> ptr_pair;
class ptr_table {
  void* _key;
  ptr_table* _left;
  ptr_table* _right;
  ptr_table* _up;
  ptr_table* _prev;
  ptr_table* _next;
  index_type _count;
 public:
  void* val;
 private:
  ptr_table(void* k, ptr_table* u, ptr_table* p)
    : _key(k), _left(0), _right(0), _up(u), _prev(p), _next(0),
    _count(1), val(0) { };
 public:
  typedef lvector<void*> key_vec;
  typedef lvector<void*> value_vec;
  typedef lvector<ptr_table*> cell_vec;
  ptr_table()
    : _key(0), _left(0), _right(0), _up(0), _prev(0), _next(0),
    _count(0), val(0) { };
  ~ptr_table();
  void* key() { return _key; };
  ptr_table* enum_key_first();
  ptr_table* enum_key_next();
  void key_sequence(key_vec&);
  key_vec* key_sequence();
  ptr_table* root();
  ptr_table* next() { return _next; };
  ptr_table* insert(void* k);
  ptr_table* insert_next(void* k);
  ptr_table* insert(void** k, index_type l);
  ptr_table* insert(key_vec& k);
  ptr_table* find(void* k);
  ptr_table* find_next(void* k);
  ptr_table* find(void** k, index_type l);
  ptr_table* find(key_vec& k);
  bool contains(void* k);
  bool contains(void** k, index_type l);
  bool contains(key_vec& k);
  void set(void* k, void* v);
  void set(void** k, index_type l, void* v);
  void set(key_vec& k, void* v);
  void* find_val(void** k, index_type l);
  void* find_val(key_vec& k);
  void*& operator[](void* k);
  void*& operator[](key_vec& k);
  void dump(cell_vec& vec);
  index_type count_keys();
  void dump_keys(key_vec& vec);
  key_vec* keys();
  index_type count_values();
  void dump_values(value_vec& vec);
  value_vec* values();
};
inline bool ptr_table::contains(void* k) {
  return (find(k) != 0);
}
inline bool ptr_table::contains(void** k, index_type l) {
  return (find(k) != 0);
}
inline bool ptr_table::contains(key_vec& k) {
  return (find(k) != 0);
}
inline void ptr_table::set(void* k, void* v) {
  insert(k)->val = v;
}
inline void ptr_table::set(void** k, index_type l, void* v) {
  insert(k)->val = v;
}
inline void ptr_table::set(key_vec& k, void* v) {
  insert(k)->val = v;
}
inline void*& ptr_table::operator[](void* k) {
  ptr_table* a = insert(k);
  return a->val;
}
inline void*& ptr_table::operator[](key_vec& k) {
  ptr_table* a = insert(k);
  return a->val;
}
inline void* ptr_table::find_val(void** k, index_type l) {
  ptr_table* a = find(k, l);
  if (a) return a->val;
  else return 0;
}
inline void* ptr_table::find_val(key_vec& k) {
  ptr_table* a = find(k);
  if (a) return a->val;
  else return 0;
}
}
#include <iostream>
#include <limits.h>
namespace hsps {
long euclid(long n, long k, long& a, long& b);
long gcd(long n, long k);
long lcm(long n, long k);
unsigned long ilog(unsigned long n);
long imag(long n);
class rational {
  long nm;
  long dv;
 public:
  rational();
  rational(long n);
  rational(long n, long d);
  rational(const rational& r);
  struct XR {
    long x_nm;
    long x_dv;
    XR& operator=(const rational r);
  };
  rational(const XR& x);
  long numerator() const;
  long divisor() const;
  long sign() const;
  bool zero() const;
  bool finite() const;
  bool infinite() const;
  bool integral() const;
  static rational reduce(rational r);
  static rational invert(const rational r);
  static rational infinity(const rational r);
  static rational infinity(const long s);
  static rational floor(const rational r);
  static rational floor_to(const rational r, long div);
  static rational ceil(const rational r);
  static rational ceil_to(const rational r, long div);
  static rational frac(const rational r);
  static rational round(const rational r, long div_max);
  static rational min(const rational r0, const rational r1);
  static rational max(const rational r0, const rational r1);
  static rational rgcd(const rational r0, const rational r1);
  static rational dtor(double v);
  static rational ator(const char* s);
  rational reduce() const;
  rational invert() const;
  rational floor() const;
  rational floor_to(long d) const;
  rational ceil() const;
  rational frac() const;
  rational round(long div_max) const;
  rational round() const;
  rational operator=(const rational r);
  rational operator=(long n);
  rational operator+=(const rational r);
  rational operator-=(const rational r);
  rational operator*=(const rational r);
  rational operator/=(const rational r);
  rational operator+=(long n);
  rational operator-=(long n);
  rational operator*=(long n);
  rational operator/=(long n);
  double decimal() const;
};
bool operator==(const rational r0, const rational r1);
bool operator==(const rational r0, long n1);
bool operator==(long n0, const rational r1);
bool operator!=(const rational r0, const rational r1);
bool operator!=(const rational r0, long n1);
bool operator!=(long n0, const rational r1);
bool operator<(const rational r0, const rational r1);
bool operator<=(const rational r0, const rational r1);
bool operator>(const rational r0, const rational r1);
bool operator>=(const rational r0, const rational r1);
rational operator+(const rational r0, const rational r1);
rational operator-(const rational r0, const rational r1);
rational operator*(const rational r0, const rational r1);
rational operator/(const rational r0, const rational r1);
rational operator+(const rational r0, long n1);
rational operator-(const rational r0, long n1);
rational operator*(const rational r0, long n1);
rational operator/(const rational r0, long n1);
rational operator+(long n0, const rational r1);
rational operator-(long n0, const rational r1);
rational operator*(long n0, const rational r1);
rational operator/(long n0, const rational r1);
rational safeadd(const rational r0, const rational r1);
rational safemul(const rational r0, const rational r1);
::std::ostream& operator<<(::std::ostream& s, const rational r);
inline rational::XR& rational::XR::operator=(const rational r)
{
  x_nm = r.numerator();
  x_dv = r.divisor();
  return *this;
}
inline rational::rational()
  : nm(0), dv(1) { }
inline rational::rational(long n)
  : nm(n), dv(1) { }
inline rational::rational(long n, long d)
  : nm(d < 0 ? -1*n : n), dv(d < 0 ? -1*d : d) { }
inline rational::rational(const rational& r)
  : nm(r.nm), dv(r.dv) { }
inline rational::rational(const rational::XR& x)
  : nm(x.x_nm), dv(x.x_dv) { };
inline long rational::numerator() const { return nm; }
inline long rational::divisor() const { return dv; }
inline long rational::sign() const
{
  return (nm < 0 ? -1 : (nm > 0 ? 1 : 0));
}
inline bool rational::zero() const
{
  return nm == 0;
}
inline bool rational::finite() const
{
  return dv != 0;
}
inline bool rational::infinite() const
{
  return dv == 0;
}
inline bool rational::integral() const
{
  return dv == 1;
}
inline rational rational::reduce(rational r)
{
  if (r.infinite()) return infinity(r.sign());
  if (r.sign() == 0) return rational(0,1);
  long c = gcd(r.nm, r.dv);
  return rational(r.nm / c, r.dv / c);
}
inline rational rational::invert(const rational r)
{
  return rational(r.dv, r.nm);
}
inline rational rational::infinity(const long s)
{
  return rational((s < 0 ? -1 : (s > 0 ? 1 : 0)), 0);
}
inline rational rational::infinity(const rational r)
{
  return rational(r.sign(),0);
}
inline rational rational::floor(const rational r)
{
  if (r.infinite()) return r;
  return rational(r.nm / r.dv);
}
inline rational rational::floor_to(const rational r, long d)
{
  if (r.infinite()) return r;
  return rational((r.nm * d) / r.dv, d);
}
inline rational rational::ceil(const rational r)
{
  if (r.infinite()) return r;
  if (r.dv == 1) return r;
  return rational((r.nm / r.dv) + 1, 1);
}
inline rational rational::ceil_to(const rational r, long d)
{
  if (r.infinite()) return r;
  long x = (r.nm * d);
  long y = x / r.dv;
  if ((y * r.dv) == x)
    return rational(y, d);
  else
    return rational(y + 1, d);
}
inline rational rational::frac(const rational r) {
  if (r.infinite()) return r;
  return reduce(rational(r.nm % r.dv, r.dv));
}
inline rational rational::round(const rational r, long d_max)
{
  if (r.infinite()) return r;
  rational s(r);
  while (s.dv > d_max) {
    s.dv = (s.dv / 2);
    s.nm = (s.nm / 2);
    s.reduce();
  }
  return s;
}
inline rational rational::rgcd(const rational r0, const rational r1)
{
  long c = gcd(r0.divisor(), r1.divisor());
  long a0 = r0.numerator() * (r1.divisor() / c);
  long a1 = r1.numerator() * (r0.divisor() / c);
  long d = gcd(a0, a1);
  return rational(d, (r0.divisor() / c) * (r1.divisor() / c) * c).reduce();
}
inline rational rational::min(const rational r0, const rational r1)
{
  if (r0.infinite()) {
    if (r0.sign() < 0) return r0;
    else return r1;
  }
  else if (r1.infinite()) {
    if (r1.sign() < 0) return r1;
    else return r0;
  }
  else if (r0 < r1) return r0;
  else return r1;
}
inline rational rational::max(const rational r0, const rational r1)
{
  if (r0.infinite()) {
    if (r0.sign() > 0) return r0;
    else return r1;
  }
  else if (r1.infinite()) {
    if (r1.sign() > 0) return r1;
    else return r0;
  }
  else if (r0 < r1) return r1;
  else return r0;
}
inline rational rational::reduce() const
{
  return reduce(*this);
}
inline rational rational::invert() const
{
  return invert(*this);
}
inline rational rational::floor() const
{
  return floor(*this);
}
inline rational rational::floor_to(long d) const
{
  return floor_to(*this, d);
}
inline rational rational::ceil() const
{
  return ceil(*this);
}
inline rational rational::frac() const
{
  return frac(*this);
}
inline rational rational::round(long d_max) const
{
  return round(*this, d_max);
}
inline rational rational::round() const
{
  return round(*this, (LONG_MAX/16));
}
inline rational rational::operator=(const rational r)
{
  nm = r.nm;
  dv = r.dv;
  return *this;
}
inline rational rational::operator=(long n)
{
  nm = n;
  dv = 1;
  return *this;
}
inline rational rational::operator+=(const rational r)
{
  return *this = (*this + r);
}
inline rational rational::operator-=(const rational r)
{
  return *this = (*this - r);
}
inline rational rational::operator*=(const rational r)
{
  return *this = (*this * r);
}
inline rational rational::operator/=(const rational r)
{
  return *this = (*this / r);
}
inline rational rational::operator+=(long n)
{
  return *this = (*this + n);
}
inline rational rational::operator-=(long n)
{
  return *this = (*this - n);
}
inline rational rational::operator*=(long n)
{
  return *this = (*this * n);
}
inline rational rational::operator/=(long n)
{
  return *this = (*this / n);
}
inline double rational::decimal() const { return nm/(double)dv; };
inline bool operator==(const rational r0, const rational r1)
{
  if (r0.infinite() && r1.infinite()) return r0.sign() == r1.sign();
  else return ((r0.numerator() == r1.numerator()) &&
        (r0.divisor() == r1.divisor()));
}
inline bool operator==(const rational r0, long n1)
{
  return ((r0.numerator() == n1) && (r0.divisor() == 1));
}
inline bool operator==(long n0, const rational r1)
{
  return ((r1.numerator() == n0) && (r1.divisor() == 1));
}
inline bool operator!=(const rational r0, const rational r1)
{
  return !(r0 == r1);
}
inline bool operator!=(const rational r0, long n1)
{
  return !(r0 == n1);
}
inline bool operator!=(long n0, const rational r1)
{
  return !(n0 == r1);
}
inline bool operator<(const rational r0, const rational r1)
{
  if (r0.infinite() && r1.infinite() && (r0.sign() == r1.sign())) return false;
  else return (r0 - r1).sign() < 0;
}
inline bool operator<=(const rational r0, const rational r1)
{
  if (r0.infinite() && r1.infinite() && (r0.sign() == r1.sign())) return true;
  else return (r0 - r1).sign() <= 0;
}
inline bool operator>(const rational r0, const rational r1)
{
  if (r0.infinite() && r1.infinite() && (r0.sign() == r1.sign())) return false;
  else return (r0 - r1).sign() > 0;
}
inline bool operator>=(const rational r0, const rational r1)
{
  if (r0.infinite() && r1.infinite() && (r0.sign() == r1.sign())) return true;
  else return (r0 - r1).sign() >= 0;
}
inline rational operator+(const rational r0, const rational r1)
{
  if (r1.infinite()) {
    if (r0.infinite()) {
      if (r1.sign() == r0.sign()) return rational::infinity(r0);
      else {
 ::std::cerr << "error: " << r0 << " + " << r1 << " not defined"
           << ::std::endl;
 abort();
      }
    }
    else {
      return rational::infinity(r1);
    }
  }
  else if (r0.infinite()) {
    return rational::infinity(r0);
  }
  else if ((r0.divisor() == 1) && (r1.divisor() == 1)) {
    return rational(r0.numerator() + r1.numerator(), 1);
  }
  else {
    long c = gcd(r0.divisor(), r1.divisor());
    long n = (r0.numerator() * (r1.divisor() / c) +
       r1.numerator() * (r0.divisor() / c));
    long d = ((r0.divisor() / c) * r1.divisor());
    return rational(n, d).reduce();
  }
}
inline rational operator-(const rational r0, const rational r1)
{
  if (r1.infinite()) {
    if (r0.infinite()) {
      if (r1.sign() != r0.sign()) return rational::infinity(r0);
      else {
 ::std::cerr << "error: " << r0 << " - " << r1 << " not defined"
      << ::std::endl;
 abort();
      }
    }
    else {
      return rational::infinity(r1.sign() * -1);
    }
  }
  else if (r0.infinite()) {
    return rational::infinity(r0);
  }
  else if ((r0.divisor() == 1) && (r1.divisor() == 1)) {
    return rational(r0.numerator() - r1.numerator(), 1);
  }
  else {
    long c = gcd(r0.divisor(), r1.divisor());
    long n = (r0.numerator() * (r1.divisor() / c) -
       r1.numerator() * (r0.divisor() / c));
    long d = ((r0.divisor() / c) * r1.divisor());
    return rational(n, d).reduce();
  }
}
inline rational operator*(const rational r0, const rational r1)
{
  if (r0.infinite()) {
    return rational::infinity(r0.sign() * r1.sign());
  }
  else if (r1.infinite()) {
    return rational::infinity(r0.sign() * r1.sign());
  }
  else if ((r0.divisor() == 1) && (r1.divisor() == 1)) {
    return rational(r0.numerator() * r1.numerator(), 1);
  }
  else {
    long c0 = gcd(r0.numerator(), r1.divisor());
    long c1 = gcd(r1.numerator(), r0.divisor());
    return rational((r0.numerator() / c0) * (r1.numerator() / c1),
      (r0.divisor() / c1) * (r1.divisor() / c0)).reduce();
  }
}
inline rational operator/(const rational r0, const rational r1)
{
  return (r0 * r1.invert());
}
inline rational operator+(const rational r0, long n1)
{
  return rational(r0.numerator() + (n1 * r0.divisor()), r0.divisor()).reduce();
}
inline rational operator-(const rational r0, long n1)
{
  return rational(r0.numerator() - (n1 * r0.divisor()), r0.divisor()).reduce();
}
inline rational operator*(const rational r0, long n1)
{
  return rational(r0.numerator() * n1, r0.divisor()).reduce();
}
inline rational operator/(const rational r0, long n1)
{
  return rational((n1 < 0 ? r0.numerator() * -1 : r0.numerator()),
    r0.divisor() * (n1 < 0 ? n1 * -1 : n1)).reduce();
}
inline rational operator+(long n0, const rational r1)
{
  return rational(r1.numerator() + (n0 * r1.divisor()), r1.divisor()).reduce();
}
inline rational operator-(long n0, const rational r1)
{
  return rational((n0 * r1.divisor()) - r1.numerator(), r1.divisor()).reduce();
}
inline rational operator*(long n0, const rational r1)
{
  return rational(r1.numerator() * n0, r1.divisor()).reduce();
}
inline rational operator/(long n0, const rational r1)
{
  return (n0 * r1.invert());
}
inline rational safeadd(const rational r0, const rational r1)
{
  if (r1.infinite()) {
    if (r0.infinite()) {
      if (r1.sign() == r0.sign()) return rational::infinity(r0);
      else {
 ::std::cerr << "error: " << r0 << " + " << r1 << " not defined"
      << ::std::endl;
 abort();
      }
    }
    else {
      return rational::infinity(r1);
    }
  }
  else if (r0.infinite()) {
    return rational::infinity(r0);
  }
  else {
    long c = gcd(r0.divisor(), r1.divisor());
    long n0 = r0.numerator();
    long d0 = r0.divisor() / c;
    long n1 = r1.numerator();
    long d1 = r1.divisor() / c;
    assert(d0 > 0);
    assert(d1 > 0);
    while (((LONG_MAX / (2*d1)) < (imag(n0) + 1)) ||
    ((LONG_MAX / (2*d0)) < (imag(n1) + 1)) ||
    ((LONG_MAX / (d0 * c)) < (d1 + 1))) {
      if ((d1 < 2) && (d0 < 2)) {
 std::cerr << "error: overflow in safeadd(" << r0 << ", " << r1 << ")"
    << std::endl;
 abort();
      }
      if (d0 < 2) {
 n1 = (n1 / 2);
 d1 = (d1 / 2);
      }
      else if (d1 < 2) {
 n0 = (n0 / 2);
 d0 = (d0 / 2);
      }
      else if ((imag(n0) - d0) > (imag(n1) - d1)) {
 n0 = (n0 / 2);
 d0 = (d0 / 2);
      }
      else {
 n1 = (n1 / 2);
 d1 = (d1 / 2);
      }
    }
    long f0 = n0 * d1;
    long f1 = n1 * d0;
    long n = f0 + f1;
    long d = d0 * d1 * c;
    return rational(n, d).reduce();
  }
}
inline rational safemul(const rational r0, const rational r1)
{
  if (r0.infinite() || r1.infinite()) {
    return rational::infinity(r0.sign() * r1.sign());
  }
  else {
    long c0 = gcd(r0.numerator(), r1.divisor());
    long c1 = gcd(r1.numerator(), r0.divisor());
    long n0 = r0.numerator() / c0;
    long n1 = r1.numerator() / c1;
    long d0 = r0.divisor() / c1;
    long d1 = r1.divisor() / c0;
    while (((LONG_MAX / imag(n0)) < (imag(n1) + 1)) ||
    ((LONG_MAX / d0) < (d1 + 1))) {
      if ((d1 < 2) && (d0 < 2)) {
 std::cerr << "error: overflow in safeadd(" << r0 << ", " << r1 << ")"
    << std::endl;
 abort();
      }
      if (d0 < 2) {
 n1 = (n1 / 2);
 d1 = (d1 / 2);
      }
      else if (d1 < 2) {
 n0 = (n0 / 2);
 d0 = (d0 / 2);
      }
      else if ((imag(n0) - d0) > (imag(n1) - d1)) {
 n0 = (n0 / 2);
 d0 = (d0 / 2);
      }
      else {
 n1 = (n1 / 2);
 d1 = (d1 / 2);
      }
    }
    return rational(n0 * n1, d0 * d1).reduce();
  }
}
inline ::std::ostream& operator<<(::std::ostream& s, const rational r)
{
  if (r.infinite()) {
    if (r.sign() < 0) return s << "-INF";
    else return s << "INF";
  }
  else if (r.integral()) {
    return s << r.numerator();
  }
  else {
    return s << r.numerator() << '/' << r.divisor();
  }
}
}
namespace hsps {
class RNG {
 public:
  virtual ~RNG() { };
  virtual void seed(unsigned long s) = 0;
  virtual unsigned long seed_value() = 0;
  virtual unsigned long random() = 0;
  void seed_with_pid();
  void seed_with_time();
  unsigned long random_in_range(unsigned long range);
  unsigned long random_in_range(unsigned long range, unsigned long except);
  double random_double(unsigned long div);
  double normal_sample(double mean, double var);
  unsigned long binomial_sample(unsigned long n, double p);
  index_type select_one_of(const bool_vec& sel);
  index_type select_one_of(const index_vec& sel);
  void select_fixed_set(index_set& s, index_type m, index_type n);
  void select_variable_set(index_set& s, index_type m, index_type n);
  void select_non_empty_variable_set(index_set& s, index_type m, index_type n);
  virtual unsigned long max() = 0;
};
class LC_RNG : public RNG {
  unsigned long a;
  unsigned long b;
  unsigned long mod;
  unsigned long x;
 public:
  LC_RNG()
    : a(23), b(0), mod(100000001), x(100000001 - 1) { };
  LC_RNG(unsigned long _a, unsigned long _b, unsigned long m)
    : a(_a), b(_b), mod(m), x(m - 1) { };
  LC_RNG(unsigned long s)
    : a(23), b(0), mod(100000001), x(s) { };
  LC_RNG(unsigned long _a, unsigned long _b, unsigned long m, unsigned long s)
    : a(_a), b(_b), mod(m), x(s) { };
  virtual ~LC_RNG() { };
  virtual void seed(unsigned long s);
  virtual unsigned long seed_value();
  virtual unsigned long random();
  virtual unsigned long max();
};
}
#include <iostream>
#include <iomanip>
const hsps::rational POS_INF(1,0);
const hsps::rational NEG_INF(-1,0);
const hsps::rational ZERO(0,1);
namespace hsps {
inline hsps::rational random_numeric
(hsps::rational min, hsps::rational max, unsigned long prec, RNG& rng)
{
  hsps::rational d = (max - min);
  hsps::rational s = (d / prec);
  unsigned long r = rng.random_in_range(prec + 1);
  return ((r*s) + min);
}
class amt_vec : public auto_expanding_vector<hsps::rational> {
 public:
  amt_vec()
    : auto_expanding_vector<hsps::rational>() { };
  amt_vec(const hsps::rational& v, index_type l)
    : auto_expanding_vector<hsps::rational>(v, l) { };
  amt_vec(const amt_vec& vec)
    : auto_expanding_vector<hsps::rational>(vec) { };
  int compare(const amt_vec& vec, index_type n);
  int dcompare(const amt_vec& vec, index_type n);
  index_type hash(index_type n);
  void write(std::ostream& s, index_type n);
};
inline int amt_vec::compare(const amt_vec& vec, index_type n)
{
  for (index_type k = 0; k < n; k++) {
    if ((*this)[k] < vec[k]) return -1;
    else if ((*this)[k] > vec[k]) return 1;
  }
  return 0;
}
inline int amt_vec::dcompare(const amt_vec& vec, index_type n)
{
  bool this_less_than_vec = false;
  bool vec_less_than_this = false;
  for (index_type k = 0; k < n; k++) {
    if ((*this)[k] < vec[k]) this_less_than_vec = true;
    else if ((*this)[k] > vec[k]) vec_less_than_this = true;
  }
  if (this_less_than_vec && !vec_less_than_this) return -1;
  else if (!this_less_than_vec && vec_less_than_this) return 1;
  else return 0;
}
inline index_type amt_vec::hash(index_type n)
{
  if (n == 0) return 0;
  if (n == 1) return ((index_type)(((*this)[0]).numerator() - ((*this)[0]).divisor()));
  index_type h = 0;
  for (index_type k = 0; k < n - 1; k++) {
    h += ((index_type)(((((*this)[k]) + 1) * (((*this)[k + 1]) + 1)).numerator() - ((((*this)[k]) + 1) * (((*this)[k + 1]) + 1)).divisor()));
  }
  return h;
}
inline void amt_vec::write(std::ostream& s, index_type n)
{
  s << '[';
  for (index_type k = 0; k < n; k++) {
    if (k > 0) s << ',';
    s << std::resetiosflags(std::ios::scientific) << (((*this)[k]).decimal());
  }
  s << ']';
}
typedef lvector<hsps::rational> cost_vec;
typedef svector<hsps::rational> cost_set;
typedef matrix<hsps::rational> cost_matrix;
class cost_vec_util : public cost_vec
{
 public:
  class decreasing_cost_order : public cost_vec::order {
  public:
    virtual bool operator()
      (const hsps::rational& v0, const hsps::rational& v1) const
      { return (v0 > v1); };
  };
  class increasing_cost_order : public cost_vec::order {
  public:
    virtual bool operator()
      (const hsps::rational& v0, const hsps::rational& v1) const
      { return (v0 < v1); };
  };
  static class decreasing_cost_order decreasing;
  static class increasing_cost_order increasing;
  static hsps::rational max(const cost_vec& v);
  static hsps::rational min(const cost_vec& v);
  hsps::rational max() const { return max(*this); };
  hsps::rational min() const { return min(*this); };
};
struct interval : public comparable_pair<hsps::rational> {
  interval(const hsps::rational& v1, const hsps::rational& v2) :
    comparable_pair<hsps::rational>(v1, v2) { };
  interval(const hsps::rational& v) :
    comparable_pair<hsps::rational>(v) { };
  interval(const interval& p) :
    comparable_pair<hsps::rational>(p) { };
  interval() :
    comparable_pair<hsps::rational>(NEG_INF, POS_INF) { };
};
typedef std::pair<index_type, hsps::rational> index_cost_pair;
typedef lvector<index_cost_pair> index_cost_vec;
inline std::ostream& operator<<(std::ostream& s, const index_cost_pair& p)
{
  s << '(' << p.first << ',' << p.second << ')';
}
inline std::ostream& operator<<(std::ostream& s, const interval& i)
{
  s << '[' << i.first << ',' << i.second << ']';
}
}
#include <string>
#include <iostream>
namespace hsps {
class Name {
 public:
  static const unsigned int NC_DEFAULT = 0;
  static const unsigned int NC_INSTANCE = 1;
  static const unsigned int NC_DOMAIN = 2;
  static const unsigned int NC_PROBLEM = 4;
  static const unsigned int NC_PLAN = 8;
  static const unsigned int NC_ESCAPE = 16 + 32;
  static const unsigned int NC_PDDL = 16;
  static const unsigned int NC_XML = 32;
  static const unsigned int NC_LATEX = 16 + 32;
  static const unsigned int NC_IPC = 64;
  static bool context_is_instance(unsigned int c)
    { return ((c & NC_INSTANCE) == NC_INSTANCE); };
  static bool context_is_domain(unsigned int c)
    { return ((c & NC_DOMAIN) == NC_DOMAIN); };
  static bool context_is_problem(unsigned int c)
    { return ((c & NC_PROBLEM) == NC_PROBLEM); };
  static bool context_is_plan(unsigned int c)
    { return ((c & NC_PLAN) == NC_PLAN); };
  static bool escape_for_pddl(unsigned int c)
    { return ((c & NC_ESCAPE) == NC_PDDL); };
  static bool escape_for_xml(unsigned int c)
    { return ((c & NC_ESCAPE) == NC_XML); };
  static bool escape_for_latex(unsigned int c)
    { return ((c & NC_ESCAPE) == NC_LATEX); };
  static bool conform_to_IPC(unsigned int c)
    { return ((c & NC_IPC) == NC_IPC); };
  virtual ~Name();
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const = 0;
  virtual const Name* cast_to(const char* cname) const;
  ::std::string to_string(unsigned int c = NC_DEFAULT) const;
  char* to_cstring(unsigned int c = NC_DEFAULT) const;
  bool equals(const Name* name) const;
  void write_char_escaped(::std::ostream& s,
     char ch,
     unsigned int c) const;
  void write_string_escaped(::std::ostream& s,
       ::std::string& str,
       unsigned int c) const;
  void write_string_escaped(::std::ostream& s,
       const char* str,
       unsigned int c) const;
};
typedef lvector<const Name*> name_vec;
inline ::std::ostream& operator<<(::std::ostream& s, const Name& n) {
  n.write(s, false);
  return s;
}
inline ::std::ostream& operator<<(::std::ostream& s, const Name* n) {
  n->write(s, false);
  return s;
}
inline void Name::write_char_escaped
(::std::ostream& s, char ch, unsigned int c) const
{
  if (escape_for_latex(c)) {
    if (ch == '_') s << '\\' << '_';
    else if (ch == '%') s << '\\' << '%';
    else if (ch == '#') s << '\\' << '#';
    else s << ch;
  }
  else if (escape_for_xml(c)) {
    if (ch == '<') s << "&lt;";
    else if (ch == '>') s << "&gt;";
    else if (ch == '&') s << "&amp;";
    else if (ch == '"') s << "&quot;";
    else s << ch;
  }
  else if (escape_for_pddl(c)) {
    if (ch == ' ') s << '_';
    else s << ch;
  }
  else {
    s << ch;
  }
}
inline void Name::write_string_escaped
(::std::ostream& s, const char* str, unsigned int c) const
{
  while (*str) {
    write_char_escaped(s, *str, c);
    str++;
  }
}
inline void Name::write_string_escaped
(::std::ostream& s, ::std::string& str, unsigned int c) const
{
  for (index_type i = 0; i < str.length(); i++)
    write_char_escaped(s, str[i], c);
}
class NameWithContext : public Name {
  const Name* name;
  unsigned int c_on;
  unsigned int c_off;
 public:
  NameWithContext(const Name* n, unsigned int on, unsigned int off)
    : name(n), c_on(on), c_off(off) { };
  virtual ~NameWithContext() { };
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const;
};
class StringName : public Name {
  const char* _string;
  bool _own;
 public:
  StringName(const char* s, bool c = false)
    : _string(c ? strdup(s) : s), _own(c) { };
  virtual ~StringName() { if (_own) delete (char*)_string; };
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const;
};
class ConcatenatedName : public Name {
  name_vec elements;
  char catc;
 public:
  ConcatenatedName() : elements((Name*)0, 0), catc('+') { };
  ConcatenatedName(const Name* n) : elements(n, 1), catc('+') { };
  ConcatenatedName(char c) : elements((Name*)0, 0), catc(c) { };
  ConcatenatedName(const Name* n1, const Name* n2, char c)
    : elements((Name*)0, 0), catc(c)
  {
    elements.append(n1);
    elements.append(n2);
  };
  virtual ~ConcatenatedName() { };
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const;
  void append(const Name* n) { elements.append(n); };
};
class ModName : public Name {
  const char* _mod;
  const Name* _name;
 public:
  ModName(const Name* n, const char* m) : _mod(m), _name(n) { };
  virtual ~ModName() { };
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const;
};
class CopyName : public Name {
  const Name* _name;
  index_type _num;
 public:
  CopyName(const Name* n) : _name(n), _num(no_such_index) { };
  CopyName(const Name* n, index_type m) : _name(n), _num(m) { };
  virtual ~CopyName() { };
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const;
};
class NameAtIndex : public Name {
  const Name* _name;
  index_type _index;
 public:
  NameAtIndex(const Name* n, index_type i) : _name(n), _index(i) { };
  virtual ~NameAtIndex() { };
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const;
};
class EnumName : public Name {
  const char* prefix;
  index_type index;
 public:
  EnumName(const char* p, index_type i) : prefix(p), index(i) { };
  virtual ~EnumName() { };
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const;
};
}
#include <map>
#include <iostream>
namespace hsps {
class graph {
 private:
  index_type _size;
  bool_matrix adj;
  index_set_vec in;
  index_set_vec out;
  index_set_vec bi;
  index_vec comp;
  index_type n_comp;
 public:
  graph();
  graph(index_type s);
  graph(const graph& g);
  graph(const graph& g, const index_set& n);
  graph(const graph& g, const equivalence& eq);
  ~graph();
  index_type size() const { return _size; };
  bool adjacent(index_type i, index_type j) const { return adj[i][j]; };
  bool adjacent(index_type i, const index_set& n) const;
  bool adjacent(const index_set& n, index_type i) const;
  bool adjacent(const index_set& n0, const index_set& n1) const;
  bool bi_adjacent(index_type i, index_type j) const
    { return (adj[i][j] && adj[j][i]); };
  bool bi_adjacent(index_type i, const index_set& n) const;
  index_type n_edges() const;
  index_type n_edges(const index_set& from, const index_set& to) const;
  pair_set& edges(pair_set& s) const;
  index_type n_induced_undirected_edges() const;
  index_type n_induced_undirected_edges(const index_set& n0,
     const index_set& n1) const;
  index_type n_bidirectional_edges() const;
  index_type n_bidirectional_edges(const index_set& n0,
       const index_set& n1) const;
  const index_set& successors(index_type i) const { return out[i]; };
  index_type out_degree(index_type i) const { return out[i].length(); };
  const index_set& predecessors(index_type i) const { return in[i]; };
  index_type in_degree(index_type i) const { return in[i].length(); };
  const index_set& bidirectional(index_type i) const { return bi[i]; };
  index_type bi_degree(index_type i) const { return bi[i].length(); };
  pair_set& bidirectional_edges(pair_set& s) const;
  void descendants(index_type n0, bool_vec& s) const;
  void descendants(const index_set& s0, bool_vec& s) const;
  void descendants(index_type n0, index_set& s) const;
  void descendants(const index_set& s0, index_set& s) const;
  void ancestors(index_type n0, bool_vec& s) const;
  void ancestors(const index_set& s0, bool_vec& s) const;
  void ancestors(index_type n0, index_set& s) const;
  void ancestors(const index_set& s0, index_set& s) const;
  index_type max_out_degree() const;
  index_type max_in_degree() const;
  index_type max_bi_degree() const;
  index_type min_out_degree() const;
  index_type min_in_degree() const;
  index_type min_bi_degree() const;
  bool empty() const;
  bool connected() const;
  bool strongly_connected() const;
  bool reachable(index_type n0, index_type n1) const;
  void reachable(bool_vec& v) const;
  index_type count_reachable(index_type n0) const;
  bool acyclic() const;
  bool top_sort(index_vec& s) const;
  index_type first_root() const;
  index_type first_leaf() const;
  void fringe(const index_set& n, index_set& fn) const;
  void bi_fringe(const index_set& n, index_set& fn) const;
  void distance(index_type s0, index_vec& d) const;
  void distance(const index_set& s0, index_vec& d) const;
  index_type distance(index_type s0, index_type s1) const;
  void strongly_connected_components();
  index_type component(index_type i) const { return comp[i]; };
  index_type n_components() const { return n_comp; };
  index_type component_node(index_type i) const;
  index_type component_size(index_type i) const;
  void component_node_set(index_type i, index_set& set) const;
  graph& component_tree(graph& cg) const;
  equivalence& component_partitioning(equivalence& eq) const;
  index_type maximal_non_unit_component() const;
  graph& subgraph(graph& g, const index_set& n) const;
  graph& edge_subgraph(graph& g, const index_set& nodes) const;
  equivalence& induced_partitioning(equivalence& eq) const;
  graph& induced_undirected_graph(graph& g) const;
  graph& minimal_equivalent_digraph(graph& g) const;
  graph& minimal_distance_graph(graph& g, const index_set& s0) const;
  graph& quotient(graph& g, const equivalence& eq) const;
  bool equals(const graph& g) const;
  bool equals(const graph& g, const index_vec& c) const;
  void difference(const graph& g,
    const index_vec& c,
    pair_set& d0,
    pair_set& d1) const;
  void difference(const graph& g,
    pair_set& d0,
    pair_set& d1) const;
  index_type cardinality_of_difference(const graph& g) const;
  void init(index_type s);
  void copy(const graph& g);
  void copy(const graph& g, const index_vec& map);
  void copy_and_rename(const graph& g, const index_vec& map);
  index_type add_node();
  void remove_node(index_type n);
  void add_graph(const graph& g, mapping& m);
  void add_edge(index_type src, index_type dst);
  void add_edge(const index_set& srcs, index_type dst);
  void add_edge(index_type src, const index_set& dsts);
  void add_edge_to_transitive_closure(index_type src,
          index_type dst,
          pair_set& e);
  void remove_edge(index_type src, index_type dst);
  void remove_edges_from(index_type src);
  void remove_edges_to(index_type dst);
  void remove_edges_incident_on(index_type n);
  void remove_edges(const pair_set& e);
  void add_undirected_edge(index_type n0, index_type n1);
  void remove_undirected_edge(index_type n0, index_type n1);
  void remove_undirected_edges(const pair_set& e);
  void clear_edges();
  void recalculate();
  void complement();
  void complement_with_loops();
  void remove_loops();
  void reverse();
  void transitive_closure();
  void missing_transitive_edges(pair_set& e) const;
  void transitive_reduction();
  void intersect(const graph& g);
  void randomize(count_type n, RNG& rnd);
  void randomize_connected(count_type n, RNG& rnd);
  void randomize_strongly_connected(count_type n, RNG& rnd);
  void random_digraph(count_type n, RNG& rnd);
  void random_connected_digraph(count_type n, RNG& rnd);
  void random_strongly_connected_digraph(count_type n, RNG& rnd);
  void random_digraph_with_density(rational density, RNG& rnd);
  void random_tree(RNG& rnd);
  void random_tree(index_type b, index_type d, RNG& rnd);
  bool is_clique(const index_set& nodes) const;
  bool is_independent(const index_set& nodes) const;
  bool is_independent_range(index_type l, index_type u) const;
  void maximal_clique(index_set& clique) const;
  void maximal_clique_including(index_type node, index_set& clique) const;
  void maximal_clique_cover(index_set_vec& sets) const;
  void all_maximal_cliques(index_set_vec& cliques) const;
  void all_maximal_cliques_including(index_type node, index_set_vec& cliques)
    const;
  void apx_independent_set(index_set& set) const;
  void apx_independent_set_including(index_type node, index_set& set) const;
  void apx_independent_set_cover(index_set_vec& sets) const;
  void apx_independent_set_disjoint_cover(index_set_vec& sets) const;
  void all_nondominated_cliques(index_set_vec &cliques) const;
  void all_cliques_geq(index_type k, index_set_vec& cliques) const;
  void write_node_set(::std::ostream& s) const;
  void write_edge_set(::std::ostream& s) const;
  void write_compact(::std::ostream& s) const;
  void write_undirected_edge_set(::std::ostream& s) const;
  void write_adjacency_lists(::std::ostream& s) const;
  void write_digraph(::std::ostream& s,
       bool with_node_indices,
       const char* name) const;
  void write_component_labeled_digraph(::std::ostream& s,
           const char* name) const;
  void write_graph_correspondance(::std::ostream& s,
      const graph& g,
      const index_vec& c,
      const char* name) const;
 public:
  void max_clique(index_set& sel,
    index_type next,
    index_set& clique) const;
  void all_max_cliques(index_set& sel,
         index_type next,
         index_set_vec& cliques) const;
  void all_nondominated_cliques_aux(index_set_vec &cliques,
                                    index_set &current_clique,
                                    const index_set &candidates,
        index_type min) const;
  void ramsey(const index_set& nodes, index_set& I, index_set& C) const;
  void apx_independent_set(const index_set& nodes, index_set& set) const;
  void undirected_dfs(index_type n, bool_vec& visited) const;
  void reachable(index_type n, bool_vec& v) const;
  void reverse_reachable(index_type n, bool_vec& v) const;
 private:
  void scc_first_dfs(index_type n, bool_vec& visited, index_vec& num) const;
  void scc_second_dfs(index_type n, bool_vec& visited, index_type c_id);
};
template<class LS>
void write_labeled_digraph
(std::ostream& s,
 const graph& g,
 const LS& ls,
 bool with_node_indices = false,
 const char* name = 0,
 index_type c_id = no_such_index)
{
  if (c_id != no_such_index) {
    s << "subgraph cluster" << c_id << "{" << std::endl;
  }
  else if (name) {
    s << "digraph \"" << name << "\" {" << ::std::endl;
  }
  s << "node [width=0,height=0];" << ::std::endl;
  for (index_type k = 0; k < g.size(); k++) {
    if (with_node_indices) {
      s << "\t" << k + (c_id == no_such_index ? 0 : c_id)
 << " [label=\"(" << k << ") " << ls[k] << "\"];"
 << ::std::endl;
    }
    else {
      s << "\t" << k + (c_id == no_such_index ? 0 : c_id)
 << " [label=\"" << ls[k] << "\"];"
 << ::std::endl;
    }
  }
  for (index_type i = 0; i < g.size(); i++)
    for (index_type j = 0; j < g.size(); j++)
      if (g.adjacent(i, j))
 s << "\t" << i + (c_id == no_such_index ? 0 : c_id)
   << " -> " << j + (c_id == no_such_index ? 0 : c_id)
   << ";" << ::std::endl;
  if ((c_id != no_such_index) || (name != 0)) {
    s << "}" << ::std::endl;
  }
}
typedef lvector<graph> graph_vec;
template<class N, class E> class labeled_graph : public graph {
 public:
  typedef std::map<index_type, N> node_label_map;
  typedef std::map<index_pair, E> edge_label_map;
  typedef lvector<N> node_label_vec;
  typedef lvector<E> edge_label_vec;
 protected:
  node_label_map _node_label;
  edge_label_map _edge_label;
 public:
  labeled_graph();
  labeled_graph(index_type size);
  labeled_graph(const graph& g);
  labeled_graph(const labeled_graph& g);
  labeled_graph(const graph& g, const index_set& nodes);
  labeled_graph(const labeled_graph& g, const index_set& nodes);
  labeled_graph(const graph& g, const equivalence& eq);
  ~labeled_graph();
  N& node_label(index_type n);
  E& edge_label(index_type i, index_type j);
  const N& node_label(index_type n) const;
  const E& edge_label(index_type i, index_type j) const;
  bool node_has_label(index_type n) const;
  bool edge_has_label(index_type i, index_type j) const;
  labeled_graph& subgraph(labeled_graph& g, const index_set& n) const;
  index_type node_with_label(const N& l) const;
  index_pair edge_with_label(const E& l) const;
  void init(index_type size);
  void init(index_type size, const N& n, const E& e);
  void copy(const graph& g);
  void copy(const labeled_graph& g);
  void add_graph(const graph& g, mapping& m);
  void add_graph(const labeled_graph& g, mapping& m);
  void add_edge(index_type src, index_type dst);
  void add_edge(index_type src, index_type dst, const E& lbl);
  void add_edge(const index_set& srcs, index_type dst);
  void add_edge(const index_set& srcs, index_type dst, const E& lbl);
  void add_edge(index_type src, const index_set& dsts);
  void add_edge(index_type src, const index_set& dsts, const E& lbl);
  index_type add_node();
  index_type add_node(const N& l);
  void remove_node(index_type n);
  void remove_edge(index_type src, index_type dst);
  void remove_edges_from(index_type src);
  void remove_edges_to(index_type dst);
  void remove_edges_incident_on(index_type n);
  void remove_undirected_edge(index_type n0, index_type n1);
  void remove_edges(const pair_set& e);
  void remove_undirected_edges(const pair_set& e);
  void clear_edges();
  void clear_node_labels();
  void clear_edge_labels();
  void remove_edges_with_label(const E& l);
  void write_digraph(::std::ostream& s,
       bool with_node_indices,
       bool with_node_labels,
       bool with_edge_labels,
       bool compact_edges,
       const char* name) const;
  void write_matrix(::std::ostream& s,
      const char* unlabeled_edge,
      const char* missing_edge) const;
};
template<class N, class E>
labeled_graph<N,E>::labeled_graph()
{
}
template<class N, class E>
labeled_graph<N,E>::labeled_graph(index_type s)
  : graph(s)
{
}
template<class N, class E>
labeled_graph<N,E>::labeled_graph(const graph& g)
  : graph(g)
{
}
template<class N, class E>
labeled_graph<N,E>::labeled_graph(const labeled_graph& g)
  : graph(g), _node_label(g._node_label), _edge_label(g._edge_label)
{
}
template<class N, class E>
labeled_graph<N,E>::labeled_graph(const graph& g, const index_set& n)
{
  g.subgraph(*this, n);
}
template<class N, class E>
labeled_graph<N,E>::labeled_graph
(const labeled_graph& g, const index_set& n)
{
  g.subgraph(*this, n);
}
template<class N, class E>
labeled_graph<N,E>::labeled_graph
(const graph& g, const equivalence& eq)
{
  g.quotient(*this, eq);
}
template<class N, class E>
labeled_graph<N,E>::~labeled_graph()
{
}
template<class N, class E>
N& labeled_graph<N,E>::node_label(index_type n)
{
  assert(n < size());
  return _node_label[n];
}
template<class N, class E>
E& labeled_graph<N,E>::edge_label(index_type i, index_type j)
{
  assert((i < size()) && (j < size()));
  return _edge_label[index_pair(i, j)];
}
template<class N, class E>
const N& labeled_graph<N,E>::node_label(index_type n) const
{
  assert(node_has_label(n));
  return (_node_label.find(n)->second);
}
template<class N, class E>
const E& labeled_graph<N,E>::edge_label(index_type i, index_type j) const
{
  assert(edge_has_label(i, j));
  return (_edge_label.find(index_pair(i, j))->second);
}
template<class N, class E>
bool labeled_graph<N,E>::node_has_label(index_type n) const
{
  assert(n < size());
  return (_node_label.find(n) != _node_label.end());
}
template<class N, class E>
bool labeled_graph<N,E>::edge_has_label(index_type i, index_type j) const
{
  assert((i < size()) && (j < size()));
  return (_edge_label.find(index_pair(i, j)) != _edge_label.end());
}
template<class N, class E>
void labeled_graph<N,E>::init(index_type s)
{
  graph::init(s);
  _node_label.clear();
  _edge_label.clear();
}
template<class N, class E>
void labeled_graph<N,E>::copy(const labeled_graph& g)
{
  graph::copy(g);
  _node_label = g._node_label;
  _edge_label = g._edge_label;
}
template<class N, class E>
labeled_graph<N,E>& labeled_graph<N,E>::subgraph
(labeled_graph& g, const index_set& n) const
{
  g.init(n.length());
  for (index_type k = 0; k < n.length(); k++) {
    assert(n[k] < size());
    if (node_has_label(n[k])) {
      g.node_label(k) = node_label(n[k]);
    }
  }
  for (index_type i = 0; i < n.length(); i++)
    for (index_type j = 0; j < n.length(); j++)
      if (adjacent(n[i], n[j])) {
 g.add_edge(i, j);
 if (edge_has_label(n[i], n[j])) {
   g.edge_label(i, j) = edge_label(n[i], n[j]);
 }
      }
}
template<class N, class E>
index_type labeled_graph<N,E>::node_with_label(const N& l) const
{
  for (index_type k = 0; k < size(); k++)
    if (node_has_label(k))
      if (node_label(k) == l)
 return k;
  return no_such_index;
}
template<class N, class E>
index_pair labeled_graph<N,E>::edge_with_label(const E& l) const
{
  for (index_type i = 0; i < size(); i++)
    for (index_type j = 0; j < size(); j++)
      if (adjacent(i, j) && edge_has_label(i, j))
 if (edge_label(i, j) == l)
   return index_pair(i, j);
  return no_such_index;
}
template<class N, class E>
void labeled_graph<N,E>::add_graph
(const graph& g, mapping& m)
{
  graph::add_graph(g, m);
}
template<class N, class E>
void labeled_graph<N,E>::add_graph
(const labeled_graph& g, mapping& m)
{
  graph::add_graph(g, m);
  for (index_type i = 0; i < g.size(); i++) {
    if (g.node_has_label(i))
      node_label(m[i]) = g.node_label(i);
    for (index_type j = 0; j < g.size(); j++)
      if (g.adjacent(i, j) && g.edge_has_label(i, j))
 edge_label(m[i], m[j]) = g.edge_label(i, j);
  }
}
template<class N, class E>
void labeled_graph<N,E>::add_edge
(index_type src, index_type dst)
{
  graph::add_edge(src, dst);
}
template<class N, class E>
void labeled_graph<N,E>::add_edge
(index_type src, index_type dst, const E& lbl)
{
  graph::add_edge(src, dst);
  edge_label(src, dst) = lbl;
}
template<class N, class E>
void labeled_graph<N,E>::add_edge
(const index_set& srcs, index_type dst)
{
  graph::add_edge(srcs, dst);
}
template<class N, class E>
void labeled_graph<N,E>::add_edge
(const index_set& srcs, index_type dst, const E& lbl)
{
  graph::add_edge(srcs, dst);
  for (index_type k = 0; k < srcs.length(); k++)
    edge_label(srcs[k], dst) = lbl;
}
template<class N, class E>
void labeled_graph<N,E>::add_edge
(index_type src, const index_set& dsts)
{
  graph::add_edge(src, dsts);
}
template<class N, class E>
void labeled_graph<N,E>::add_edge
(index_type src, const index_set& dsts, const E& lbl)
{
  graph::add_edge(src, dsts);
  for (index_type k = 0; k < dsts.length(); k++)
    edge_label(src, dsts[k]) = lbl;
}
template<class N, class E>
index_type labeled_graph<N,E>::add_node()
{
  return graph::add_node();
}
template<class N, class E>
index_type labeled_graph<N,E>::add_node(const N& l)
{
  index_type n = graph::add_node();
  node_label(n) = l;
  return n;
}
template<class N, class E>
void labeled_graph<N,E>::remove_node(index_type n)
{
  assert(n < size());
  labeled_graph g(*this);
  index_set ns;
  ns.fill(size());
  ns.subtract(n);
  g.subgraph(*this, ns);
}
template<class N, class E>
void labeled_graph<N,E>::remove_edge(index_type src, index_type dst)
{
  _edge_label.erase(index_pair(src, dst));
  graph::remove_edge(src, dst);
}
template<class N, class E>
void labeled_graph<N,E>::remove_undirected_edge(index_type n0, index_type n1)
{
  _edge_label.erase(index_pair(n0, n1));
  _edge_label.erase(index_pair(n1, n0));
  graph::remove_undirected_edge(n0, n1);
}
template<class N, class E>
void labeled_graph<N,E>::remove_edges_from(index_type src)
{
  index_set ns(successors(src));
  for (index_type k = 0; k < ns.length(); k++)
    remove_edge(src, ns[k]);
}
template<class N, class E>
void labeled_graph<N,E>::remove_edges_to(index_type dst)
{
  index_set ns(predecessors(dst));
  for (index_type k = 0; k < ns.length(); k++)
    remove_edge(ns[k], dst);
}
template<class N, class E>
void labeled_graph<N,E>::remove_edges_incident_on(index_type n)
{
  remove_edges_from(n);
  remove_edges_to(n);
}
template<class N, class E>
void labeled_graph<N,E>::remove_edges(const pair_set& e)
{
  for (index_type k = 0; k < e.length(); k++) {
    remove_edge(e[k].first, e[k].second);
  }
}
template<class N, class E>
void labeled_graph<N,E>::remove_undirected_edges(const pair_set& e)
{
  for (index_type k = 0; k < e.length(); k++) {
    remove_undirected_edge(e[k].first, e[k].second);
  }
}
template<class N, class E>
void labeled_graph<N,E>::clear_edges()
{
  _edge_label.clear();
  graph::clear_edges();
}
template<class N, class E>
void labeled_graph<N,E>::clear_node_labels()
{
  _node_label.clear();
}
template<class N, class E>
void labeled_graph<N,E>::clear_edge_labels()
{
  _edge_label.clear();
}
template<class N, class E>
void labeled_graph<N,E>::remove_edges_with_label(const E& l)
{
  for (index_type i = 0; i < size(); i++)
    for (index_type j = 0; j < size(); j++)
      if (adjacent(i, j) && (edge_label(i, j) == l))
 remove_edge(i, j);
}
template<class N, class E>
void labeled_graph<N,E>::write_digraph
(::std::ostream& s,
 bool with_node_indices,
 bool with_node_labels,
 bool with_edge_labels,
 bool compact_edges,
 const char* name) const
{
  if (strncmp(name, "cluster", 7) == 0)
    s << "subgraph";
  else
    s << "digraph";
  s << " \"" << name << "\"" << ::std::endl << "{" << ::std::endl;
  if (with_node_indices || with_node_labels) {
    s << "\tnode [shape=ellipse];" << ::std::endl;
  }
  else {
    s << "\tnode [shape=point];" << ::std::endl;
  }
  for (index_type i = 0; i < size(); i++) {
    s << "\t" << i;
    if (with_node_indices || with_node_labels) {
      s << " [label=\"";
      if (with_node_indices) {
 if (with_node_labels) {
   s << i << ": ";
   if (node_has_label(i)) {
     s << node_label(i);
   }
 }
 else {
   s << i;
 }
      }
      else {
 if (node_has_label(i)) {
   s << node_label(i);
 }
      }
      s << "\"]";
    }
    s << ";" << std::endl;
  }
  for (index_type i = 0; i < size(); i++)
    for (index_type j = 0; j < size(); j++)
      if (adjacent(i, j)) {
 if (adjacent(j, i) && compact_edges) {
   if (i < j) {
     s << "\t" << i << " -> " << j;
     s << " [dir=both";
     if (with_edge_labels &&
  (edge_has_label(i, j) || edge_has_label(j, i))) {
       if (!edge_has_label(i, j)) {
  s << ",label=\"" << edge_label(j, i) << "\"";
       }
       else if (!edge_has_label(j, i)) {
  s << ",label=\"" << edge_label(i, j) << "\"";
       }
       else if (edge_label(i, j) == edge_label(j, i)) {
  s << ",label=\"" << edge_label(i, j) << "\"";
       }
       else {
  s << ",label=\"" << edge_label(i, j) << ", "
    << edge_label(j, i) << "\"";
       }
     }
     s << "]" << ::std::endl;
   }
 }
 else {
   s << "\t" << i << " -> " << j;
   if (with_edge_labels && edge_has_label(i, j)) {
     s << " [label=\"" << edge_label(i, j) << "\"]";
   }
   s << ";" << ::std::endl;
 }
      }
  s << "}" << ::std::endl;
}
template<class N, class E>
void labeled_graph<N,E>::write_matrix
(::std::ostream& s, const char* unlabeled_edge, const char* missing_edge) const
{
  s << '[';
  for (index_type i = 0; i < size(); i++) {
    if (i > 0) s << ' ';
    s << '[';
    for (index_type j = 0; j < size(); j++) {
      if (j > 0) s << ',';
      if (adjacent(i, j)) {
 if (edge_has_label(i, j)) {
   s << edge_label(i, j);
 }
 else {
   s << unlabeled_edge;
 }
      }
      else {
 s << missing_edge;
      }
    }
    s << ']';
    if (i + 1 < size()) {
      s << ',' << '\n';
    }
    else {
      s << ']' << '\n';
    }
  }
}
class index_graph : public labeled_graph<index_type,index_type> {
  static const index_type NODE_SHAPE = 2 + 4 + 8 + 16;
  static const index_type NODE_STYLE = 64 + 128 + 256;
  static const index_type EDGE_STYLE = 64 + 128;
  static const index_type EDGE_DIR = 512 + 1024;
 public:
  static const index_type NS_CIRCLE = 0;
  static const index_type NS_ELLIPSE = 2;
  static const index_type NS_BOX = 4;
  static const index_type NS_POINT = 6;
  static const index_type NS_DIAMOND = 8;
  static const index_type NS_HEXAGON = 10;
  static const index_type NS_OCTAGON = 12;
  static const index_type NS_PLAINTEXT = 14;
  static const index_type NS_NORMAL = 0;
  static const index_type NS_DOUBLE = 32;
  static const index_type NS_BOLD = 64;
  static const index_type NS_DASHED = 128;
  static const index_type NS_DOTTED = 192;
  static const index_type NS_FILLED = 256;
  static const index_type ED_NONE = 0;
  static const index_type ED_FORWARD = 512;
  static const index_type ED_BACK = 1024;
  static const index_type ED_BOTH = ED_FORWARD + ED_BACK;
  static const index_type ES_NORMAL = NS_NORMAL;
  static const index_type ES_BOLD = NS_BOLD;
  static const index_type ES_DASHED = NS_DASHED;
  static const index_type ES_DOTTED = NS_DOTTED;
  static const index_type STYLE_MAX = 2048;
  index_graph()
    : labeled_graph<index_type, index_type>() { };
  index_graph(index_type size)
    : labeled_graph<index_type, index_type>(size) { };
  index_graph(const graph& g)
    : labeled_graph<index_type, index_type>(g) { };
  index_graph(const index_graph& g)
    : labeled_graph<index_type, index_type>(g) { };
  index_graph(const graph& g, const index_set& nodes)
    : labeled_graph<index_type, index_type>(g, nodes) { };
  index_graph(const index_graph& g, const index_set& nodes)
    : labeled_graph<index_type, index_type>(g, nodes) { };
  index_graph(const graph& g, const equivalence& eq)
    : labeled_graph<index_type, index_type>(g, eq) { };
  ~index_graph() { };
  void reverse();
  void reflect();
  static void write_node_style(std::ostream& s, index_type l);
  static void write_edge_style(std::ostream& s, index_type l);
  void write_styled_digraph(std::ostream& s,
       bool with_node_indices = false,
       const char* name = 0,
       index_type c_id = no_such_index) const;
  void write_matrix(std::ostream& s) const;
  void write_MATLAB(std::ostream& s,
      const char* n,
      const char* t) const;
};
template<class LS>
void write_styled_digraph
(std::ostream& s,
 const index_graph& g,
 const LS& ls,
 bool with_node_indices = false,
 const char* name = 0,
 index_type c_id = no_such_index)
{
  if (c_id != no_such_index) {
    s << "subgraph cluster" << c_id << " {" << std::endl;
    s << "node [width=0.5,height=0.5];" << ::std::endl;
  }
  else if (name) {
    s << "digraph \"" << name << "\" {" << std::endl;
    s << "node [width=0.5,height=0.5];" << ::std::endl;
  }
  for (index_type k = 0; k < g.size(); k++) {
    s << "\t" << k + (c_id != no_such_index ? c_id : 0) << " [";
    index_graph::write_node_style(s, g.node_has_label(k) ? g.node_label(k) : 0);
    if (with_node_indices)
      s << ",label=\"(" << k << ") " << ls[k] << "\"];" << std::endl;
    else
      s << ",label=\"" << ls[k] << "\"];" << std::endl;
  }
  for (index_type i = 0; i < g.size(); i++)
    for (index_type j = 0; j < g.size(); j++)
      if (g.adjacent(i, j)) {
 s << "\t" << i + (c_id != no_such_index ? c_id : 0)
   << " -> " << j + (c_id != no_such_index ? c_id : 0) << " [";
 index_graph::write_edge_style(s, g.edge_has_label(i, j) ? g.edge_label(i, j) : 0);
 s << "];" << std::endl;
      }
  if ((c_id != no_such_index) || (name != 0)) {
    s << "}" << ::std::endl;
  }
}
class weighted_graph : public labeled_graph<hsps::rational,hsps::rational> {
 public:
  weighted_graph() { };
  weighted_graph(index_type s)
    : labeled_graph<hsps::rational,hsps::rational>(s) { };
  weighted_graph(const graph& g)
    : labeled_graph<hsps::rational,hsps::rational>(g) { };
  weighted_graph(const weighted_graph& g)
    : labeled_graph<hsps::rational,hsps::rational>(g) { };
  weighted_graph(const graph& g, const index_set& n)
    : labeled_graph<hsps::rational,hsps::rational>(g, n) { };
  weighted_graph(const weighted_graph& g, const index_set& n)
    : labeled_graph<hsps::rational,hsps::rational>(g, n) { };
  weighted_graph(const graph& g, const equivalence& eq)
    : labeled_graph<hsps::rational,hsps::rational>(g, eq) { };
  weighted_graph(const weighted_graph& g, const equivalence& eq);
  ~weighted_graph() { };
  weighted_graph& quotient(weighted_graph& g, const equivalence& eq) const;
  hsps::rational apx_weighted_independent_set_1(index_set& set) const;
  hsps::rational apx_weighted_independent_set_2(index_set& set) const;
  hsps::rational apx_weighted_independent_set(index_set& set) const;
  void add_edge(index_type src, index_type dst);
  void add_edge(index_type src, index_type dst, hsps::rational w);
  void add_undirected_edge(index_type n0, index_type n1);
  void add_undirected_edge(index_type n0, index_type n1, hsps::rational w);
  hsps::rational weight(index_type n) const;
  hsps::rational weight(index_type n0, index_type n1) const;
  hsps::rational weight(const index_set& ns) const;
  void set_weight(index_type n, hsps::rational w);
  void set_weight(index_type n0, index_type n1, hsps::rational w);
  void increment_edge_weight(index_type src, index_type dst, hsps::rational w);
  hsps::rational max_node_weight() const;
  void transitive_closure();
  hsps::rational critical_path(cost_vec& s);
  hsps::rational max_flow(index_type s, index_type t);
  hsps::rational max_flow(index_type s, index_type t, weighted_graph& rg);
  hsps::rational max_flow(index_type s, index_type t, cost_matrix& f);
  hsps::rational min_cut(index_type s, index_type t, bool_vec& s_set);
  hsps::rational min_cut(index_type s, index_type t, pair_set& e_set);
  index_pair max_weight_edge() const;
  void min_and_max_edges(const index_set& nodes,
    pair_set& e_min, hsps::rational& w_min,
    pair_set& e_max, hsps::rational& w_max) const;
  hsps::rational maximal_matching(weighted_graph& matching);
  hsps::rational apx_matching(bool_vec& nodes);
  void write_node_set(::std::ostream& s) const;
  void write_edge_set(::std::ostream& s) const;
  void write_compact(::std::ostream& s) const;
  void write_matrix(::std::ostream& s) const;
 private:
  hsps::rational augmenting_path(index_type s, index_type t, const cost_matrix& f,
   pair_vec& p);
};
class index_set_graph : public labeled_graph<index_set,index_set> {
 public:
  index_set_graph() { };
  index_set_graph(index_type s)
    : labeled_graph<index_set,index_set>(s) { };
  index_set_graph(const graph& g)
    : labeled_graph<index_set,index_set>(g) { };
  index_set_graph(const index_set_graph& g)
    : labeled_graph<index_set,index_set>(g) { };
  index_set_graph(const graph& g, const index_set& n)
    : labeled_graph<index_set,index_set>(g, n) { };
  index_set_graph(const index_set_graph& g, const index_set& n)
    : labeled_graph<index_set,index_set>(g, n) { };
  index_set_graph(const graph& g, const equivalence& eq);
  index_set_graph(const index_set_graph& g, const equivalence& eq);
  ~index_set_graph() { };
  void union_reachable();
  void merge_labels(const index_set& ns);
  void merge_labels_upwards();
  void merge_labels_downwards();
  index_set_graph& quotient(index_set_graph& g, const equivalence& eq) const;
  index_set_graph& union_reachable(index_set_graph& g) const;
  index_set_graph& subgraph_set_size_gt(index_set_graph& g, index_type l);
  void write_edge_set(::std::ostream& s) const;
  void write_digraph(::std::ostream& s, const char* name) const;
};
inline ::std::ostream& operator<<(::std::ostream& s, const graph& g)
{
  g.write_compact(s);
  return s;
};
inline ::std::ostream& operator<<(::std::ostream& s, const weighted_graph& g)
{
  g.write_compact(s);
  return s;
};
inline ::std::ostream& operator<<(::std::ostream& s, const index_set_graph& g)
{
  g.write_edge_set(s);
  return s;
};
}
namespace hsps {
class Heuristic;
struct rule {
  index_set antecedent;
  index_type consequent;
  rule() : antecedent(EMPTYSET), consequent(no_such_index) { };
  rule(index_type c) : antecedent(EMPTYSET), consequent(c) { };
  rule(const index_set& a, index_type c) : antecedent(a), consequent(c) { };
  rule(const rule& r) : antecedent(r.antecedent), consequent(r.consequent) { };
  rule& operator=(const rule& r) {
    antecedent = r.antecedent;
    consequent = r.consequent;
    return *this;
  };
  bool operator==(const rule& r) const {
    return ((antecedent == r.antecedent) && (consequent == r.consequent));
  };
  bool operator!=(const rule& r) const {
    return (!(*this == r));
  };
  bool operator<(const rule& r) const {
    return ((consequent < r.consequent) ||
     ((consequent == r.consequent) && (antecedent < r.antecedent)));
  };
  bool operator>(const rule& r) const {
    return ((consequent > r.consequent) ||
     ((consequent == r.consequent) && (antecedent > r.antecedent)));
  };
};
class rule_set : public svector<rule> {
 public:
  index_type find_rule(index_type c) const;
  void compute_dependency_graph(index_type n, index_graph& g) const;
  void remove(const bool_vec& set, index_vec& map);
  void remove(const bool_vec& set, index_graph& g);
  void remove(const bool_vec& set);
  void make_acyclic(index_graph& g);
  void make_post_unique(index_graph& g);
};
typedef svector<const char*> string_set;
class Instance {
  bool xrf;
 public:
  static bool write_negation;
  static bool write_DKEL;
  static bool write_PDDL2;
  static bool write_time;
  static bool write_PDDL3;
  static bool write_metric;
  static bool write_extra;
  static bool write_resource_constraints_at_start;
  static bool always_write_parameters;
  static bool always_write_requirements;
  static bool always_write_precondition;
  static bool always_write_effect;
  static bool always_write_conjunction;
  static bool write_atom_set_with_symbolic_names;
  static bool write_action_set_with_symbolic_names;
  static const char* goal_atom_name;
  static const char* goal_action_name;
  static hsps::rational goal_action_cost;
  static const char* pc_name;
  static index_type pc_count;
  struct Atom {
    const Name* name;
    index_type index;
    index_type neg;
    bool init;
    hsps::rational init_t;
    bool goal;
    hsps::rational goal_t;
    bool irrelevant;
    void* src;
    index_vec req_by;
    index_vec add_by;
    index_vec del_by;
    Atom() : name(0), index(no_such_index), neg(no_such_index),
  init(false), init_t(0), goal(false), goal_t(POS_INF),
  irrelevant(false), src(0), req_by(no_such_index, 0),
  add_by(no_such_index, 0), del_by(no_such_index, 0) { };
    Atom(const Name* n) : name(n), index(0), neg(no_such_index),
  init(false), init_t(0), goal(false), goal_t(POS_INF),
  irrelevant(false), src(0), req_by(no_such_index, 0),
  add_by(no_such_index, 0), del_by(no_such_index, 0) { };
    Atom(const Name* n, index_type i) : name(n), index(i),
  neg(no_such_index), init(false), init_t(0), goal(false),
  goal_t(POS_INF),
  irrelevant(false), req_by(no_such_index, 0),
  add_by(no_such_index, 0), del_by(no_such_index, 0) { };
    Atom& operator=(const Atom& a) {
      name = a.name;
      index = a.index;
      neg = a.neg;
      init = a.init;
      init_t = a.init_t;
      goal = a.goal;
      goal_t = a.goal_t;
      irrelevant = a.irrelevant;
      src = a.src;
      req_by = a.req_by;
      add_by = a.add_by;
      del_by = a.del_by;
      return *this;
    };
    bool operator==(const Atom& a) {
      return (index == a.index);
    };
  };
  struct Resource {
    const Name* name;
    index_type index;
    hsps::rational init;
    void* src;
    bool consumed;
    bool used;
    Resource() : name(0), index(no_such_index), init(0), src(0),
  consumed(false), used(false) { };
    Resource(const Name* n) : name(n), index(no_such_index), init(0), src(0),
  consumed(false), used(false) { };
    Resource(const Name* n, index_type i) : name(n), index(i), init(0),
  src(0), consumed(false), used(false) { };
    Resource& operator=(const Resource& r) {
      name = r.name;
      index = r.index;
      init = r.init;
      src = r.src;
      consumed = r.consumed;
      used = r.used;
      return *this;
    };
    bool operator==(const Resource& r) {
      return (index == r.index);
    };
    bool reusable() const { return (used && !consumed); };
    bool consumable() const { return (consumed); };
  };
  struct Action {
    const Name* name;
    index_type index;
    bool sel;
    index_set pre;
    index_set add;
    index_set del;
    index_set lck;
    amt_vec use;
    amt_vec cons;
    hsps::rational dur;
    hsps::rational dmin;
    hsps::rational dmax;
    hsps::rational cost;
    const char* assoc;
    void* src;
    index_set ncw_atms;
    Action()
      : name(0), index(no_such_index), sel(true), pre(), add(), del(),
        lck(), use(ZERO, 0), cons(ZERO, 0), dur(1), dmin(1), dmax(1), cost(1),
  assoc(0), src(0), ncw_atms() { };
    Action(const Name* n)
      : name(n), index(no_such_index), sel(true), pre(), add(), del(),
        lck(), use(ZERO, 0), cons(ZERO, 0), dur(1), dmin(1), dmax(1), cost(1),
 assoc(0), src(0), ncw_atms() { };
    Action& operator=(const Action& a) {
      name = a.name;
      index = a.index;
      sel = a.sel;
      pre = a.pre;
      add = a.add;
      del = a.del;
      lck = a.lck;
      use = a.use;
      cons = a.cons;
      dur = a.dur;
      dmin = a.dmin;
      dmax = a.dmax;
      cost = a.cost;
      assoc = a.assoc;
      src = a.src;
      ncw_atms = a.ncw_atms;
      return *this;
    };
    bool operator==(const Action& a) {
      return (index == a.index);
    };
    hsps::rational req(index_type r) const { return use[r] + cons[r]; };
    bool e_deletes(index_type p, Heuristic* inc) const;
    bool e_deletes(const index_set& s, Heuristic* inc) const;
  };
  struct Constraint {
    const Name* name;
    index_type index;
    index_set set;
    index_type lim;
    bool exact;
    void* src;
    bool verified;
    Constraint() : name(0), index(no_such_index), set(), lim(0),
  exact(false), src(0), verified(false) { };
    Constraint(const Name* n) : name(n), index(no_such_index),
  set(), lim(0), exact(false), src(0), verified(false) { };
    Constraint(index_set s, index_type n, bool e) : name(0),
  index(no_such_index), set(s), lim(n), exact(e), src(0),
  verified(false) { };
    Constraint& operator=(const Constraint& c) {
      name = c.name;
      index = c.index;
      set = c.set;
      lim = c.lim;
      exact = c.exact;
      src = c.src;
      verified = c.verified;
      return *this;
    };
    bool operator==(const Constraint& c) {
      return ((set == c.set) && (lim == c.lim) && (exact == c.exact));
    };
  };
  typedef lvector<Atom> atom_vec;
  typedef lvector<Resource> resource_vec;
  typedef lvector<Action> action_vec;
  typedef lvector<Constraint> constraint_vec;
  typedef atom_vec::element_reference atom_ref;
  typedef resource_vec::element_reference resource_ref;
  typedef action_vec::element_reference action_ref;
  typedef constraint_vec::element_reference constraint_ref;
  const Name* name;
  atom_vec atoms;
  action_vec actions;
  resource_vec resources;
  constraint_vec invariants;
  index_set init_atoms;
  index_set goal_atoms;
  index_type max_pre, max_add, max_del, max_lck,
               max_add_by, max_del_by, max_req_by;
  hsps::rational min_dur, max_dur, min_cost, max_cost;
  set_hash_function atom_set_hash;
  set_hash_function action_set_hash;
  static int default_trace_level;
  int trace_level;
  Instance();
  Instance(const Name* n);
  Instance(const Instance& ins);
  ~Instance() { };
  Atom& new_atom(const Name* name);
  Resource& new_resource(const Name* name);
  Action& new_action(const Name* name);
  Action& copy_action(index_type a);
  Constraint& new_invariant();
  Constraint& new_invariant(const Name* name);
  Constraint& new_invariant(const index_set& s, index_type l, bool e);
  void copy(const Instance& ins);
  Instance* copy() const;
  void clear();
  void restricted_copy(const Instance& ins, const index_set& atms,
         const index_set& rc, index_set& acts, index_vec& map);
  void restricted_copy(const Instance& ins, const index_set& acts,
         index_vec& map);
  void abstracted_copy(const Instance& ins, const index_set& atms,
         index_vec& atm_map, index_vec& act_map);
  void reverse_copy(const Instance& ins);
  void delete_relax(const index_set& x_atms);
  void delete_relax_less(const index_set& x_atms);
  void assign_unique_action_names();
  void remove_actions(const bool_vec& set, index_vec& map);
  void remove_atoms(const bool_vec& set, index_vec& map);
  void remove_invariants(const bool_vec& set, index_vec& map);
  void remap_set(index_set& set, const index_vec& map);
  void remap_sets(index_set_vec& sets, const index_vec& map);
  void set_initial(const index_set& init);
  void set_goal(const index_set& goal);
  void set_DNF_goal(const index_set_vec& goal);
  void replace_atom_by_conjunction(index_type p, const index_set& c);
  void set_cost_bound(hsps::rational b);
  void create_composite_resource(const index_set& set);
  void create_total_resource();
  void extract_atom_negations_from_invariants();
  index_type complete_atom_negation(index_type a);
  void complete_atom_negations(const index_set& s);
  void complete_atom_negations();
  index_type create_history_atom(index_type a);
  void add_all_negation_invariants();
  void add_missing_negation_invariants();
  index_type compile_pc_always(const index_set& f, const Name* n);
  index_type compile_pc_sometime(const index_set& f, const Name* n);
  index_type compile_pc_at_most_once(const index_set& f, const Name* n);
  index_type compile_pc_sometime_before(const index_set& f_t,
     const index_set& f_c,
     const Name* n);
  void enforce_pc_always(const index_set& f, const Name* n);
  void enforce_pc_sometime(const index_set& f, const Name* n);
  void enforce_pc_at_most_once(const index_set& f, const Name* n);
  void enforce_pc_sometime_before(const index_set& f_t,
      const index_set& f_c,
      const Name* n);
  void compute_iff_axioms(rule_set& ax);
  void cross_reference();
  void clear_cross_reference();
  bool cross_referenced() const;
  bool verify_invariant(Constraint& inv);
  void verify_invariants();
  void save_durations(cost_vec& out) const;
  void set_durations(const cost_vec& in);
  void set_durations(const cost_vec& in, cost_vec& out);
  void assign_unit_durations(hsps::rational unit = hsps::rational(1));
  void discretize_durations(hsps::rational interval_width);
  void quantize_durations(index_type n_intervals);
  void round_durations_up();
  void round_durations_down();
  void round_durations();
  void assign_unit_costs(cost_vec& save);
  void restore_costs(const cost_vec& saved);
  void assign_unlimited_resources(cost_vec& save);
  void restore_resources(const cost_vec& saved);
  index_type n_atoms() const { return atoms.length(); };
  index_type n_resources() const { return resources.length(); };
  index_type n_reusable_resources() const;
  index_type n_consumable_resources() const;
  index_type n_actions() const { return actions.length(); };
  index_type n_invariants() const { return invariants.length(); };
  index_type n_verified_invariants() const;
  void atom_names(name_vec& names) const;
  void action_names(name_vec& names) const;
  void coadd_graph(graph& g) const;
  void cochange_graph(graph& g) const;
  void causal_graph(graph& g) const;
  void partitioning_graph(const index_set& goal,
     index_set_graph& g,
     index_set& n_goal) const;
  void make_graph_representation(index_graph& g, name_vec& nn);
  bool non_interfering(index_type a0, index_type a1) const;
  bool lock_compatible(index_type a0, index_type a1) const;
  bool resource_compatible(index_type a0, index_type a1) const;
  bool commutative(const Action& a0, const Action& a1) const;
  bool commutative(index_type a0, index_type a1) const;
  bool additive(index_type p0, index_type p1) const;
  bool cochanged(index_type p0, index_type p1) const;
  bool eval_invariant_in_partial_state(const index_set& s,
           const Constraint& inv);
  bool eval_invariant_in_partial_state(const bool_vec& s,
           const Constraint& inv);
  bool eval_invariant_in_complete_state(const index_set& s,
     const Constraint& inv);
  bool eval_invariant_in_complete_state(const bool_vec& s,
     const Constraint& inv);
  void negation_atom_set(const index_set& pset, index_set& nset) const;
  void write_atom_set(::std::ostream& s,
        const index_vec& set,
        unsigned int c = Name::NC_DEFAULT) const;
  void write_atom_set(::std::ostream& s,
        const bool_vec& set,
        unsigned int c = Name::NC_DEFAULT) const;
  void write_atom_sets(::std::ostream& s,
         const index_set_vec& sets,
         unsigned int c = Name::NC_DEFAULT) const;
  void write_action_set(::std::ostream& s,
   const index_vec& set,
   unsigned int c = Name::NC_DEFAULT) const;
  void write_action_set(::std::ostream& s,
   const bool_vec& set,
   unsigned int c = Name::NC_DEFAULT) const;
  void write_iff_axiom(::std::ostream& s, const rule& r) const;
  void write_iff_axiom_set(::std::ostream& s, const rule_set& rset) const;
  void write_atom_digraph(::std::ostream& s,
     const graph& g,
     const index_set& atomset,
     const bool_vec& mark_shaded,
     const bool_vec& mark_dashed,
     const char* label) const;
  void write_atom_digraph(::std::ostream& s,
     const graph& g,
     const char* label) const;
  void write_atom_action_digraph(::std::ostream& s,
     const graph& g,
     const index_set& atomset,
     const index_set& actionset,
     const bool_vec& mark_shaded,
     const bool_vec& mark_bold,
     const bool_vec& mark_dashed,
     const char* label) const;
  void write_atom_set_digraph(::std::ostream& s,
         const index_set_graph& g,
         const char* label) const;
  void write_atom_set_graph(::std::ostream& s,
       const index_set_graph& g,
       const char* label) const;
  void write_axiom_dependency_graph(::std::ostream& s,
        const index_graph& g,
        const char* label) const;
  virtual void write_PDDL_action
    (::std::ostream& s, const Action& act) const;
  virtual void write_DKEL_invariant_item
    (::std::ostream& s, const Constraint& inv, string_set& tags) const;
  virtual void write_DKEL_irrelevant_atom_item
    (::std::ostream& s, const Atom& atm, string_set& tags) const;
  virtual void write_DKEL_irrelevant_action_item
    (::std::ostream& s, const Action& act, string_set& tags) const;
  virtual void write_domain_atom_set
    (::std::ostream& s, const index_set& set) const;
  virtual void write_domain_action_set
    (::std::ostream& s, const index_set& set) const;
  virtual void write_domain_action_set
    (::std::ostream& s, const index_set& set, const Name* name) const;
  virtual void write_domain(::std::ostream& s) const;
  virtual void write_domain_init(::std::ostream& s) const;
  virtual void write_domain_declarations(::std::ostream& s) const;
  virtual void write_domain_actions(::std::ostream& s) const;
  virtual void write_domain_DKEL_items(::std::ostream& s) const;
  virtual void write_problem(::std::ostream& s) const;
  virtual void write_problem_init(::std::ostream& s) const;
  virtual void write_problem_goal(::std::ostream& s) const;
  virtual void write_problem_metric(::std::ostream& s) const;
  void print_atom(::std::ostream& s, const Atom& a) const;
  void print_resource(::std::ostream& s, const Resource& r) const;
  void print_action(::std::ostream& s, const Action& a) const;
  void print_invariant(::std::ostream& s, const Constraint& c) const;
  virtual void print(::std::ostream& s) const;
 private:
  void create_atom_negation(index_type a);
};
typedef lvector<Instance*> instance_vec;
class PreconditionEvaluator {
  enum eval_node_type { positive_leaf,
   undecided_leaf,
   no_test,
   test_invariant,
   test_atom };
  Instance& instance;
  eval_node_type node_type;
  index_type i_test;
  lvector<PreconditionEvaluator*> next;
  PreconditionEvaluator* prev;
  index_type n_positive;
  index_set acts;
  static void construct(Instance& ins,
   PreconditionEvaluator* p,
   bool_vec& s,
   bool_vec& ua,
   index_type n_ua,
   index_type n_pos,
   bool_vec& rem_invs,
   bool_vec& rem_atoms,
   hsps::rational T);
 public:
  PreconditionEvaluator(Instance& ins);
  ~PreconditionEvaluator();
  static PreconditionEvaluator* construct(Instance& ins, hsps::rational T);
  PreconditionEvaluator* node(const bool_vec& s);
  index_type eval(const bool_vec& s,
    const bool_vec& a,
    index_type* app,
    index_type c);
  void write_graph(std::ostream& s, bool root = true);
};
inline ::std::ostream& operator<<(::std::ostream& s, const rule& r)
{
  return s << r.antecedent << "->" << r.consequent;
};
inline ::std::ostream& operator<<(::std::ostream& s, const rule_set& r)
{
  s << '{';
  for (index_type k = 0; k < r.length(); k++) {
    if (k > 0) s << ',';
    s << r[k];
  }
  s << '}';
  return s;
};
}
namespace hsps {
class Search;
class Plan;
class State {
 protected:
  State* pre;
 public:
  State() : pre(0) { };
  State(const State& s) : pre(s.pre) { };
  virtual ~State();
  virtual const State* predecessor() const;
  virtual State* predecessor();
  virtual void set_predecessor(State* p);
  virtual bool is_encapsulated();
  virtual hsps::rational delta_cost() = 0;
  virtual hsps::rational acc_cost();
  virtual index_type depth() const;
  virtual hsps::rational est_cost() = 0;
  virtual bool is_final() = 0;
  virtual bool is_max() = 0;
  virtual hsps::rational expand(Search& s, hsps::rational bound) = 0;
  virtual void store(hsps::rational cost, bool opt) = 0;
  virtual void reevaluate() = 0;
  virtual int compare(const State& s) = 0;
  virtual index_type hash() = 0;
  virtual State* copy() = 0;
  virtual void insert(Plan& p) = 0;
  virtual void insert_path(Plan& p) = 0;
  virtual void write(::std::ostream& s) = 0;
  virtual void write_plan(::std::ostream& s) = 0;
  virtual void write_eval(::std::ostream& s, char* p = 0, bool e = true);
  State* copy_path();
  void delete_path();
  int compare_path(const State* s);
  void write_path(::std::ostream& s);
  virtual void write_path_as_graph(::std::ostream& s);
};
inline bool operator==(State& s0, State& s1) {
  return (s0.compare(s1) == 0);
}
inline bool operator<(State& s0, State& s1) {
  return (s0.compare(s1) < 0);
}
inline bool operator<=(State& s0, State& s1) {
  return (s0.compare(s1) <= 0);
}
inline bool operator>(State& s0, State& s1) {
  return (s0.compare(s1) > 0);
}
inline bool operator>=(State& s0, State& s1) {
  return (s0.compare(s1) >= 0);
}
inline ::std::ostream& operator<<(::std::ostream& s, State& state) {
  state.write(s);
  return s;
}
class ProgressionState : public State {
 public:
  ProgressionState() { };
  ProgressionState(const ProgressionState& s) : State(s) { };
  virtual ~ProgressionState() { };
  virtual void insert_path(Plan& p);
};
class RegressionState : public State {
 public:
  RegressionState() { };
  RegressionState(const RegressionState& s) : State(s) { };
  virtual ~RegressionState() { };
  virtual void insert_path(Plan& p);
};
typedef lvector<State*> state_vec;
class PlanTrait {
 public:
  PlanTrait() { };
  virtual ~PlanTrait();
  virtual const PlanTrait* cast_to(const char* class_name) const;
};
typedef lvector<PlanTrait*> plan_trait_vec;
class Plan {
 public:
  virtual ~Plan();
  virtual void protect(index_type atom) = 0;
  virtual void insert(index_type act) = 0;
  virtual void advance(hsps::rational delta) = 0;
  virtual void end() = 0;
  virtual void output(Plan& to);
  virtual void set_name(const Name* n);
  virtual void set_optimal(bool o);
  virtual void add_trait(PlanTrait* t);
};
class Search {
 public:
  virtual ~Search();
  virtual hsps::rational new_state(State& s, hsps::rational bound) = 0;
  virtual bool solved() const = 0;
  virtual bool optimal() const = 0;
  virtual bool done() const = 0;
};
class NoSearch : public Search {
  bool _solved;
 public:
  NoSearch() : _solved(false) { };
  virtual ~NoSearch();
  void reset();
  virtual hsps::rational new_state(State& s, hsps::rational bound);
  virtual bool solved() const;
  virtual bool optimal() const;
  virtual bool done() const;
};
class Transitions : public state_vec, public Search {
  State* target_state;
  hsps::rational delta_bound;
  bool bound_is_exact;
 public:
  Transitions();
  Transitions(State* from, State* to, hsps::rational db);
  virtual ~Transitions();
  void clear();
  bool find(State* from, State* to, hsps::rational d, bool x);
  virtual hsps::rational new_state(State& s, hsps::rational bound);
  virtual bool solved() const;
  virtual bool optimal() const;
  virtual bool done() const;
};
class StateFactory {
 public:
  virtual ~StateFactory();
  virtual State* new_state(const index_set& s, State* pre) = 0;
  virtual State* new_state(const bool_vec& s, State* pre) = 0;
};
class PlanSet {
 public:
  virtual ~PlanSet();
  virtual Plan* new_plan() = 0;
  virtual void output(PlanSet& to);
  virtual void output(PlanSet& to, const bool_vec& s);
};
}
namespace hsps {
extern const double D_INF;
class Stopwatch {
  double start_t;
  double current_t;
  double total_t;
  static const double TIME_OUT_TOLERANCE = 1.1;
  static bool interrupt_signal_trapped;
  static volatile bool interrupt_signal_raised;
  static bool alarm_signal_trapped;
  static volatile bool alarm_signal_raised;
  bool interrupt_enabled;
  bool time_out_enabled;
  double time_out_t;
  bool memory_limit_enabled;
  unsigned long memory_limit;
  bool stack_limit_enabled;
  unsigned long stack_limit;
  static void alarm_handler(int sig);
  static void interrupt_handler(int sig);
  static void check_stack();
  void set_interrupt();
  void clear_interrupt();
  void set_alarm(double t);
  void clear_alarm();
  void check_signals();
  static unsigned long peak_mem;
  static unsigned long peak_size;
  static unsigned long peak_stack;
  static unsigned long init_stack;
 protected:
  bool interrupt_flag;
  bool time_out_flag;
  bool out_of_memory_flag;
  bool out_of_stack_flag;
  bool error_flag;
  count_type running;
  bool terminate_on_interrupt;
  bool terminate_on_time_out;
  bool terminate_on_out_of_memory;
  bool terminate_on_out_of_stack;
  bool terminate_on_error;
 public:
  static const long FLAG_INTERRUPTED = 1;
  static const long FLAG_TIME_OUT = 2;
  static const long FLAG_OUT_OF_MEMORY = 4;
  static const long FLAG_OUT_OF_STACK = 8;
  static const long FLAG_ERROR = 16;
  Stopwatch();
  ~Stopwatch();
  static double seconds();
  void enable_interrupt(bool terminate);
  void disable_interrupt();
  void enable_time_out(double t, bool terminate);
  void disable_time_out();
  void enable_memory_limit(unsigned long l, bool terminate);
  void disable_memory_limit();
  void enable_stack_limit(unsigned long l, bool terminate);
  void disable_stack_limit();
  void set_terminate_flags(bool on_interrupt,
      bool on_time_out,
      bool on_out_of_memory,
      bool on_out_of_stack,
      bool on_error);
  bool interrupt_raised();
  bool time_out_raised();
  bool out_of_memory_raised();
  bool out_of_stack_raised();
  bool error_raised();
  double remaining();
  bool break_signal_raised();
  virtual void interrupt();
  virtual void time_out();
  virtual void out_of_memory();
  virtual void out_of_stack();
  virtual void error();
  virtual void start();
  virtual void stop();
  virtual void reset();
  count_type run_level() { return running; };
  void add(Stopwatch& s);
  void add_total(Stopwatch& s);
  double time();
  double total_time();
  unsigned long peak_memory() const;
  unsigned long peak_total_size() const;
  unsigned long peak_stack_size() const;
  unsigned long flags();
  void print(::std::ostream& s);
};
class Statistics : public Stopwatch {
  count_type min_nodes_created;
  count_type max_nodes_created;
  count_type min_nodes_expanded;
  count_type max_nodes_expanded;
  count_type iterations_started;
  count_type iterations_finished;
  count_type total_min_nodes_created;
  count_type total_max_nodes_created;
  count_type total_min_nodes_expanded;
  count_type total_max_nodes_expanded;
  count_type total_iterations_started;
  count_type total_iterations_finished;
  index_type max_depth;
  hsps::rational max_lb;
  count_type nodes_to_prove_lb;
 public:
  static bool long_print_format;
  static bool running_print_max;
  Statistics()
    : min_nodes_created(0), max_nodes_created(0),
    min_nodes_expanded(0), max_nodes_expanded(0),
    iterations_started(0), iterations_finished(0),
    total_min_nodes_created(0), total_max_nodes_created(0),
    total_min_nodes_expanded(0), total_max_nodes_expanded(0),
    total_iterations_started(0), total_iterations_finished(0),
    max_depth(0), max_lb(0), nodes_to_prove_lb(0)
    { };
  void create_node(State& s);
  void expand_node(State& s);
  void current_lower_bound(hsps::rational b);
  void begin_iteration();
  void end_iteration();
  virtual void start();
  virtual void stop();
  virtual void reset();
  virtual void time_out();
  virtual void interrupt();
  virtual void out_of_memory();
  virtual void out_of_stack();
  void add(Statistics& s);
  void add_nodes(Statistics& s);
  void add_total(Statistics& s);
  void add_nodes_total(Statistics& s);
  double branching_factor() const {
    return ((min_nodes_created + max_nodes_created)/
     ((double)(min_nodes_expanded + max_nodes_expanded)));
  };
  count_type nodes() const {
    return (min_nodes_expanded + max_nodes_expanded);
  };
  count_type total_nodes() const {
    if (running)
      return (total_min_nodes_expanded + total_max_nodes_expanded +
       min_nodes_expanded + max_nodes_expanded);
    else
      return (total_min_nodes_expanded + total_max_nodes_expanded);
  };
  count_type total_min_nodes() const {
    if (running) return (total_min_nodes_expanded + min_nodes_expanded);
    else return total_min_nodes_expanded;
  };
  count_type total_max_nodes() const {
    if (running) return (total_max_nodes_expanded + max_nodes_expanded);
    else return total_max_nodes_expanded;
  };
  hsps::rational max_lower_bound() const {
    return max_lb;
  };
  count_type nodes_at_max_lower_bound() const {
    return nodes_to_prove_lb;
  };
  count_type iterations() {
    return iterations_started;
  };
  count_type complete_iterations() {
    return iterations_finished;
  };
  count_type total_iterations() {
    if (running) return iterations_started + total_iterations_started;
    else return total_iterations_started;
  };
  count_type total_complete_iterations() {
    if (running) return iterations_finished + total_iterations_finished;
    else return total_iterations_finished;
  };
  void print_brief(::std::ostream& s, const char* p = 0);
  void print(::std::ostream& s, const char* p = 0);
  void print_total(::std::ostream& s, const char* p = 0);
};
inline ::std::ostream& operator<<(::std::ostream& s, Stopwatch& t) {
  return s << t.total_time();
}
inline ::std::ostream& operator<<(::std::ostream& s, Statistics& t) {
  if (Statistics::long_print_format) {
    t.print_total(s);
    return s;
  }
  else {
    return s << t.total_nodes() << " nodes, "
      << t.total_time() << " seconds, "
      << t.peak_memory() << "k heap, "
      << t.peak_stack_size() << "k stack";
  }
}
}
namespace hsps {
class ACF {
 public:
  virtual ~ACF() { };
  virtual hsps::rational operator()(index_type a) const = 0;
  virtual hsps::rational min_cost(index_type n) const;
  virtual hsps::rational max_cost(index_type n) const;
  virtual hsps::rational avg_cost(index_type n) const;
  virtual hsps::rational cost_gcd(index_type n) const;
};
class Heuristic {
 protected:
  Instance& instance;
  int trace_level;
 public:
  static count_type eval_count;
  static int default_trace_level;
  Heuristic(Instance& ins)
    : instance(ins), trace_level(default_trace_level) { };
  virtual ~Heuristic();
  virtual void set_trace_level(int level);
  virtual hsps::rational eval(const index_set& s) = 0;
  virtual hsps::rational eval(const bool_vec& s) = 0;
  virtual void write_eval(const index_set& s,
     ::std::ostream& st,
     char* p = 0,
     bool e = true);
  virtual void write_eval(const bool_vec& s,
     ::std::ostream& st,
     char* p = 0,
     bool e = true);
  virtual hsps::rational eval_precondition(const Instance::Action& a);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
  virtual hsps::rational eval_to_bound(const index_set& s, hsps::rational bound);
  virtual hsps::rational eval_to_bound(const bool_vec& s, hsps::rational bound);
  virtual void store(const index_set& s, hsps::rational v, bool opt);
  virtual void store(const bool_vec& s, hsps::rational v, bool opt);
  hsps::rational eval(index_type atom);
  void compute_heuristic_graph(const ACF& cost, graph& g);
};
class ZeroHeuristic : public Heuristic {
 public:
  ZeroHeuristic(Instance& ins) : Heuristic(ins) { };
  virtual ~ZeroHeuristic() { };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
};
class EvalActionCache : public Heuristic {
  Heuristic& base_h;
  cost_vec cache;
 public:
  EvalActionCache(Instance& ins, Heuristic& h);
  virtual ~EvalActionCache() { };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
  virtual hsps::rational eval_precondition(const Instance::Action& a);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
  virtual hsps::rational eval_to_bound(const index_set& s, hsps::rational bound);
  virtual hsps::rational eval_to_bound(const bool_vec& s, hsps::rational bound);
};
class RegressionInvariantCheck : public Heuristic {
  Heuristic& base_h;
  bool verified_invariants_only;
 public:
  RegressionInvariantCheck(Instance& ins, Heuristic& h, bool v)
    : Heuristic(ins), base_h(h), verified_invariants_only(v) { };
  virtual ~RegressionInvariantCheck() { };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
  virtual hsps::rational eval_to_bound(const index_set& s, hsps::rational bound);
  virtual hsps::rational eval_to_bound(const bool_vec& s, hsps::rational bound);
};
class ForwardReachabilityCheck : public Heuristic {
  index_set goals;
  bool_vec r;
  bool_vec f;
  bool_vec d;
  hsps::rational compute();
 public:
  ForwardReachabilityCheck(Instance& i, const index_set& g);
  virtual ~ForwardReachabilityCheck();
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
};
class Combine2ByMax : public Heuristic {
  Heuristic& h0;
  Heuristic& h1;
 public:
  Combine2ByMax(Instance& ins, Heuristic& _h0, Heuristic& _h1)
    : Heuristic(ins), h0(_h0), h1(_h1) { };
  virtual ~Combine2ByMax() { };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
  virtual hsps::rational eval_to_bound(const index_set& s, hsps::rational bound);
  virtual hsps::rational eval_to_bound(const bool_vec& s, hsps::rational bound);
};
class CombineNByMax : public Heuristic {
  lvector<Heuristic*> h_vec;
 public:
  CombineNByMax(Instance& ins)
    : Heuristic(ins), h_vec((Heuristic*)0, 0) { };
  virtual ~CombineNByMax() { };
  void add(Heuristic* h) { h_vec.append(h); };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
  virtual hsps::rational eval_to_bound(const index_set& s, hsps::rational bound);
  virtual hsps::rational eval_to_bound(const bool_vec& s, hsps::rational bound);
};
class CombineNBySum : public Heuristic {
  lvector<Heuristic*> h_vec;
 public:
  CombineNBySum(Instance& ins)
    : Heuristic(ins), h_vec((Heuristic*)0, 0) { };
  virtual ~CombineNBySum() { };
  void add(Heuristic* h) { h_vec.append(h); };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
  virtual hsps::rational eval_to_bound(const index_set& s, hsps::rational bound);
  virtual hsps::rational eval_to_bound(const bool_vec& s, hsps::rational bound);
};
class RoundUp : public Heuristic {
  Heuristic& h;
  long d;
 public:
  RoundUp(Instance& ins, Heuristic& h0)
    : Heuristic(ins), h(h0), d(1) { };
  RoundUp(Instance& ins, Heuristic& h0, long d0)
    : Heuristic(ins), h(h0), d(d0) { };
  virtual ~RoundUp() { };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
  virtual hsps::rational eval_to_bound(const index_set& s, hsps::rational bound);
  virtual hsps::rational eval_to_bound(const bool_vec& s, hsps::rational bound);
};
class HX : public Heuristic {
  Heuristic& h0;
  index_set X;
 public:
  HX(Instance& ins, Heuristic& h, const index_set& x)
    : Heuristic(ins), h0(h), X(x) { };
  HX(Instance& ins, Heuristic& h)
    : Heuristic(ins), h0(h) { };
  virtual ~HX() { };
  void setX(const index_set& x) { X = x; };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
  virtual void write_eval(const index_set& s,
     ::std::ostream& st,
     char* p = 0,
     bool e = true);
  virtual void write_eval(const bool_vec& s,
     ::std::ostream& st,
     char* p = 0,
     bool e = true);
};
class AtomMapAdapter : public Heuristic {
  index_vec map;
  Heuristic& base_h;
 public:
  AtomMapAdapter(Instance& i, const index_vec& m, Heuristic& h)
    : Heuristic(i), map(m), base_h(h)
  { assert(map.length() == instance.n_atoms()); };
  virtual ~AtomMapAdapter() { };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
  virtual hsps::rational incremental_eval(const index_set& s, index_type i_new);
  virtual hsps::rational incremental_eval(const bool_vec& s, index_type i_new);
};
class CompleteNegationAdapter : public Heuristic {
  Heuristic& h_base;
  pair_vec pn_map;
  bool_vec sc;
 public:
  CompleteNegationAdapter(Instance& ins, const pair_vec& p, Heuristic& h);
  virtual ~CompleteNegationAdapter();
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
};
class CompareEval : public Heuristic {
  Heuristic& base_h;
  Heuristic& alt_h;
  bool max_h_val;
 public:
  static count_type lower;
  static count_type equal;
  static count_type higher;
  CompareEval(Instance& i, Heuristic& h0, Heuristic& h1)
    : Heuristic(i), base_h(h0), alt_h(h1) { }
  virtual ~CompareEval() { };
  void set_maximal_heuristic_value(bool on) { max_h_val = on; };
  virtual hsps::rational eval(const index_set& s);
  virtual hsps::rational eval(const bool_vec& s);
};
class UnitACF : public ACF {
 public:
  UnitACF() { };
  virtual ~UnitACF() { };
  virtual hsps::rational operator()(index_type a) const;
  virtual hsps::rational min_cost(index_type n) const;
  virtual hsps::rational max_cost(index_type n) const;
  virtual hsps::rational avg_cost(index_type n) const;
};
class ZeroACF : public ACF {
 public:
  ZeroACF() { };
  virtual ~ZeroACF() { };
  virtual hsps::rational operator()(index_type a) const;
  virtual hsps::rational min_cost(index_type n) const;
  virtual hsps::rational max_cost(index_type n) const;
  virtual hsps::rational avg_cost(index_type n) const;
};
class CostACF : public ACF {
  Instance& instance;
 public:
  CostACF(Instance& i) : instance(i) { };
  virtual ~CostACF() { };
  virtual hsps::rational operator()(index_type a) const;
};
class FracACF : public ACF {
  const ACF& baseACF;
  cost_vec df;
 public:
  FracACF(const ACF& b, index_type l);
  FracACF(const ACF& b, index_type l, hsps::rational f);
  virtual ~FracACF();
  void set(index_type a, hsps::rational f);
  void set(const index_set& d, hsps::rational f);
  virtual hsps::rational operator()(index_type a) const;
};
class DiscountACF : public ACF {
  const ACF& baseACF;
  bool_vec discounted;
 public:
  DiscountACF(const ACF& b, index_type l)
    : baseACF(b), discounted(false, l) { };
  DiscountACF(const ACF& b, const index_set& d, index_type l)
    : baseACF(b), discounted(d, l) { };
  DiscountACF(const ACF& b, const bool_vec& d)
    : baseACF(b), discounted(d) { };
  virtual ~DiscountACF() { };
  void discount(index_type a) { discounted[a] = true; };
  void discount(const index_set& d) { discounted.insert(d); };
  void discount(const bool_vec& d) { discounted.insert(d); };
  void count(index_type a) { discounted[a] = false; };
  void count(const index_set& d) { discounted.subtract(d); };
  void count(const bool_vec& d) { discounted.subtract(d); };
  void count_only(const bool_vec& d);
  const bool_vec& discounted_actions() { return discounted; };
  virtual hsps::rational operator()(index_type a) const;
};
class MakespanACF : public ACF {
  Instance& instance;
 public:
  MakespanACF(Instance& i) : instance(i) { };
  virtual ~MakespanACF() { };
  virtual hsps::rational operator()(index_type a) const;
};
class ResourceConsACF : public ACF {
  Instance& instance;
  index_type resource_id;
 public:
  ResourceConsACF(Instance& i, index_type r);
  virtual ~ResourceConsACF() { };
  virtual hsps::rational operator()(index_type a) const;
};
class ResourceReqACF : public ACF {
  Instance& instance;
  index_type resource_id;
 public:
  ResourceReqACF(Instance& i, index_type r);
  virtual ~ResourceReqACF() { };
  virtual hsps::rational operator()(index_type a) const;
};
}
namespace hsps {
class SearchResult {
 public:
  SearchResult() { };
  virtual ~SearchResult();
  virtual void solution(State& s, hsps::rational cost) = 0;
  virtual void no_more_solutions(hsps::rational cost) = 0;
  virtual bool more() = 0;
};
class Result : public SearchResult {
 public:
  enum stop_condition { stop_at_first,
   stop_at_nth,
   stop_at_all_optimal,
   stop_at_all };
 private:
  stop_condition sc;
  count_type find_n;
  PlanSet* plans;
  count_type n_found;
  hsps::rational min_cost;
  hsps::rational max_ex;
 public:
  Result() : sc(stop_at_first), find_n(1), plans(0), n_found(0),
    min_cost(POS_INF), max_ex(NEG_INF) { };
  Result(PlanSet* s) : sc(stop_at_first), find_n(1), plans(s), n_found(0),
    min_cost(POS_INF), max_ex(NEG_INF) { };
  virtual ~Result() { };
  void set_stop_condition(stop_condition c);
  void set_n_to_find(count_type n);
  void set_plan_set(PlanSet* s);
  count_type solution_count();
  bool search_space_exhausted();
  void reset();
  virtual void solution(State& s, hsps::rational cost);
  virtual void no_more_solutions(hsps::rational cost);
  virtual bool more();
};
class SearchStats : public Search {
 protected:
  Statistics& stats;
  hsps::rational cost_limit;
  count_type node_limit;
  count_type node_count;
  count_type work_limit;
  count_type work_count;
  count_type zero_eval_count;
  void start_count();
  void stop_count();
  void reset();
 public:
  SearchStats(Statistics& s);
  SearchStats(Statistics& s, hsps::rational limit);
  virtual ~SearchStats();
  void set_cost_limit(hsps::rational c_max);
  hsps::rational get_cost_limit() const;
  bool cost_limit_reached() const;
  void set_node_limit(count_type n);
  count_type get_node_limit() const;
  bool node_limit_reached() const;
  void set_work_limit(count_type n);
  count_type get_work_limit() const;
  bool work_limit_reached() const;
  bool break_signal_raised() const;
  virtual hsps::rational cost() const = 0;
  count_type work() const;
};
class SearchAlgorithm : public SearchStats {
  bool is_solved;
  bool is_optimal;
 protected:
  SearchResult& result;
  const Name* problem_name;
  int trace_level;
  void set_solved(bool s, bool o);
  void set_solved(bool s);
  void reset();
 public:
  static int default_trace_level;
  void set_problem_name(const Name* n);
  void set_trace_level(int level);
  SearchAlgorithm(Statistics& s, SearchResult& r);
  SearchAlgorithm(Statistics& s, SearchResult& r, hsps::rational limit);
  virtual ~SearchAlgorithm();
  virtual hsps::rational start(State& s, hsps::rational b) = 0;
  virtual hsps::rational start(State& s) = 0;
  virtual bool solved() const;
  virtual bool optimal() const;
  virtual bool done() const;
};
class SingleSearchAlgorithm : public SearchAlgorithm {
 public:
  SingleSearchAlgorithm(Statistics& s, SearchResult& r)
    : SearchAlgorithm(s, r) { };
  SingleSearchAlgorithm(Statistics& s, SearchResult& r, hsps::rational limit)
    : SearchAlgorithm(s, r, limit) { };
  virtual ~SingleSearchAlgorithm() { };
  virtual hsps::rational resume() = 0;
};
class MultiSearchAlgorithm : public SearchAlgorithm {
 public:
  MultiSearchAlgorithm(Statistics& s, SearchResult& r)
    : SearchAlgorithm(s, r) { };
  MultiSearchAlgorithm(Statistics& s, SearchResult& r, hsps::rational limit)
    : SearchAlgorithm(s, r, limit) { };
  virtual ~MultiSearchAlgorithm() { };
  virtual hsps::rational resume(State& s, hsps::rational b) = 0;
  virtual hsps::rational resume(State& s);
};
}
namespace hsps {
typedef lvector<Heuristic*> estimator_vec;
class BasicResourceState {
 protected:
  Instance& instance;
  estimator_vec& estimators;
  amt_vec amt_consumed;
 public:
  BasicResourceState(Instance& i, estimator_vec& est);
  BasicResourceState(Instance& i, estimator_vec& est, const amt_vec& ac);
  BasicResourceState(const BasicResourceState& s);
  virtual ~BasicResourceState();
  hsps::rational available(index_type r) const;
  hsps::rational available_for_consumption(index_type r) const;
  bool applicable(Instance::Action& a);
  bool sufficient_consumable(const index_set& s);
  bool sufficient_consumable(const bool_vec& s);
  void apply(Instance::Action& a);
  bool is_root();
  int compare(const BasicResourceState& s);
  index_type hash();
  BasicResourceState* new_state();
  BasicResourceState* copy();
  void write(std::ostream& s);
};
class RegressionResourceState : public BasicResourceState {
 protected:
  amt_vec max_required;
 public:
  RegressionResourceState(Instance& i, estimator_vec& est);
  RegressionResourceState(Instance& i, estimator_vec& est, const amt_vec& ac);
  RegressionResourceState(const RegressionResourceState& s);
  ~RegressionResourceState();
  hsps::rational available(index_type r) const;
  hsps::rational available_for_consumption(index_type r) const;
  bool applicable(Instance::Action& a);
  bool applicable(Instance::Action& a, const index_vec& c);
  bool applicable(Instance::Action& a, const index_cost_vec& c);
  bool applicable(Instance::Action& a,
    const index_cost_vec& c1,
    const index_vec& c2);
  bool sufficient_consumable(const index_set& s);
  bool sufficient_consumable(const bool_vec& s);
  bool sufficient_consumable(const index_set& s, const Instance::Action& cact);
  bool sufficient_consumable(const bool_vec& s, const Instance::Action& cact);
  bool sufficient_consumable(const index_set& s, const index_cost_vec& cacts);
  bool sufficient_consumable(const bool_vec& s, const index_cost_vec& cacts);
  void apply(Instance::Action& a);
  void reserve_as_required(const amt_vec& req);
  bool is_root();
  int compare(const RegressionResourceState& s);
  index_type hash();
  RegressionResourceState* new_state();
  RegressionResourceState* copy();
  void write(std::ostream& s);
};
}
namespace hsps {
class IterativeEnumerator {
 public:
  IterativeEnumerator() { };
  virtual ~IterativeEnumerator();
  virtual bool first() = 0;
  virtual bool next() = 0;
};
class RecursiveEnumerator {
 protected:
  virtual bool done() = 0;
 public:
  RecursiveEnumerator() { };
  virtual ~RecursiveEnumerator();
};
class SubsetEnumerator : public IterativeEnumerator {
 protected:
  index_type n;
  bool_vec in;
 public:
  SubsetEnumerator(index_type _n);
  virtual ~SubsetEnumerator() { };
  virtual bool first();
  virtual bool next();
  const bool_vec& current_set() const;
  void current_set(const index_set& elements, index_set& set);
  void current_set(index_set& set);
  index_type current_set_size();
  void all_sets(index_set_vec& sets);
};
class mSubsetEnumerator : public SubsetEnumerator {
 protected:
  index_type m;
 public:
  mSubsetEnumerator(index_type _n, index_type _m);
  virtual ~mSubsetEnumerator() { };
  count_type m_of_n();
  virtual bool first();
  virtual bool next();
};
class kAssignmentEnumerator : public IterativeEnumerator {
 protected:
  index_type n;
  index_type k;
  index_vec a;
 public:
  kAssignmentEnumerator(index_type _n, index_type _k);
  virtual ~kAssignmentEnumerator() { };
  virtual bool first();
  virtual bool next();
  void current_assignment(index_set_vec& sets);
};
class CorrespondanceEnumerator : public IterativeEnumerator {
 protected:
  const index_vec& a;
  const index_vec& b;
  mapping c;
  bool_vec f;
  index_type first_free(index_type x,
   const index_vec& vec,
   const bool_vec& f_vec);
  index_type next_free(index_type x,
         const index_vec& vec,
         const bool_vec& f_vec,
         index_type starting_from);
  bool find(index_type p);
 public:
  CorrespondanceEnumerator(const index_vec& v0, const index_vec& v1);
  virtual ~CorrespondanceEnumerator() { };
  virtual bool first();
  virtual bool next();
  const mapping& current() const { return c; };
};
void write_correspondance(::std::ostream& s, const index_vec& c);
class PermutationEnumerator : public IterativeEnumerator {
 protected:
  CorrespondanceEnumerator e;
 public:
  PermutationEnumerator(index_type n);
  virtual ~PermutationEnumerator() { };
  virtual bool first();
  virtual bool next();
  const mapping& current() const { return e.current(); };
};
class RecursivekPartitionEnumerator {
  index_vec ass;
 protected:
  index_type n;
  index_type k;
  index_set_vec sets;
  bool done;
  void partition(index_type n, index_type k);
  void construct();
  void construct(const index_set& set);
  virtual void solution();
 public:
  RecursivekPartitionEnumerator(index_type _n, index_type _k);
  virtual ~RecursivekPartitionEnumerator();
  void partition();
};
class RecursivePartitionEnumerator : public RecursivekPartitionEnumerator {
 public:
  RecursivePartitionEnumerator(index_type _n);
  virtual ~RecursivePartitionEnumerator() { };
  void partition();
  void partition_bounded(index_type min, index_type max);
};
class CountPartitions : public RecursivePartitionEnumerator {
  index_type c;
 protected:
  virtual void solution();
 public:
  CountPartitions(index_type _n) : RecursivePartitionEnumerator(_n) { };
  virtual ~CountPartitions() { };
  index_type count();
};
class PrintPartitions : public RecursivePartitionEnumerator {
 protected:
  virtual void solution();
 public:
  PrintPartitions(index_type _n) : RecursivePartitionEnumerator(_n) { };
  virtual ~PrintPartitions() { };
};
}
namespace hsps {
class ExecError {
 public:
  enum ErrorType { error_unknown,
     error_unsatisfied_precondition,
     error_incompatible_actions,
     error_resource_conflict,
     error_resource_shortage,
     error_unachieved_goal,
     warning_redundant_action
  };
  enum ErrorSeverity { severity_none = 0,
         severity_warning = 1,
         severity_plan_failure = 2,
         severity_execution_failure = 3
  };
 protected:
  ErrorType toe;
  hsps::rational at;
  index_type step;
 public:
  static const char* error_type_string(ErrorType t);
  static const char* error_severity_string(ErrorSeverity s);
  ExecError() : toe(error_unknown), at(0), step(no_such_index) { };
  ExecError(ErrorType e, hsps::rational t) : toe(e), at(t), step(no_such_index) { };
  ExecError(ErrorType e, hsps::rational t, index_type s) : toe(e), at(t), step(s) { };
  virtual ~ExecError();
  void remap_step(const index_vec& map);
  ErrorType type_of_error() const { return toe; };
  ErrorSeverity severity_of_error() const;
  hsps::rational time_of_error() const { return at; };
  index_type step_of_error() const { return step; };
  virtual ExecError* copy() const;
  virtual void write(::std::ostream& s) const;
};
typedef lvector<ExecError*> exec_error_vec;
typedef svector<ExecError::ErrorType> error_type_set;
typedef svector<ExecError::ErrorSeverity> error_severity_set;
class ExecErrorSet : public exec_error_vec {
  index_type current_step;
  error_type_set ignored_error_types;
 public:
  ExecErrorSet()
    : exec_error_vec((ExecError*)0, 0),
    current_step(no_such_index),
    ignored_error_types() { };
  ~ExecErrorSet();
  void ignore_error_type(ExecError::ErrorType t);
  void ignore_error_severity(ExecError::ErrorSeverity s);
  void clear_ignored_error_types();
  void new_error(ExecError* e);
  bool ignore(ExecError::ErrorType t);
  void remap_steps(const index_vec& map);
  hsps::rational earliest_time_of_error();
  ExecError::ErrorSeverity greatest_error_severity();
  bool executable();
  bool valid();
  index_type count_of_type(ExecError::ErrorType t);
  ExecErrorSet* earliest();
  ExecErrorSet* all_of_type(ExecError::ErrorType t);
  ExecErrorSet* all_of_severity(ExecError::ErrorSeverity s);
  ExecErrorSet* earliest_of_type(ExecError::ErrorType t);
  virtual void write(::std::ostream& s) const;
};
class UnsatisfiedPreconditionError : public ExecError {
  Instance& ins;
  index_type act;
  index_type pre;
  index_set holds;
 public:
  UnsatisfiedPreconditionError(Instance& i,
          index_type a,
          index_type p,
          hsps::rational at)
    : ExecError(ExecError::error_unsatisfied_precondition, at),
    ins(i), act(a), pre(p) { };
  UnsatisfiedPreconditionError(Instance& i,
          index_type a,
          index_type p,
          const index_set& h,
          hsps::rational at)
    : ExecError(ExecError::error_unsatisfied_precondition, at),
    ins(i), act(a), pre(p), holds(h) { };
  UnsatisfiedPreconditionError(Instance& i,
          index_type a,
          index_type p,
          hsps::rational at,
          index_type s)
    : ExecError(ExecError::error_unsatisfied_precondition, at, s),
    ins(i), act(a), pre(p) { };
  UnsatisfiedPreconditionError(Instance& i,
          index_type a,
          index_type p,
          const index_set& h,
          hsps::rational at,
          index_type s)
    : ExecError(ExecError::error_unsatisfied_precondition, at, s),
    ins(i), act(a), pre(p), holds(h) { };
  virtual ~UnsatisfiedPreconditionError() { };
  const Instance::Action& action() { return ins.actions[act]; };
  const Instance::Atom& precondition() { return ins.atoms[pre]; };
  const index_set& true_atoms() { return holds; };
  virtual ExecError* copy();
  virtual void write(::std::ostream& s) const;
};
class IncompatibleActionError : public ExecError {
  Instance& ins;
  index_type act0;
  index_type act1;
 public:
  IncompatibleActionError(Instance& i, index_type a0, index_type a1, hsps::rational at)
    : ExecError(ExecError::error_incompatible_actions, at),
    ins(i), act0(a0), act1(a1) { };
  IncompatibleActionError(Instance& i, index_type a0, index_type a1,
     hsps::rational at, index_type s)
    : ExecError(ExecError::error_incompatible_actions, at, s),
    ins(i), act0(a0), act1(a1) { };
  virtual ~IncompatibleActionError() { };
  const Instance::Action& action() { return ins.actions[act0]; };
  const Instance::Action& incompatible_action() { return ins.actions[act1]; };
  virtual ExecError* copy();
  virtual void write(::std::ostream& s) const;
};
class ResourceConflictError : public ExecError {
  Instance& ins;
  index_type res;
  index_set c_acts;
  index_set c_steps;
 public:
  ResourceConflictError(Instance& i,
   index_type r,
   const index_set& as,
   const index_set& ss,
   hsps::rational at) :
    ExecError(ExecError::error_resource_conflict, at), ins(i), res(r),
    c_acts(as), c_steps(ss) { };
  ResourceConflictError(Instance& i,
   index_type r,
   hsps::rational at) :
    ExecError(ExecError::error_resource_conflict, at), ins(i), res(r) { };
  ResourceConflictError(Instance& i,
   index_type r,
   const index_set& as,
   const index_set& ss,
   hsps::rational at,
   index_type s) :
    ExecError(ExecError::error_resource_conflict, at, s), ins(i), res(r),
    c_acts(as), c_steps(ss) { };
  ResourceConflictError(Instance& i,
   index_type r,
   hsps::rational at,
   index_type s) :
    ExecError(ExecError::error_resource_conflict, at, s), ins(i), res(r) { };
  void add_action(index_type a)
    { c_acts.insert(a); };
  void add_action(index_type a, index_type s)
    { c_acts.insert(a); c_steps.insert(s); };
  virtual ~ResourceConflictError() { };
  const Instance::Resource& resource() { return ins.resources[res]; };
  const index_set& conflict_actions() { return c_acts; };
  const index_set& conflict_steps() { return c_steps; };
  virtual ExecError* copy();
  virtual void write(::std::ostream& s) const;
};
class ResourceShortageError : public ExecError {
  Instance& ins;
  index_type res;
  hsps::rational avail;
  index_type act;
 public:
  ResourceShortageError(Instance& i,
   index_type r,
   hsps::rational v,
   index_type a,
   hsps::rational at) :
    ExecError(ExecError::error_resource_shortage, at), ins(i), res(r),
    avail(v), act(a) { };
  ResourceShortageError(Instance& i,
   index_type r,
   hsps::rational v,
   index_type a,
   hsps::rational at,
   index_type s) :
    ExecError(ExecError::error_resource_shortage, at, s), ins(i), res(r),
    avail(v), act(a) { };
  virtual ~ResourceShortageError() { };
  const Instance::Resource& resource() { return ins.resources[res]; };
  hsps::rational available() { return avail; };
  const Instance::Action& action() { return ins.actions[act]; };
  virtual ExecError* copy();
  virtual void write(::std::ostream& s) const;
};
class UnachievedGoalError : public ExecError {
  Instance& ins;
  index_type atom;
 public:
  UnachievedGoalError(Instance& i, index_type g, hsps::rational at)
    : ExecError(ExecError::error_unachieved_goal, at), ins(i), atom(g) { };
  UnachievedGoalError(Instance& i, index_type g, hsps::rational at, index_type s)
    : ExecError(ExecError::error_unachieved_goal, at, s), ins(i), atom(g) { };
  virtual ~UnachievedGoalError() { };
  const Instance::Atom& goal() { return ins.atoms[atom]; };
  virtual ExecError* copy();
  virtual void write(::std::ostream& s) const;
};
class RedundantActionWarning : public ExecError {
  Instance& ins;
  index_type act;
 public:
  RedundantActionWarning(Instance& i, index_type a, hsps::rational at) :
    ExecError(ExecError::warning_redundant_action, at), ins(i), act(a) { };
  RedundantActionWarning(Instance& i, index_type a, hsps::rational at, index_type s) :
    ExecError(ExecError::warning_redundant_action, at, s), ins(i), act(a) { };
  virtual ~RedundantActionWarning() { };
  const Instance::Action& action() { return ins.actions[act]; };
  virtual ExecError* copy();
  virtual void write(::std::ostream& s) const;
};
class ExecState : public ProgressionState {
 protected:
  Instance& instance;
  bool_vec atoms;
  amt_vec res;
  struct exec_act {
    index_type act;
    hsps::rational rem;
    index_type step;
    ExecState* start_state;
    exec_act() :
      act(no_such_index), rem(ZERO), step(no_such_index), start_state(0) { };
    exec_act(index_type a, hsps::rational r) :
      act(a), rem(r), step(no_such_index), start_state(0) { };
    exec_act(index_type a, hsps::rational r, index_type s) :
      act(a), rem(r), step(s), start_state(0) { };
    exec_act(const exec_act& e) :
      act(e.act), rem(e.rem), step(e.step), start_state(e.start_state) { };
    exec_act& operator=(const exec_act& e) {
      act = e.act;
      rem = e.rem;
      step = e.step;
      start_state = e.start_state;
    };
  };
  typedef lvector<exec_act> exec_act_vec;
  exec_act_vec actions;
  hsps::rational abs_t;
  hsps::rational delta_t;
  hsps::rational dur;
  int trace_level;
  void apply_conditional_delete_effects
    (Instance::Action& a, const ExecState* start_state, bool_vec& to);
  void active_conditional_add_effects
    (Instance::Action& a, const ExecState* start_state, bool_vec& eff);
 public:
  ExecState(Instance& i);
  ExecState(Instance& i, index_set g);
  ExecState(Instance& i, const bool_vec& g);
  ExecState(const ExecState& s);
  virtual ~ExecState();
  static bool extended_action_definition;
  void set_trace_level(int level);
  virtual hsps::rational delta_cost();
  virtual hsps::rational est_cost();
  virtual bool is_final();
  virtual bool is_max();
  virtual hsps::rational expand(Search& s, hsps::rational bound);
  virtual void store(hsps::rational cost, bool opt);
  virtual void reevaluate();
  virtual int compare(const State& s);
  virtual index_type hash();
  virtual State* new_state(index_set& s);
  virtual State* copy();
  virtual void insert(Plan& p);
  virtual void write_plan(::std::ostream& s);
  virtual void write(::std::ostream& s);
  hsps::rational current_time() const;
  hsps::rational end_time() const;
  void current_atoms(index_set& atms) const;
  const bool_vec& current_atoms() const;
  void current_actions(index_set& acts) const;
  index_type n_current_actions() const;
  void starting_actions(index_set& acts) const;
  void finishing_actions(index_set& acts) const;
  hsps::rational min_delta() const;
  hsps::rational max_delta() const;
  void current_resource_levels
    (amt_vec& avail, amt_vec& in_use) const;
  void current_resource_levels
    (index_type r, hsps::rational& avail, hsps::rational& in_use) const;
  void current_resource_use(amt_vec& res) const;
  bool check_atoms(const index_set& set) const;
  bool check_atoms(const index_set& set, index_set& holds) const;
  bool is_final(ExecErrorSet* errors);
  bool applicable(Instance::Action& act,
    ExecErrorSet* errors,
    index_type step);
  void apply(Instance::Action& act,
      ExecErrorSet* errors,
      index_type step);
  void advance(hsps::rational dt,
        ExecErrorSet* errors);
  void finish(ExecErrorSet* errors);
  void clip(hsps::rational at_t);
  void intersect(const bool_vec& atms);
};
class Timeline {
 public:
  virtual ~Timeline();
  virtual index_type n_intervals() = 0;
  virtual index_type n_points() = 0;
  virtual index_type interval_start_point(index_type i) = 0;
  virtual index_type interval_end_point(index_type i) = 0;
  virtual hsps::rational point_time(index_type i) = 0;
  virtual hsps::rational interval_start_time(index_type i) = 0;
  virtual hsps::rational interval_end_time(index_type i) = 0;
  hsps::rational total_time();
};
class ExecTrace : public Timeline, public lvector<ExecState*> {
  Instance& instance;
 public:
  ExecTrace(Instance& ins);
  ~ExecTrace();
  virtual index_type n_intervals();
  virtual index_type n_points();
  virtual index_type interval_start_point(index_type i);
  virtual index_type interval_end_point(index_type i);
  virtual hsps::rational point_time(index_type i);
  virtual hsps::rational interval_start_time(index_type i);
  virtual hsps::rational interval_end_time(index_type i);
  ExecState* final_state();
  ExecTrace* copy();
  ExecTrace* necessary_trace();
  void peak_resource_use(amt_vec& res);
  bool test_always(index_type p);
  bool test_sometime(index_type p);
  bool test_sometime_after(index_type p, index_type q);
  bool test_sometime_before(index_type p, index_type q);
  bool test_at_most_once(index_type p);
  void extract_always_within(bool_matrix& c, cost_matrix& t);
  void clip_last_state(hsps::rational at_t);
  void write(::std::ostream& s);
};
class BasicTimeline : public Timeline {
 protected:
  cost_vec points;
  bool open_start;
  bool open_end;
  void set_point(hsps::rational t);
  void clip_start(hsps::rational t);
  void clip_end(hsps::rational t);
 public:
  BasicTimeline();
  virtual ~BasicTimeline();
  virtual index_type n_intervals();
  virtual index_type n_points();
  virtual index_type interval_start_point(index_type i);
  virtual index_type interval_end_point(index_type i);
  virtual hsps::rational point_time(index_type i);
  virtual hsps::rational interval_start_time(index_type i);
  virtual hsps::rational interval_end_time(index_type i);
  void write(::std::ostream& s);
};
class ResourceProfile : public BasicTimeline {
 protected:
  Instance& instance;
  index_type res;
  amt_vec avail;
  amt_vec in_use;
  index_set_vec a_start;
  index_set_vec a_finish;
  hsps::rational max_req;
 public:
  ResourceProfile(Instance& ins, index_type r, ExecTrace& trace);
  virtual ~ResourceProfile();
  void set_makespan(hsps::rational t);
  const Name* resource_name() const { return instance.resources[res].name; };
  hsps::rational amount_available(index_type i);
  hsps::rational amount_in_use(index_type i);
  hsps::rational amount_free(index_type i);
  index_type first_use_interval(index_type i);
  index_type first_min_free_interval(index_type i);
  hsps::rational possible_unexpected_loss_to(index_type i);
  hsps::rational min_free_from(index_type i);
  hsps::rational min_free();
  hsps::rational peak_use();
  hsps::rational min_peak_use();
  hsps::rational tolerable_unexpected_loss();
  hsps::rational total_consumption();
  void writeGantt(::std::ostream& s);
  static double GANTT_EXTRA_WIDTH;
  static double GANTT_EXTRA_HEIGHT;
  void write(::std::ostream& s);
};
class Schedule : public Plan {
 public:
  struct step {
    index_type act;
    hsps::rational at;
    index_type track;
    step() : act(no_such_index), at(0), track(no_such_index) { };
    step(index_type a, hsps::rational t) : act(a), at(t), track(no_such_index) { };
    step& operator=(const step& s) {
      act = s.act;
      at = s.at;
      return *this;
    };
    bool operator==(const step& s) {
      return ((act == s.act) && (at == s.at));
    };
  };
  typedef lvector<step> step_vec;
 private:
  Instance& instance;
  step_vec steps;
  hsps::rational end_t;
  index_set action_set;
  index_vec action_vec;
  index_type n_tracks;
  const Name* ann_name;
  bool ann_optimal;
  int trace_level;
  hsps::rational current_t;
  bool finished;
  void insert_step(hsps::rational at, index_type act);
  hsps::rational next_start_time(hsps::rational t) const;
  hsps::rational next_finish_time(hsps::rational t) const;
  hsps::rational last_finish_time() const;
  void compute_action_set_and_vec();
  void assign_tracks();
  enum s_status { s_pending, s_ready, s_executing, s_finished };
  bool construct_minimal_makespan(const index_vec& acts,
      graph& prec,
      const index_set& c,
      hsps::rational& best,
      index_vec& sindex);
 public:
  static bool write_traits;
  Schedule(Instance& i);
  Schedule(const Schedule& s);
  virtual ~Schedule();
  void set_trace_level(int level) { trace_level = level; };
  index_type length() const;
  hsps::rational makespan() const;
  hsps::rational cost() const;
  index_type n_steps() const { return steps.length(); };
  const step_vec& plan_steps() const { return steps; };
  const index_set& plan_actions() const { return action_set; };
  const index_vec& step_actions() const { return action_vec; };
  void step_action_names(name_vec& nv);
  bool step_in_interval(index_type s, hsps::rational i_start, hsps::rational i_end) const;
  index_type step_action(index_type s) const;
  const Name* plan_name() const;
  bool plan_is_optimal() const;
  plan_trait_vec traits;
  const PlanTrait* find_trait(const char* cn);
  virtual void protect(index_type atom);
  virtual void insert(index_type act);
  virtual void advance(hsps::rational delta);
  virtual void end();
  void set_start_time(hsps::rational at);
  void reduce(ExecErrorSet* warnings);
  void clear();
  virtual void set_name(const Name* n);
  virtual void set_optimal(bool o);
  virtual void add_trait(PlanTrait* t);
  virtual void output(Plan& plan) const;
  virtual void output(Plan& plan, const index_vec& act_map) const;
  void write(::std::ostream& s, unsigned int c = Name::NC_DEFAULT) const;
  void write_step_set(::std::ostream& s, const index_set& set) const;
  void write_steps(::std::ostream& s) const;
  void writeXML(::std::ostream& s,
  ExecErrorSet* errors = 0,
  ExecTrace* trace = 0,
  graph* prec = 0,
  index_type id = 0) const;
  void writeGantt(::std::ostream& s) const;
  static double GANTT_UNIT_WIDTH;
  static double GANTT_UNIT_HEIGHT;
  static double GANTT_TEXT_XOFF;
  static double GANTT_TEXT_YOFF;
  static hsps::rational GANTT_TIME_MARK_INTERVAL;
  static bool GANTT_ACTION_NAMES_ON_CHART;
  bool simulate(ExecTrace* trace = 0,
  ExecErrorSet* errors = 0,
  bool finish = false) const;
  bool simulate_low_resolution(ExecTrace* trace = 0,
          ExecErrorSet* errors = 0,
          bool finish = false) const;
  bool simulate(index_set& achieved,
  ExecErrorSet* errors = 0) const;
  bool simulate(amt_vec& rtl) const;
  void deorder(graph& prec) const;
  void deorder(weighted_graph& prec) const;
  void base_precedence_graph(graph& prec) const;
  bool equivalent(const Schedule& s, index_vec* c = 0) const;
  bool schedule(const index_vec& acts,
  const graph& prec,
  index_vec* map = 0);
  bool construct_conflict_free(const index_vec& acts,
          const graph& prec,
          index_set& cs,
          index_vec& map);
  bool construct_minimal_makespan(const index_vec& acts,
      const graph& prec,
      index_vec& map);
  bool random_sequence(index_type ln_max,
         index_type ln_avg,
         bool continue_from_goal,
         ExecTrace* trace,
         RNG& rnd);
};
typedef lvector<Schedule*> plan_vec;
class ScheduleSet : public plan_vec, public PlanSet {
 protected:
  struct ScheduleProperties {
    bool valid;
    ExecTrace* trace;
    index_type n_resources;
    amt_vec total_consumption;
    amt_vec peak_use;
    amt_vec tolerable_loss;
    hsps::rational makespan;
    ScheduleProperties()
      : valid(true), trace(0), n_resources(0), total_consumption(0, 0),
 peak_use(0, 0), tolerable_loss(POS_INF, 0), makespan(0) { };
    ScheduleProperties(index_type n)
      : valid(true), trace(0), n_resources(n), total_consumption(0, n),
 peak_use(0, n), tolerable_loss(POS_INF, n), makespan(0) { };
    bool dominates(const ScheduleProperties& p);
  };
  typedef lvector<ScheduleProperties*> prop_vec;
  Instance& instance;
  prop_vec props;
  int trace_level;
  ScheduleProperties* compute_properties(Schedule* s);
  void cache_properties(index_type i, ScheduleProperties* p);
  bool dominated(const ScheduleProperties& p, prop_vec& pv);
  void dominated(prop_vec& pv, bool_vec& dom);
  bool dominated(const ScheduleProperties& p);
  void replace_schedule_with_properties
    (index_type i, Schedule* s, ScheduleProperties* p);
  void add_schedule_with_properties
    (Schedule* s, ScheduleProperties* p);
 public:
  ScheduleSet(Instance& i);
  ScheduleSet(ScheduleSet& s, const bool_vec& sel);
  ~ScheduleSet();
  void set_trace_level(int level);
  void add_schedule(Schedule* s);
  void add_schedule_if_different(Schedule* s);
  void reduce_plans();
  void filter_invalid_plans();
  void filter_unschedulable_plans();
  void filter_equivalent_plans();
  void add_distinguishing_traits_1();
  void add_distinguishing_traits_2();
  bool common_precedence_constraints(graph& prec);
  bool separating_precedence_constraints
    (ScheduleSet& s, pair_set& d0, pair_set& d1);
  void write_deordered_graphs(::std::ostream& s, bool w_names = true);
  void writeXML(::std::ostream& s);
  virtual Plan* new_plan();
  virtual void output(PlanSet& to);
  virtual void output(PlanSet& to, const bool_vec& s);
  void remove(bool_vec& set);
  void clear();
};
class ScheduleTrait : public PlanTrait {
 protected:
  Schedule* plan;
  ScheduleSet* plan_set;
  bool is_min;
  bool is_max;
  bool is_unique;
  void write_meta_short(::std::ostream& s) const;
  void write_meta_attributes(::std::ostream& s) const;
 public:
  ScheduleTrait(Schedule* p)
    : plan(p), plan_set(0), is_min(false), is_max(false), is_unique(false) { };
  ScheduleTrait(Schedule* p, ScheduleSet* s)
    : plan(p), plan_set(s), is_min(false), is_max(false), is_unique(false) { };
  virtual ~ScheduleTrait();
  void set_min() { is_min = true; };
  void set_max() { is_max = true; };
  void set_unique() { is_unique = true; };
  virtual const PlanTrait* cast_to(const char* class_name) const;
  virtual void write_short(::std::ostream& s) const = 0;
  virtual void write_detail(::std::ostream& s) const;
  virtual void writeXML(::std::ostream& s) const = 0;
};
class EquivalentTo : public ScheduleTrait {
  Schedule* s_eq;
  index_vec cor;
 public:
  EquivalentTo(Schedule* p, ScheduleSet* ss, Schedule* s, const index_vec& c)
    : ScheduleTrait(p, ss), s_eq(s), cor(c) { };
  virtual ~EquivalentTo() { };
  virtual const PlanTrait* cast_to(const char* class_name) const;
  virtual void write_short(::std::ostream& s) const;
  virtual void write_detail(::std::ostream& s) const;
  virtual void writeXML(::std::ostream& s) const;
};
class DerivedFrom : public ScheduleTrait {
  Schedule* s_src;
  pair_set e_prec;
 public:
  DerivedFrom(Schedule* p, ScheduleSet* ss, Schedule* s, const pair_set& e)
    : ScheduleTrait(p, ss), s_src(s), e_prec(e) { };
  DerivedFrom(Schedule* p, ScheduleSet* ss, Schedule* s, const index_pair& e)
    : ScheduleTrait(p, ss), s_src(s) { e_prec.assign_singleton(e); };
  DerivedFrom(Schedule* p, ScheduleSet* ss,
       DerivedFrom* a, const index_vec& m,
       const index_pair& e);
  virtual ~DerivedFrom() { };
  virtual const PlanTrait* cast_to(const char* class_name) const;
  virtual void write_short(::std::ostream& s) const;
  virtual void write_detail(::std::ostream& s) const;
  virtual void writeXML(::std::ostream& s) const;
};
class PlanPrecedenceRelation : public ScheduleTrait {
  graph prec;
 public:
  PlanPrecedenceRelation(Schedule* s, const graph& p)
    : ScheduleTrait(s), prec(p) { };
  PlanPrecedenceRelation(Schedule* s, const graph& p, const index_vec& m)
    : ScheduleTrait(s) { prec.copy_and_rename(p, m); };
  virtual ~PlanPrecedenceRelation() { };
  virtual const PlanTrait* cast_to(const char* class_name) const;
  virtual void write_short(::std::ostream& s) const;
  virtual void writeXML(::std::ostream& s) const;
  const graph& precedence_relation() const { return prec; };
};
class PlanActionOccurs : public ScheduleTrait {
  Instance& instance;
  index_type act;
  index_type n_of_times;
 public:
  PlanActionOccurs(Schedule* p, Instance& i, index_type a, index_type n)
    : ScheduleTrait(p), instance(i), act(a), n_of_times(n) { };
  virtual ~PlanActionOccurs() { };
  virtual const PlanTrait* cast_to(const char* class_name) const;
  virtual void write_short(::std::ostream& s) const;
  virtual void writeXML(::std::ostream& s) const;
};
class PlanStepOrder : public ScheduleTrait {
  Instance& instance;
  index_pair order;
 public:
  PlanStepOrder(Schedule* p, Instance& i, const index_pair& o)
    : ScheduleTrait(p), instance(i), order(o) { };
  virtual ~PlanStepOrder() { };
  virtual const PlanTrait* cast_to(const char* class_name) const;
  virtual void write_short(::std::ostream& s) const;
  virtual void writeXML(::std::ostream& s) const;
  const index_pair& precedence() const { return order; };
};
class PlanFeatureValue : public ScheduleTrait {
 public:
  enum plan_feature_type { makespan,
      cost,
      resource_peak_use,
      resource_total_consumption,
      resource_tolerable_loss };
 private:
  plan_feature_type ftype;
  Instance& instance;
  index_type index;
  hsps::rational value;
 public:
  PlanFeatureValue(Schedule* p,
     plan_feature_type t,
     Instance& i,
     index_type x,
     hsps::rational v) :
    ScheduleTrait(p), ftype(t), instance(i), index(x), value(v) { };
  virtual ~PlanFeatureValue() { };
  virtual const PlanTrait* cast_to(const char* class_name) const;
  virtual void write_short(::std::ostream& s) const;
  virtual void writeXML(::std::ostream& s) const;
};
bool feasible(Instance& ins,
       const index_vec& acts,
       const graph& prec,
       graph_vec* rfps = 0,
       index_type* rff = 0);
bool feasible(Instance& ins,
       const index_vec& acts,
       index_type r,
       graph& uc,
       graph_vec* rfps = 0,
       index_type* rff = 0);
bool feasible(Instance& ins,
       const index_vec& acts,
       index_type r,
       const index_set& a,
       index_type i,
       graph& uc,
       graph_vec* rfps = 0,
       index_type* rff = 0);
bool feasible(Instance& ins,
       const index_vec& acts,
       index_type r,
       const index_set& a,
       index_type i_a,
       const index_set& b,
       index_type i_b,
       hsps::rational c_max,
       graph& uc,
       graph_vec* rfps = 0,
       index_type* rff = 0);
class PlanName : public Name {
  const Name* src;
  const char* desc;
  index_type index;
 public:
  PlanName(const char* s, index_type i)
    : src(0), desc(s), index(i) { };
  PlanName(const Name* n, const char* s, index_type i)
    : src(n), desc(s), index(i) { };
  virtual ~PlanName() { };
  virtual void write(::std::ostream& s, unsigned int c = NC_DEFAULT) const;
};
::std::ostream& operator<<(::std::ostream& s, ExecError::ErrorType t);
::std::ostream& operator<<(::std::ostream& s, ExecError::ErrorSeverity s);
}
#include <list>
namespace hsps {
class SoftInstance : public Instance {
 public:
  struct SoftGoal {
    Name* name;
    index_set atoms;
    hsps::rational weight;
    void* src;
    SoftGoal() : name(0), atoms(EMPTYSET), weight(0), src(0) { };
    SoftGoal& operator=(const SoftGoal& g) {
      name = g.name;
      atoms = g.atoms;
      weight = g.weight;
      src = g.src;
      return *this;
    };
    bool operator==(const SoftGoal& g) const {
      return ((atoms == g.atoms) &&
       (weight == g.weight));
    };
    bool is_sat(const bool* s) const {
      for (index_type k = 0; k < atoms.length(); k++)
 if (!s[atoms[k]]) return false;
      return true;
    };
    bool is_sat_init(const Instance& ins) const {
      for (index_type k = 0; k < atoms.length(); k++)
 if (!ins.atoms[k].init) return false;
      return true;
    };
    bool is_sat(const index_set& s) const {
      for (index_type k = 0; k < atoms.length(); k++)
 if (!s.contains(atoms[k])) return false;
      return true;
    };
  };
  typedef lvector<SoftGoal> soft_goal_vec;
  soft_goal_vec soft;
  index_set hard;
  hsps::rational null_value;
  SoftInstance();
  SoftInstance(Name* n);
  ~SoftInstance() { };
  SoftGoal& new_soft_goal();
  index_type n_soft() const { return soft.length(); };
  index_type n_hard() const { return hard.length(); };
  bool empty_plan_valid();
  hsps::rational empty_plan_value();
  void remap_hard_goals(const index_vec& atom_map);
  void remap_soft_goals(const index_vec& atom_map);
  void compile(Instance& ins);
  void create_decision_problem(const bool_vec& sel, Instance& ins);
  void create_decision_problem(const bool_vec& sel, hsps::rational b, Instance& ins);
  hsps::rational compute_epsilon();
  hsps::rational eval_goal_state(const index_set& s);
  hsps::rational eval_goal_state(const index_set& s, index_set& g);
  hsps::rational eval_plan(Schedule& s);
  void eval_plan_set(ScheduleSet& s, cost_vec& v);
  virtual void write_problem_goal(std::ostream& s) const;
  virtual void write_problem_metric(std::ostream& s) const;
  void write_goal_value_expression(std::ostream& s) const;
  void write_soft_goal_set(std::ostream& s, const index_set& set) const;
  void write_soft_goal_set(std::ostream& s, const bool_vec& set) const;
  virtual void print(std::ostream& s) const;
};
class DecisionProblemEnumerator : public IterativeEnumerator {
  SoftInstance& instance;
  SubsetEnumerator selected;
  Heuristic& h_cost;
  hsps::rational nb_min;
  index_set g_sel;
  index_set a_sel;
  hsps::rational v_sel;
  hsps::rational c_sel;
  hsps::rational nb_sel;
  bool find_next(bool more);
 public:
  DecisionProblemEnumerator(SoftInstance& ins, Heuristic& h, hsps::rational b);
  virtual ~DecisionProblemEnumerator();
  virtual bool first();
  virtual bool next();
  hsps::rational current_value() const;
  hsps::rational current_min_cost() const;
  hsps::rational current_max_cost() const;
  hsps::rational current_min_nb() const;
  hsps::rational current_max_nb() const;
  const index_set& current_soft_goals() const;
  const index_set& current_goal_atoms() const;
  void create_decision_problem(Instance& ins);
};
class MaxValueSearch {
 protected:
  struct option {
    hsps::rational goal_value;
    hsps::rational est_cost;
    index_set goals;
    State* root;
    option() : goal_value(0), est_cost(0), goals(EMPTYSET), root(0) { };
    index_type n_goals() const { goals.length(); };
    hsps::rational est_value() const { return (goal_value - est_cost); };
  };
  typedef std::list<option> option_list;
  typedef option_list::iterator option_p;
  SoftInstance& instance;
  ACF& cost;
  Statistics& stats;
  Result& res;
  MultiSearchAlgorithm* search;
  option_list options;
  hsps::rational lb;
  bool solved_flag;
  int trace_level;
  void insert_option_in_list(const option& o);
  void init_option_list();
  void make_empty_plan();
  virtual void init_option(const index_set& selected, option& o) = 0;
  virtual hsps::rational explore_next_option() = 0;
 public:
  MaxValueSearch(SoftInstance& i, ACF& c, Statistics& s, Result& r);
  MaxValueSearch(SoftInstance& i, ACF& c, Statistics& s, Result& r,
   index_type tt_size, bool use_cc);
  ~MaxValueSearch();
  static index_type print_options_max;
  void print_option_list(std::ostream& s);
  index_type n_options() const { return options.size(); };
  hsps::rational best_option_estimated_value();
  index_type best_option_size();
  void init();
  hsps::rational main();
  bool solved() { return solved_flag; }
};
class MaxNetBenefit : public MaxValueSearch {
  Heuristic& heuristic;
  RegressionResourceState* root_rs;
 protected:
  virtual void init_option(const index_set& selected, option& o);
  virtual hsps::rational explore_next_option();
 public:
  MaxNetBenefit(SoftInstance& i, ACF& c, Statistics& s, Result& r,
  Heuristic& h)
    : MaxValueSearch(i, c, s, r), heuristic(h), root_rs(0)
    { };
  MaxNetBenefit(SoftInstance& i, ACF& c, Statistics& s, Result& r,
  Heuristic& h, index_type tt_size, bool use_cc)
    : MaxValueSearch(i, c, s, r, tt_size, use_cc), heuristic(h), root_rs(0)
    { };
  MaxNetBenefit(SoftInstance& i, ACF& c, Statistics& s, Result& r,
  Heuristic& h, RegressionResourceState* rs)
    : MaxValueSearch(i, c, s, r), heuristic(h), root_rs(rs)
    { };
  MaxNetBenefit(SoftInstance& i, ACF& c, Statistics& s, Result& r,
  Heuristic& h, RegressionResourceState* rs,
  index_type tt_size, bool use_cc)
    : MaxValueSearch(i, c, s, r, tt_size, use_cc), heuristic(h), root_rs(rs)
    { };
  ~MaxNetBenefit() { };
};
}
namespace hsps {
class PDDL_Name;
class PDDL_Base {
 public:
  static bool use_default_function_value;
  static hsps::rational default_function_value;
  static bool use_strict_borrow_definition;
  static bool use_extended_borrow_definition;
  static bool del_before_add_semantics;
  static bool compact_resource_effects;
  static bool compile_away_disjunctive_preconditions;
  static bool check_precondition_consistency;
  static bool compile_away_conditional_effects;
  static bool compile_away_plan_constraints;
  static bool compile_away_object_functions;
  static bool compile_for_validator;
  static bool create_all_atoms;
  static bool create_all_actions;
  static bool number_multiple_action_instances;
  static bool exclude_all_dkel_items;
  static string_set excluded_dkel_tags;
  static string_set required_dkel_tags;
  static bool strict_set_export;
  static bool best_effort;
  static bool write_PDDL31;
  static bool write_warnings;
  static bool write_info;
  static bool write_trace;
  static bool trace_print_context;
  static bool name_instance_by_problem_file;
  static const char* instance_name_prefix;
  enum symbol_class {
    sym_object,
    sym_typename,
    sym_predicate,
    sym_object_function,
    sym_function,
    sym_action,
    sym_variable,
    sym_misc,
    sym_preference,
    sym_set,
    sym_meta_variable
  };
  enum metric_class {
    metric_none,
    metric_makespan,
    metric_minimize,
    metric_maximize
  };
  enum mode_keyword {
    md_none,
    md_start,
    md_end,
    md_all,
    md_init,
    md_pos_goal,
    md_neg_goal
  };
  enum partial_value { p_false, p_true, p_unknown };
  enum expression_class {
    exp_fun,
    exp_list,
    exp_const,
    exp_add,
    exp_sub,
    exp_mul,
    exp_div,
    exp_time,
    exp_preference
  };
  enum relation_type {
    rel_equal,
    rel_greater,
    rel_greater_equal,
    rel_less,
    rel_less_equal
  };
  enum formula_class { fc_false,
         fc_true,
         fc_atom,
         fc_equality,
         fc_negation,
         fc_conjunction,
         fc_disjunction,
         fc_equivalence,
         fc_implication,
         fc_universal,
         fc_existential,
         fc_list
  };
  struct Symbol;
  struct TypeSymbol;
  struct Atom;
  struct FTerm;
  struct FChangeAtom;
  struct SetOf;
  struct ListExpression;
  struct ActionSymbol;
  struct Reference;
  struct IrrelevantItem;
  typedef lvector<TypeSymbol*> type_vec;
  typedef lvector<Atom*> atom_vec;
  typedef lvector<FChangeAtom*> ch_atom_vec;
  typedef lvector<SetOf*> atom_set_vec;
  typedef lvector<Reference*> ref_vec;
  typedef lvector<IrrelevantItem*> irrelevant_vec;
  struct TypeSet : public type_vec {
    TypeSet() : type_vec(0, 0) { };
    TypeSet(const TypeSet& s) : type_vec(s) { };
    TypeSet(TypeSymbol* t) : type_vec(t, 1) { };
    index_type n_elements() const;
    Symbol* get_element(index_type n);
    bool is_object() const;
    bool subtype_or_equal(const TypeSet& s) const;
    bool subtype_or_equal(TypeSymbol* t) const;
    void print(std::ostream& s) const;
    void write_type(std::ostream& s) const;
  };
  struct Symbol {
    symbol_class sym_class;
    char* print_name;
    TypeSet sym_types;
    bool defined_in_problem;
    bool visible;
    Symbol(symbol_class c, char* n)
      : sym_class(c), print_name(n), defined_in_problem(false), visible(true) { };
    Symbol(char* n)
      : sym_class(sym_object), print_name(n), defined_in_problem(false), visible(true) { };
    void print(std::ostream& s) const;
  };
  typedef zero_init_pair<Symbol*> symbol_pair;
  typedef lvector<Symbol*> symbol_vec;
  typedef svector<Symbol*> symbol_set;
  typedef lvector<symbol_pair> symbol_pair_vec;
  static bool extend_substitution(Symbol* out, Symbol* in, symbol_pair_vec& u);
  static bool print_substitution(std::ostream& s, const symbol_pair_vec& u);
  static bool print_inequality(std::ostream& s, const symbol_pair_vec& neq);
  static bool substitution_violates_inequality(const symbol_pair_vec& neq,
            const symbol_pair_vec& u);
  static index_type find_matching_atom(Atom* a, atom_vec& v);
  static index_type find_matching_atom(Atom* a, mode_keyword m, atom_vec& v);
  static index_type find_matching_fluent_atom
    (FChangeAtom* a, mode_keyword m, ch_atom_vec& v);
  struct TypeSymbol : public Symbol {
    symbol_vec elements;
    bool is_base_type;
    TypeSymbol(char* n) : Symbol(sym_typename, n), elements(0, 0),
  is_base_type(false) { };
    void add_element(Symbol* e);
    bool is_object() const { return (strcmp(print_name, "object") == 0); };
    bool subtype_or_equal(TypeSymbol* t) const;
    bool subtype_or_equal(const TypeSet& t) const;
    void print(std::ostream& s) const;
  };
  struct VariableSymbol : public Symbol {
    Symbol* value;
    FTerm* binding;
    VariableSymbol(char* n) : Symbol(sym_variable, n), value(0), binding(0) {};
    bool equality_type_check(Symbol* s);
    void print(std::ostream& s);
  };
  typedef lvector<VariableSymbol*> variable_vec;
  struct ParamSymbol : public Symbol {
    variable_vec param;
    ParamSymbol(symbol_class c, char* n) : Symbol(c, n), param(0, 0) { };
  };
  struct PredicateSymbol : public ParamSymbol {
    bool pos_pre;
    bool neg_pre;
    bool added;
    bool deleted;
    bool locked;
    bool modded;
    ptr_table init;
    ptr_table pos_goal;
    ptr_table neg_goal;
    ptr_table pos_prop;
    ptr_table neg_prop;
    irrelevant_vec irr_ins;
    PredicateSymbol(char* n) : ParamSymbol(sym_predicate, n),
  pos_pre(false), neg_pre(false), added(false), deleted(false),
  locked(false), modded(false), irr_ins(0, 0) { };
    bool is_static() const { return !modded; };
    bool is_equality() const { return (strcmp(print_name, "=") == 0); };
    void instantiate(Instance& ins);
    void initialise_missing(const symbol_vec& p,
       atom_vec* created,
       index_type i = 0);
    void write_prototype(std::ostream& s);
    void print(std::ostream& s);
  };
  struct ObjectFunctionSymbol : public ParamSymbol {
    bool modded;
    ptr_table init;
    ObjectFunctionSymbol(char* n)
      : ParamSymbol(sym_object_function, n), modded(false) { };
    bool is_static() const { return !modded; };
    void print(std::ostream& s);
  };
  struct FunctionSymbol : public ParamSymbol {
    bool modified;
    bool integral;
    bool linear;
    bool conditioned;
    bool increased;
    bool decreased;
    bool assigned;
    bool borrowed;
    ptr_table init;
    FunctionSymbol(char* n) : ParamSymbol(sym_function, n),
  modified(false), integral(true), linear(true), conditioned(false),
  increased(false), decreased(false), assigned(false), borrowed(false)
    { };
    bool is_static() const
    { return !modified; };
    bool is_reusable() const
    { return borrowed && !increased && !decreased && !assigned; };
    bool is_consumable() const
    { return !borrowed && !increased && decreased && !assigned; };
    interval eval_init_bounds(ptr_table* p, index_type i, ListExpression* r);
    void print(std::ostream& s);
  };
  struct AtomBase {
    symbol_vec param;
    mode_keyword at;
    hsps::rational at_time;
    AtomBase() : param(0, 0), at(md_none), at_time(0) { };
    AtomBase(mode_keyword t) : param(0, 0), at(t), at_time(0) { };
    AtomBase(AtomBase* b);
    bool equals(AtomBase& b);
    void free_variables(variable_vec& v);
    bool occurs(Symbol* s);
    void fill_in_args(AtomBase* b);
    void collect_bound_variables(variable_vec& v);
    void insert(ptr_table& t);
    static bool print_bindings;
    void print(std::ostream& s) const;
    void print_instance(std::ostream& s);
  };
  typedef lvector<AtomBase*> atom_base_vec;
  struct Atom : AtomBase {
    PredicateSymbol* pred;
    Atom(PredicateSymbol* p) : pred(p) { };
    Atom(PredicateSymbol* p, mode_keyword t) : AtomBase(t), pred(p) { };
    Atom(PredicateSymbol* p, variable_vec& a, bool as_value)
      : pred(p)
    {
      param.set_length(a.length());
      for (index_type k = 0; k < a.length(); k++)
 param[k] = (as_value ? a[k]->value : a[k]);
    };
    Atom(PredicateSymbol* p, Symbol* a0)
      : pred(p)
    {
      param.append(a0);
    };
    Atom(Atom* a) : AtomBase(a), pred(a->pred) { };
    bool equals(Atom& a);
    bool is_static() const {
      return ((at == md_init) ||
       (at == md_pos_goal) ||
       (at == md_neg_goal) ||
       pred->is_static());
    };
    bool check();
    Instance::Atom* find_prop(Instance& ins, bool neg, bool create);
    void build(Instance& ins, bool neg, index_type p);
    Atom* instantiate_partially();
    partial_value partial_eval(ptr_table* r, index_type p);
    partial_value partial_eval();
    bool initial_value();
    bool instance_of(Atom* a, symbol_pair_vec& u);
    bool instance_of(Atom* a, const symbol_pair_vec& neq, symbol_pair_vec& u);
    bool unify(Atom* a, symbol_pair_vec& u);
    bool unify(Atom* a, const symbol_pair_vec& neq, symbol_pair_vec& u);
    void print(std::ostream& s, bool neg) const;
    void print(std::ostream& s) const { print(s, false); };
  };
  struct CAtom : public Atom {
    symbol_pair_vec neq;
    CAtom(Atom* a) : Atom(a), neq(symbol_pair(0, 0), 0) { };
    CAtom(CAtom* s) : Atom(s), neq(s->neq) { };
    CAtom(const Atom* a, symbol_pair_vec& u);
    CAtom(const Atom* a, symbol_pair_vec& n, symbol_pair_vec& u);
    bool instance_of(Atom* a, symbol_pair_vec& u);
    bool instance_of(Atom* a, const symbol_pair_vec& neq, symbol_pair_vec& u);
    bool instance_of(CAtom* a, symbol_pair_vec& u);
    bool unify(Atom* a, symbol_pair_vec& u);
    bool unify(CAtom* a, symbol_pair_vec& u);
    void print(std::ostream& s);
  };
  typedef lvector<CAtom*> catom_vec;
  struct FTerm : AtomBase {
    ObjectFunctionSymbol* fun;
    FTerm(ObjectFunctionSymbol* f) : fun(f) { };
    bool equals(FTerm& a);
    void print(std::ostream& s) const;
  };
  struct OInitAtom : AtomBase {
    ObjectFunctionSymbol* fun;
    Symbol* val;
    OInitAtom(ObjectFunctionSymbol* f) : fun(f), val(0) { };
    void print(std::ostream& s);
  };
  typedef lvector<OInitAtom*> obj_init_atom_vec;
  struct FInitAtom : AtomBase {
    FunctionSymbol* fun;
    hsps::rational val;
    Instance::resource_ref res;
    FInitAtom(FunctionSymbol* f) : fun(f), val(0) { };
    FInitAtom(FChangeAtom* a);
    bool is_static() const { return fun->is_static(); };
    void print(std::ostream& s);
  };
  typedef lvector<FInitAtom*> fun_init_atom_vec;
  struct Expression;
  typedef lvector<Expression*> exp_vec;
  struct Expression {
    expression_class exp_class;
    Expression(expression_class c) : exp_class(c) { };
    static bool print_nary;
    bool is_static();
    bool is_constant();
    bool is_integral();
    hsps::rational eval_static();
    bool eval_partial(hsps::rational& val);
    interval eval_bounds();
    hsps::rational eval_init();
    hsps::rational eval_delta(ch_atom_vec& incs, ch_atom_vec& decs);
    hsps::rational eval_delta(Symbol* preference, hsps::rational p_value, hsps::rational d_value);
    Expression* copy();
    Expression* simplify();
    void collect_constants(exp_vec& c);
    void mark_functions_in_condition();
    hsps::rational integrify();
    void substitute_for_time(Expression* e);
    Expression* substitute_for_preference(Symbol* n, Expression* e);
    bool equals(Expression* e);
    void print_sum(std::ostream& s, bool grnd);
    void print_product(std::ostream& s, bool grnd);
    void print(std::ostream& s, bool grnd);
  };
  struct ListExpression : public Expression {
    Symbol* sym;
    ListExpression* rest;
    ListExpression(Symbol* s, ListExpression* r) :
      Expression(exp_list), sym(s), rest(r) { };
    bool match(AtomBase* atom);
  };
  struct FunctionExpression : public Expression {
    FunctionSymbol* fun;
    ListExpression* args;
    FunctionExpression(FunctionSymbol* f, ListExpression* a) :
      Expression(exp_fun), fun(f), args(a) { };
    bool match(FChangeAtom* atom);
    hsps::rational eval_delta(ch_atom_vec& incs, ch_atom_vec& decs);
    FChangeAtom* make_atom_base();
  };
  struct ConstantExpression : public Expression {
    hsps::rational val;
    ConstantExpression(hsps::rational v) :
      Expression(exp_const), val(v) { };
  };
  struct TimeExpression : public Expression {
    Expression* time_exp;
    TimeExpression() :
      Expression(exp_time), time_exp(0) { };
    TimeExpression(Expression* e) :
      Expression(exp_time), time_exp(e) { };
  };
  struct BinaryExpression : public Expression {
    Expression* first;
    Expression* second;
    BinaryExpression(expression_class c, Expression* e1, Expression* e2) :
      Expression(c), first(e1), second(e2) { };
  };
  struct PreferenceExpression : public Expression {
    Symbol* name;
    PreferenceExpression(Symbol* n) :
      Expression(exp_preference), name(n) { };
  };
  struct Relation {
    relation_type rel;
    mode_keyword at;
    Expression* first;
    Expression* second;
    Relation(relation_type r, Expression* e1, Expression* e2) :
      rel(r), at(md_none), first(e1), second(e2) { };
    Relation(relation_type r, mode_keyword m, Expression* e1, Expression* e2) :
      rel(r), at(m), first(e1), second(e2) { };
    Expression* match_gteq_constant(FChangeAtom* atom);
    FunctionExpression* match_lteq_fun(FChangeAtom* atom);
    bool is_static();
    partial_value partial_eval();
    void print(std::ostream& s, bool grnd);
  };
  typedef lvector<Relation*> relation_vec;
  struct FChangeAtom : AtomBase {
    FunctionSymbol* fun;
    Expression* val;
    FChangeAtom(FunctionSymbol* f) :
      fun(f), val(0) { };
    FChangeAtom(FunctionSymbol* f, mode_keyword t) :
      AtomBase(t), fun(f), val(0) { };
    FChangeAtom(FChangeAtom* a, hsps::rational v) :
      AtomBase(a), fun(a->fun), val(new ConstantExpression(v)) { };
    bool equals(FChangeAtom& a);
    bool fluent_equals(FChangeAtom& a);
    bool fluent_and_mode_equals(FChangeAtom& a);
    FChangeAtom* find_fluent_equals(ch_atom_vec& vec);
    Instance::Resource* find_resource(Instance& ins);
    void print(std::ostream& s);
  };
  struct Formula {
    formula_class fc;
    Formula(formula_class c) : fc(c) { };
    void rename_variables_1(PDDL_Base::symbol_pair_vec& sub);
    void rename_variables_2(PDDL_Base::symbol_pair_vec& sub);
    void rename_predicates_1(PDDL_Base::symbol_pair_vec& sub);
    void rename_predicates_2(PDDL_Base::symbol_pair_vec& sub);
    Formula* simplify();
    void write_otter(std::ostream& s) const;
    void print(std::ostream& s) const;
    void untype(PDDL_Base* base);
  };
  typedef lvector<Formula*> formula_vec;
  struct AFormula : public Formula, public Atom {
    AFormula(Atom* a) :
      Formula(fc_atom), Atom(a) { };
    AFormula(PredicateSymbol* p) :
      Formula(fc_atom), Atom(p) { };
    AFormula(PredicateSymbol* p, variable_vec& a) :
      Formula(fc_atom), Atom(p, a, false) { };
    void print(std::ostream& s) const;
    void write_otter(std::ostream& s) const;
  };
  struct EqFormula : public Formula {
    Symbol* t1;
    Symbol* t2;
    EqFormula(Symbol* s1, Symbol* s2) :
      Formula(fc_equality), t1(s1), t2(s2) { };
    void write_otter(std::ostream& s) const;
  };
  struct NFormula : public Formula {
    Formula* f;
    NFormula(Formula* g) : Formula(fc_negation), f(g) { };
  };
  struct BFormula : public Formula {
    Formula* f1;
    Formula* f2;
    BFormula(formula_class c, Formula* g1, Formula* g2) :
      Formula(c), f1(g1), f2(g2) { };
  };
  struct CFormula : public Formula {
    formula_vec parts;
    CFormula(formula_class c) : Formula(c), parts(0, 0) { };
    CFormula(formula_class c, Formula* f1, Formula* f2) :
      Formula(c), parts(0, 0)
    {
      parts.append(f1);
      parts.append(f2);
    };
    void add(Formula* f) { parts.append(f); };
    void add(formula_vec& f) { parts.append(f); };
    void write_otter(std::ostream& s) const;
  };
  struct QFormula : public Formula {
    variable_vec vars;
    Formula* f;
    QFormula(formula_class c) : Formula(c), vars(0, 0), f(0) { };
    QFormula(formula_class c, Formula* g) : Formula(c), vars(0, 0), f(g) { };
    QFormula(formula_class c, variable_vec& v, Formula* g) :
      Formula(c), vars(0, 0), f(g)
    {
      for (index_type k = 0; k < v.length(); k++) vars.append(v[k]);
    };
    void add(PDDL_Base::VariableSymbol* v) { vars.append(v); };
    void add(PDDL_Base::variable_vec& v) { vars.append(v); };
    void write_otter(std::ostream& s) const;
  };
  struct TypeConstraint {
    VariableSymbol* var;
    TypeSymbol* typ;
    TypeConstraint(VariableSymbol* v, TypeSymbol* t) : var(v), typ(t) { };
    bool is_true();
    partial_value partial_eval();
    void print(std::ostream& s);
  };
  typedef lvector<TypeConstraint*> type_constraint_vec;
  struct Context {
    variable_vec param;
    atom_vec pos_con;
    atom_vec neg_con;
    type_constraint_vec type_con;
    Context() : param(0, 0), pos_con(0, 0), neg_con(0, 0), type_con(0, 0) { };
    Context(const Context* c) : param(c->param), pos_con(c->pos_con),
  neg_con(c->neg_con), type_con(c->type_con) { };
    bool context_is_static() const;
    bool occurs_in_context(Symbol* s);
    void clear_arguments();
    void set_mode(mode_keyword m);
    bool is_true();
    partial_value partial_eval();
    void print(std::ostream& s);
    void print_assignment(std::ostream& s);
    void untype(PDDL_Base* base);
  };
  struct DKEL_Item : public Context {
    char* item_name;
    Symbol* name;
    string_set item_tags;
    bool defined_in_problem;
    bool included;
    DKEL_Item(char* name) : item_name(name), name(0),
  defined_in_problem(false), included(true) { };
    DKEL_Item(const DKEL_Item* i) : Context(i), item_name(i->item_name),
  name(i->name), item_tags(i->item_tags),
  defined_in_problem(i->defined_in_problem), included(i->included) { };
    bool item_is_included(string_set& ex_tags, string_set& req_tags);
    void print_begin(std::ostream& s);
    void print_end(std::ostream& s);
    void print(std::ostream& s);
    void write_dkel(std::ostream& s);
  };
  struct SetOf : public Context {
    atom_vec pos_atoms;
    atom_vec neg_atoms;
    SetOf() : pos_atoms(0, 0), neg_atoms(0, 0) { };
    SetOf(const SetOf* s)
      : Context(s), pos_atoms(s->pos_atoms), neg_atoms(s->neg_atoms)
    { };
    SetOf(Atom* a)
    { pos_atoms.append(a); };
    SetOf(Atom* a, bool n)
    { if (n) neg_atoms.append(a); else pos_atoms.append(a); };
    bool is_static() const;
    void set_mode(mode_keyword m);
    partial_value partial_eval(bool as_disjunction = false);
    partial_value partial_eval(index_type p, bool as_disjunction = false);
    void instantiate_as_set(Instance& ins, index_set& s);
    void instantiate_as_effect(Instance& ins, index_set& s_add,
          index_set& s_del);
    void instantiate_conditional(Instance& ins, rule_set& s_pos,
     rule_set& s_neg);
    SetOf* instantiate_partially();
    void compile(atom_vec& pos_ins, atom_vec& neg_ins, index_type p);
    void compile_non_static(atom_set_vec& ins, index_type p);
    void print(std::ostream& s);
    void print_as_disjunction(std::ostream& s);
    void build_set(Instance& ins, index_set& s, index_type p);
    void build_effect(Instance& ins, index_set& s_add, index_set& s_del,
        index_type p);
    void build_conditional(Instance& ins, rule_set& s_pos, rule_set& s_neg,
      index_type p);
  };
  struct QCNumericEffect : public Context {
    FChangeAtom* atom;
    QCNumericEffect() : atom(0) { };
    QCNumericEffect(FChangeAtom* a) : atom(a) { };
    void print(std::ostream& s);
  };
  typedef lvector<QCNumericEffect*> qc_numeric_effect_vec;
  enum set_constraint_keyword { sc_at_least, sc_at_most, sc_exactly };
  struct SetConstraint : public DKEL_Item {
    set_constraint_keyword sc_type;
    index_type sc_count;
    atom_vec pos_atoms;
    atom_vec neg_atoms;
    atom_set_vec atom_sets;
    SetConstraint() : DKEL_Item(":invariant"), sc_type(sc_at_least),
  sc_count(0), pos_atoms(0, 0), neg_atoms(0, 0), atom_sets(0, 0) { };
    SetConstraint(const DKEL_Item* item) : DKEL_Item(item),
  sc_type(sc_at_least), sc_count(0), pos_atoms(0, 0), neg_atoms(0, 0),
  atom_sets(0, 0) { };
    void build(Instance& ins, index_type p);
    void instantiate(Instance& ins);
    void print(std::ostream& s);
    void write_dkel(std::ostream& s);
    void untype(PDDL_Base* base);
  };
  struct InvariantFormula : public DKEL_Item {
    Formula* f;
    InvariantFormula(Formula* g)
      : DKEL_Item(":invariant"), f(g) { };
    InvariantFormula(const DKEL_Item* item, Formula* g)
      : DKEL_Item(item), f(g) { };
    void write_dkel(std::ostream& s);
    void untype(PDDL_Base* base);
  };
  struct Reference : public AtomBase {
    Symbol* name;
    bool neg;
    bool has_args;
    index_set index;
    Reference(Symbol* n) : name(n), neg(false), has_args(true) { };
    Reference(Symbol* n, bool ng, bool ha)
      : name(n), neg(ng), has_args(ha) { };
    bool match(symbol_vec& args);
    bool match(variable_vec& args);
    void* find_action();
    void find(const name_vec& names, index_set& ind);
    Reference* instantiate_partially();
    void print(std::ostream& s);
  };
  struct IrrelevantItem : public DKEL_Item {
    Reference* entity;
    IrrelevantItem() : DKEL_Item(":irrelevant"), entity(0) { };
    bool match(symbol_vec& args);
    bool match(variable_vec& args);
    IrrelevantItem* instantiate_partially();
    void print(std::ostream& s);
    void write_dkel(std::ostream& s);
  };
  struct SequentialTaskNet : public Context {
    ref_vec tasks;
    ActionSymbol* abs_act;
    SequentialTaskNet() : tasks(0, 0), abs_act(0) { };
    void print(std::ostream& s);
  };
  typedef lvector<SequentialTaskNet*> task_net_vec;
  struct SetSymbol : public Symbol {
    ptr_table set_table;
    lvector<index_set*> sets;
    name_vec names;
    SetSymbol(char* n) : Symbol(sym_set, n), sets(0, 0), names(0, 0) { };
  };
  struct SetName : public AtomBase {
    SetSymbol* sym;
    SetName(SetSymbol* s) : sym(s) { };
    index_set* find();
    SetName* instantiate_partially();
    void print(std::ostream& s);
    void print_instance(std::ostream& s);
  };
  struct ActionSymbol : public ParamSymbol {
    atom_vec pos_pre;
    atom_vec neg_pre;
    atom_set_vec set_pre;
    atom_set_vec dis_pre;
    relation_vec num_pre;
    atom_vec adds;
    atom_vec dels;
    atom_set_vec set_eff;
    atom_vec cons;
    atom_set_vec cond_eff;
    atom_vec locks;
    atom_vec enables;
    ch_atom_vec reqs;
    ch_atom_vec incs;
    ch_atom_vec decs;
    ch_atom_vec fass;
    qc_numeric_effect_vec qc_incs;
    qc_numeric_effect_vec qc_decs;
    qc_numeric_effect_vec qc_fass;
    Expression* dmin;
    Expression* dmax;
    irrelevant_vec irr_ins;
    ref_vec refs;
    task_net_vec exps;
    ptr_table instances;
    SetName* part;
    const char* assoc;
    ActionSymbol(char* n) : ParamSymbol(sym_action, n), pos_pre(0, 0),
  neg_pre(0, 0), set_pre(0, 0), dis_pre(0, 0), num_pre(0, 0),
  adds(0, 0), dels(0, 0), set_eff(0, 0), cons(0, 0), cond_eff(0, 0),
  locks(0, 0), enables(0, 0), reqs(0, 0), incs(0, 0), decs(0, 0),
  fass(0, 0), qc_incs(0, 0), qc_decs(0, 0), qc_fass(0, 0), dmin(0),
  dmax(0), irr_ins(0, 0), refs(0, 0), exps(0, 0), part(0), assoc(0) { };
    void build(Instance& ins, index_type p, Expression* cost_exp);
    Instance::Action& build_action(Instance& ins,
       PDDL_Name* name,
       index_type& count,
       const index_set& pre,
       const index_set& add,
       const index_set& del,
       const index_set& lck,
       const index_cost_vec& r_use,
       const index_cost_vec& r_cons,
       hsps::rational dmin,
       hsps::rational dmax,
       hsps::rational dur,
       hsps::rational cost);
    void build_actions_with_dc(Instance& ins,
          PDDL_Name* name,
          index_type& count,
          const index_set& pre,
          const index_set& add,
          const index_set& del,
          const index_set& lck,
          const index_cost_vec& r_use,
          const index_cost_vec& r_cons,
          hsps::rational dmin,
          hsps::rational dmax,
          hsps::rational dur,
          hsps::rational cost,
          const index_set_vec& dc,
          index_vec& s,
          index_type p);
    void build_actions_with_dc(Instance& ins,
          PDDL_Name* name,
          index_type& count,
          const index_set& pre,
          const index_set& add,
          const index_set& del,
          const index_set& lck,
          const index_cost_vec& r_use,
          const index_cost_vec& r_cons,
          hsps::rational dmin,
          hsps::rational dmax,
          hsps::rational dur,
          hsps::rational cost,
          const index_set_vec& dc);
    void build_actions_with_dc_and_ce(Instance& ins,
          PDDL_Name* name,
          index_type& count,
          const index_set& pre,
          const index_set& add,
          const index_set& del,
          const index_set& lck,
          const index_cost_vec& r_use,
          const index_cost_vec& r_cons,
          hsps::rational dmin,
          hsps::rational dmax,
          hsps::rational dur,
          hsps::rational cost,
          const index_set_vec& dc,
          const rule_set& pce,
          const rule_set& nce,
          const bool_vec& ece);
    index_type param_index(VariableSymbol* p);
    void get_param_inequalities(symbol_pair_vec& neq);
    void set_arguments(const symbol_vec& args);
    void set_arguments(const ptr_table::key_vec& args);
    void clear_arguments();
    void* find_instance();
    bool is_abstract();
    void post_process();
    void instantiate(Instance& ins, Expression* cost_exp);
    void write_prototype(std::ostream& s);
    void print(std::ostream& s);
    void untype(PDDL_Base* base);
  };
  struct InputPlanStep {
    Reference* act;
    hsps::rational start_time;
    InputPlanStep() : act(0), start_time(0) { };
    InputPlanStep(Reference* a, hsps::rational t) : act(a), start_time(t) { };
  };
  struct InputPlan {
    Symbol* name;
    bool is_opt;
    lvector<InputPlanStep*> steps;
    InputPlan() : name(0), is_opt(false), steps(0, 0) { };
    bool export_to_instance(Instance& ins, const index_vec& map, Plan& p);
    void print(std::ostream& s);
  };
  struct HTableEntry {
    atom_vec atoms;
    bool_vec neg;
    hsps::rational cost;
    bool opt;
    HTableEntry() : atoms(0, 0), neg(false, 0), cost(0), opt(false) { };
  };
  struct SimpleReferenceSet : public Context {
    Reference* ref;
    SimpleReferenceSet(Reference* r) : ref(r) { };
    bool build(const name_vec& names, index_set& set, index_type p);
    void print(std::ostream& s);
  };
  typedef lvector<SimpleReferenceSet*> refs_vec;
  struct ReferenceSet : public Context {
    refs_vec refs;
    Symbol* name;
    ReferenceSet() : refs(0, 0), name(0) { };
    void add(SimpleReferenceSet* ref) { refs.append(ref); };
    void build(const name_vec& names, index_set_vec& sets, index_type p);
    void print(std::ostream& s);
  };
  struct CPG {
    atom_vec atoms;
    index_vec atom_first_arg;
    bool_vec neg;
    symbol_vec args;
    type_vec arg_types;
    CPG() : atoms(0, 0), neg(false, 0), args(0, 0), arg_types(0, 0) { };
    CPG(CPG& g, index_vec& s);
    void make_key(ptr_table::key_vec& key);
    void make_typed_key(ptr_table::key_vec& key);
    void make_parameters(variable_vec& params);
    ListExpression* make_argument_list(index_type first);
    void add_asserting_effects(ActionSymbol* act,
          PredicateSymbol* p,
          bool p_val,
          PredicateSymbol* g,
          FunctionSymbol* f,
          Expression* f_val,
          bool strict);
    void add_destroying_effects(ActionSymbol* act,
    ParamSymbol* pf,
    PredicateSymbol* p,
    bool p_val,
    PredicateSymbol* g,
    FunctionSymbol* f,
    Expression* f_val,
    bool strict);
    bool initial_value();
    void add_asserting_effects(index_type c_atom,
          ActionSymbol* act,
          index_type c_eff,
          bool_vec& sat,
          PredicateSymbol* p,
          bool p_val,
          PredicateSymbol* g,
          FunctionSymbol* f,
          Expression* f_val,
          symbol_pair_vec& eq,
          symbol_pair_vec& neq,
          bool strict);
    void add_propositional_effect(ActionSymbol* act,
      PredicateSymbol* p, bool p_val,
      index_type c_atom, Atom* a_eff,
      bool strict);
    void add_fluent_effect(ActionSymbol* act,
      FunctionSymbol* f, Expression* f_val,
      index_type c_atom, Atom* a_eff);
    void add_effect_conditions(Context* e, ParamSymbol* pf, bool_vec& sat,
          symbol_vec& subs, symbol_pair_vec& eq,
          symbol_pair_vec& neq);
  };
  enum goal_class { goal_pos_atom, goal_neg_atom, goal_relation, goal_task,
      goal_conjunction, goal_disjunction, goal_forall,
      goal_exists, goal_always, goal_sometime,
      goal_at_most_once, goal_within, goal_always_within,
      goal_sometime_before, goal_sometime_after };
  struct Goal {
    goal_class g_class;
    Goal(goal_class c) : g_class(c) { };
    bool is_state();
    bool is_propositional();
    bool is_singular();
    bool makeCPG(CPG& g);
    bool makeCPG(CPG& g, index_vec& s);
    void instantiate(Instance& ins, hsps::rational deadline);
    void instantiate(Instance& ins, index_set& set, Symbol* p, index_type i);
    void print(std::ostream& s);
  };
  typedef lvector<Goal*> goal_vec;
  struct AtomicGoal : public Goal {
    Atom* atom;
    AtomicGoal(Atom* a, bool neg)
      : Goal(neg ? goal_neg_atom : goal_pos_atom), atom(a) { };
    void print(std::ostream& s);
  };
  struct NumericGoal : public Goal {
    Relation* rel;
    NumericGoal(Relation* r) : Goal(goal_relation), rel(r) { };
    void print(std::ostream& s);
  };
  struct TaskGoal : public Goal {
    Reference* task;
    TaskGoal(Reference* r) : Goal(goal_task), task(r) { };
    void print(std::ostream& s);
  };
  struct ConjunctiveGoal : public Goal {
    goal_vec goals;
    ConjunctiveGoal() : Goal(goal_conjunction), goals(0, 0) { };
    ConjunctiveGoal(goal_class gc) : Goal(gc), goals(0, 0) { };
    void print(std::ostream& s);
  };
  struct DisjunctiveGoal : public ConjunctiveGoal {
    DisjunctiveGoal() : ConjunctiveGoal(goal_disjunction) { };
    void print(std::ostream& s);
  };
  struct QuantifiedGoal : public Goal, public Context {
    Goal* goal;
    QuantifiedGoal() : Goal(goal_forall), goal(0) { };
    QuantifiedGoal(goal_class gc) : Goal(gc), goal(0) { };
    void print(std::ostream& s);
  };
  struct SimpleSequenceGoal : public Goal {
    Goal* constraint;
    SimpleSequenceGoal(goal_class c, Goal* g) : Goal(c), constraint(g) { };
    void print(std::ostream& s);
  };
  struct TriggeredSequenceGoal : public Goal {
    Goal* trigger;
    Goal* constraint;
    TriggeredSequenceGoal(goal_class c, Goal* t, Goal* g)
      : Goal(c), trigger(t), constraint(g) { };
    void print(std::ostream& s);
  };
  struct DeadlineGoal : public Goal {
    Goal* goal;
    hsps::rational at;
    DeadlineGoal(hsps::rational t, Goal* g) : Goal(goal_within), goal(g), at(t) { };
    void print(std::ostream& s);
  };
  struct TriggeredDeadlineGoal : public Goal {
    Goal* trigger;
    Goal* goal;
    hsps::rational delay;
    TriggeredDeadlineGoal(Goal* t, hsps::rational d, Goal* g)
      : Goal(goal_always_within), trigger(t), delay(d), goal(g) { };
    void print(std::ostream& s);
  };
  struct Preference {
    Symbol* name;
    Goal* goal;
    Preference() : name(0), goal(0) { };
    Preference(Symbol* n) : name(n), goal(0) { };
    Preference(Symbol* n, Goal* g) : name(n), goal(g) { };
    bool is_state() { return goal->is_state(); };
    bool is_propositional() { return goal->is_propositional(); };
    hsps::rational value(metric_class metric_type, Expression* m);
    void instantiate(SoftInstance& ins,
       metric_class metric_type,
       Expression* m);
    void print(std::ostream& s);
  };
  typedef lvector<Preference*> preference_vec;
  char* domain_name;
  char* problem_name;
  char* domain_file;
  char* problem_file;
  bool ready_to_instantiate;
  char* problem_file_basename();
  char* enum_problem_filename(const char* s, index_type i);
  StringTable& tab;
  type_vec dom_types;
  type_vec dom_base_types;
  TypeSymbol* dom_top_type;
  symbol_vec dom_constants;
  PredicateSymbol* dom_eq_pred;
  PredicateSymbol* dom_assign_pred;
  Symbol* dom_undefined_obj;
  static PredicateSymbol* current_eq_predicate;
  lvector<PredicateSymbol*> dom_predicates;
  lvector<ObjectFunctionSymbol*> dom_object_functions;
  lvector<FunctionSymbol*> dom_functions;
  lvector<ActionSymbol*> dom_actions;
  lvector<SetConstraint*> dom_sc_invariants;
  lvector<InvariantFormula*> dom_f_invariants;
  lvector<IrrelevantItem*> dom_irrelevant;
  atom_vec dom_init;
  obj_init_atom_vec dom_obj_init;
  fun_init_atom_vec dom_fun_init;
  goal_vec dom_goals;
  preference_vec dom_preferences;
  ref_vec goal_tasks;
  metric_class metric_type;
  Expression* metric;
  hsps::rational serial_length;
  hsps::rational parallel_length;
  lvector<InputPlan*> input_plans;
  lvector<HTableEntry*> h_table;
  lvector<ReferenceSet*> input_sets;
  lvector<SetSymbol*> partitions;
  static ActionSymbol* src_action_symbol(ptr_pair* p);
  TypeSymbol* find_type(const char* name);
  PredicateSymbol* find_predicate(const char* name);
  FunctionSymbol* find_function(const char* name);
  bool find_initial_fact(const char* pname, const symbol_vec& arg);
  hsps::rational find_function_value(const char* fname, const symbol_vec& arg);
  index_type find_element_satisfying(const symbol_vec& elements,
         const char* pname,
         symbol_vec& arg,
         index_type element_arg_p);
  void find_elements_satisfying(const symbol_vec& elements,
    const char* pname,
    symbol_vec& arg,
    index_type element_arg_p,
    index_set& sats);
  Atom* goal_to_atom(Goal* g);
  bool goal_to_atom_vec(Goal* g, atom_vec& av);
  PDDL_Base(StringTable& t);
  ~PDDL_Base();
  void set_variable_type(variable_vec& vec, TypeSymbol* t);
  void set_variable_type(variable_vec& vec, const TypeSet& t);
  void set_type_type(type_vec& vec, TypeSymbol* t);
  void set_constant_type(symbol_vec& vec, TypeSymbol* t);
  void clear_context(variable_vec& vec);
  void clear_context(variable_vec& vec, index_type n_min, index_type n_max);
  bool merge_type_vectors(type_vec& v0, type_vec& v1);
  void make_parameters(type_vec& t, const char* prefix, variable_vec& v);
  Atom* make_atom_from_prop(ptr_pair& src, bool& neg);
  Symbol* gensym(symbol_class c, const char* p, const TypeSet& t);
  Symbol* gensym(symbol_class c, const char* p, TypeSymbol* t);
  Symbol* gensym_i(symbol_class c, const char* p, index_type i, TypeSymbol* t);
  Symbol* gensym_s(symbol_class c, const char* p, const Symbol* s, TypeSymbol* t);
  Symbol* gensym_n(symbol_class c, const char* p, const Name* n, TypeSymbol* t);
  void new_variable_substitution(Atom* a,
     symbol_pair_vec& u,
     symbol_pair_vec& new_u);
  Atom* new_meta_atom(PredicateSymbol* p);
  CAtom* new_CAtom(Atom* a, symbol_pair_vec& u);
  CAtom* new_CAtom(Atom* a, symbol_pair_vec& n, symbol_pair_vec& u);
  void extend_cc(CAtom* l, catom_vec& m, catom_vec& nm,
   lvector< swapable_pair<catom_vec> >& x,
   index_type d);
  void find_cc();
  void post_process();
  void instantiate(Instance& ins);
  void instantiate_soft(SoftInstance& ins);
  void instantiate_atom_set(Instance& ins, atom_vec& a, index_set& s);
  index_type n_plans() const { return input_plans.length(); };
  bool export_plan(index_type i, Instance& ins, const index_vec& map, Plan& p);
  bool export_plan(index_type i, Instance& ins, Plan& p);
  void export_heuristic(Instance& ins,
   const index_vec& map,
   bool opt_maximize,
   Heuristic& h);
  void export_sets(const name_vec& names, index_set_vec& sets);
  void export_action_partitions(name_vec& names, index_set_vec& sets);
  void lift_DKEL_Items(const Instance& ins);
  PredicateSymbol* find_type_predicate(Symbol* type_sym);
  void untype();
  void compile_preferences();
  void compile_constraints_1();
  void compile_constraints_2();
  void select_preferences(const bool_vec& sel);
  void metric_to_goal(hsps::rational bound);
  void compile_set_conditions_and_effects();
  void compile_object_functions();
  Expression* replace_violations_1(Expression* exp,
       CPG* cpg[],
       FunctionSymbol* f_violated[]);
  Goal* compile_constraint_1(Goal* g, index_type i, const Symbol* n,
        symbol_vec& aut_states, index_type n_ra);
  AtomicGoal* make_automaton_type_a(CPG& f, index_type i, const Symbol* n,
        symbol_vec& aut_state, index_type n_ra);
  AtomicGoal* make_automaton_type_e(CPG& f, index_type i, const Symbol* n,
        symbol_vec& aut_state, index_type n_ra);
  AtomicGoal* make_automaton_type_o(CPG& f, index_type i, const Symbol* n,
        symbol_vec& aut_state, index_type n_ra);
  AtomicGoal* make_automaton_type_sb(CPG& f, CPG& g,
         index_type i, const Symbol* n,
         symbol_vec& aut_state, index_type n_ra);
  AtomicGoal* make_automaton_type_sa(CPG& f, CPG& g,
         index_type i, const Symbol* n,
         symbol_vec& aut_state, index_type n_ra);
  void make_automaton_transition(Symbol* s_from,
     Symbol* s_to,
     bool is_accept,
     CPG* f, bool neg_f,
     CPG* g, bool neg_g,
     PredicateSymbol* p_state,
     PredicateSymbol* p_accept,
     PredicateSymbol* p_synch);
  void add_precondition_formula(ActionSymbol* a, CPG* f, bool is_neg);
  Goal* compile_constraint_2(Goal* g, const Symbol* n);
  Goal* compile_always_constraint(SimpleSequenceGoal* g, const Symbol* n);
  Goal* compile_sometime_constraint(SimpleSequenceGoal* g, const Symbol* n);
  Goal* compile_at_most_once_constraint(SimpleSequenceGoal* g,
     const Symbol* n);
  Goal* compile_sometime_before_constraint(TriggeredSequenceGoal* g,
        const Symbol* n);
  void compile_set_conditions_and_effects(ActionSymbol* act);
  void compile_set_conditions_and_effects(ActionSymbol* act,
       variable_vec& i_param,
       variable_vec& d_param,
       index_type p);
  Atom* make_binding_atom(VariableSymbol* v);
  void compile_object_functions(ActionSymbol* act, Symbol* undefined_value);
  void compile_object_functions_for_validator(ActionSymbol* act);
  Goal* compile_object_functions(Goal* g);
  void write_declarations(std::ostream& s);
  void write_action(std::ostream& s, ActionSymbol* act);
  void write_set_precondition(std::ostream& s, SetOf* set);
  void write_disjunctive_set_precondition(std::ostream& s, SetOf* set);
  void write_set_effect(std::ostream& s, SetOf* set);
  void write_QCN_effect(std::ostream& s, const char* effect_type, QCNumericEffect* qcn);
  void write_objects(std::ostream& s, bool defined_in_problem);
  void write_init(std::ostream& s);
  void write_goal(std::ostream& s);
  void write_metric(std::ostream& s);
  void write_dkel_items(std::ostream& s, bool defined_in_problem);
  void write_domain_begin(std::ostream& s);
  void write_problem_begin(std::ostream& s);
  void write_end(std::ostream& s);
  void write_dkel_domain(std::ostream& s, bool leave_open);
  void write_dkel_problem(std::ostream& s, bool leave_open);
  void write_plans(std::ostream& s);
  void write_heuristic_table(std::ostream& s);
  void write_sets(std::ostream& s);
  void print(std::ostream& s);
};
class InstanceName : public Name {
  char* domain_name;
  char* problem_name;
 public:
  InstanceName(char* d, char* p) : domain_name(d), problem_name(p) { };
  virtual ~InstanceName() { };
  virtual void write(std::ostream& s, unsigned int c) const;
  virtual const Name* cast_to(const char* cname) const;
};
class PDDL_Name : public Name {
 protected:
  bool neg;
  PDDL_Base::Symbol* sym;
  PDDL_Base::symbol_vec arg;
  bool vis;
  bool_vec avis;
 public:
  static char catc;
  static bool obscure_symbol_names;
  PDDL_Name(PDDL_Base::Symbol* s)
    : neg(false), sym(s), arg(0, 0), vis(true), avis(true, 0) { };
  PDDL_Name(PDDL_Base::Symbol* s, bool n)
    : neg(n), sym(s), arg(0, 0), vis(true), avis(true, 0) { };
  PDDL_Name(PDDL_Base::Symbol* s, PDDL_Base::symbol_vec a, bool n)
    : neg(n), sym(s), arg(a), vis(true), avis(true, a.length()) { };
  PDDL_Name(PDDL_Base::Symbol* s, PDDL_Base::variable_vec a, bool n);
  void add(PDDL_Base::Symbol* s);
  void add(PDDL_Base::Symbol* s, bool v);
  PDDL_Base::Symbol* symbol() { return sym; };
  PDDL_Base::symbol_vec& args() { return arg; };
  index_type argc() { return arg.length(); };
  bool is_neg() { return neg; };
  virtual ~PDDL_Name() { };
  virtual void write(std::ostream& s, unsigned int c) const;
  virtual const Name* cast_to(const char* cname) const;
};
class Numbered_PDDL_Name : public PDDL_Name {
  index_type copy;
 public:
  Numbered_PDDL_Name(PDDL_Base::Symbol* sym, index_type c)
    : PDDL_Name(sym), copy(c) { };
  Numbered_PDDL_Name(PDDL_Name* n, index_type c);
  virtual ~Numbered_PDDL_Name() { };
  virtual void write(std::ostream& s, unsigned int c) const;
};
}
#include <sstream>
typedef union {
  hsps::StringTable::Cell* sym;
  hsps::PDDL_Base::Expression* exp;
  hsps::PDDL_Base::ListExpression* lst;
  hsps::PDDL_Base::Relation* rel;
  hsps::PDDL_Base::Goal* goal;
  hsps::PDDL_Base::Formula* ff;
  hsps::PDDL_Base::mode_keyword tkw;
  hsps::PDDL_Base::relation_type rkw;
  hsps::PDDL_Base::set_constraint_keyword sckw;
  hsps::rational::XR rval;
  int ival;
  char* sval;
} yy_PDDL_Parser_stype;
class PDDL_Parser : public hsps::PDDL_Base
{
public:
enum YY_PDDL_Parser_ENUM_TOKEN { YY_PDDL_Parser_NULL_TOKEN=0
 ,TK_OPEN=258
 ,TK_CLOSE=259
 ,TK_OPEN_SQ=260
 ,TK_CLOSE_SQ=261
 ,TK_GREATER=262
 ,TK_GREATEQ=263
 ,TK_LESS=264
 ,TK_LESSEQ=265
 ,TK_COLON=266
 ,TK_HASHT=267
 ,TK_EQ=268
 ,TK_HYPHEN=269
 ,TK_PLUS=270
 ,TK_MUL=271
 ,TK_DIV=272
 ,TK_UMINUS=273
 ,TK_NEW_SYMBOL=274
 ,TK_OBJ_SYMBOL=275
 ,TK_TYPE_SYMBOL=276
 ,TK_PRED_SYMBOL=277
 ,TK_OBJFUN_SYMBOL=278
 ,TK_FUN_SYMBOL=279
 ,TK_VAR_SYMBOL=280
 ,TK_ACTION_SYMBOL=281
 ,TK_MISC_SYMBOL=282
 ,TK_KEYWORD=283
 ,TK_NEW_VAR_SYMBOL=284
 ,TK_PREFERENCE_SYMBOL=285
 ,TK_SET_SYMBOL=286
 ,TK_FLOAT=287
 ,TK_INT=288
 ,TK_STRING=289
 ,KW_REQS=290
 ,KW_CONSTANTS=291
 ,KW_PREDS=292
 ,KW_FUNS=293
 ,KW_TYPES=294
 ,KW_DEFINE=295
 ,KW_DOMAIN=296
 ,KW_ACTION=297
 ,KW_PROCESS=298
 ,KW_EVENT=299
 ,KW_ARGS=300
 ,KW_PRE=301
 ,KW_COND=302
 ,KW_AT_START=303
 ,KW_AT_END=304
 ,KW_OVER_ALL=305
 ,KW_EFFECT=306
 ,KW_INVARIANT=307
 ,KW_DURATION=308
 ,KW_AND=309
 ,KW_OR=310
 ,KW_EXISTS=311
 ,KW_FORALL=312
 ,KW_IMPLY=313
 ,KW_NOT=314
 ,KW_WHEN=315
 ,KW_EITHER=316
 ,KW_PROBLEM=317
 ,KW_FORDOMAIN=318
 ,KW_OBJECTS=319
 ,KW_INIT=320
 ,KW_GOAL=321
 ,KW_LENGTH=322
 ,KW_SERIAL=323
 ,KW_PARALLEL=324
 ,KW_METRIC=325
 ,KW_MINIMIZE=326
 ,KW_MAXIMIZE=327
 ,KW_DURATION_VAR=328
 ,KW_TOTAL_TIME=329
 ,KW_INCREASE=330
 ,KW_DECREASE=331
 ,KW_SCALE_UP=332
 ,KW_SCALE_DOWN=333
 ,KW_ASSIGN=334
 ,KW_TAG=335
 ,KW_NAME=336
 ,KW_VARS=337
 ,KW_SET_CONSTRAINT=338
 ,KW_SETOF=339
 ,KW_AT_LEAST_N=340
 ,KW_AT_MOST_N=341
 ,KW_EXACTLY_N=342
 ,KW_CONTEXT=343
 ,KW_FORMULA=344
 ,KW_IRRELEVANT=345
 ,KW_PLAN=346
 ,KW_HEURISTIC=347
 ,KW_OPT=348
 ,KW_INF=349
 ,KW_FACT=350
 ,KW_SET=351
 ,KW_EXPANSION=352
 ,KW_TASKS=353
 ,KW_PREFERENCE=354
 ,KW_VIOLATED=355
 ,KW_WITHIN=356
 ,KW_ASSOC=357
 ,KW_CONSTRAINTS=358
 ,KW_ALWAYS=359
 ,KW_SOMETIME=360
 ,KW_AT_MOST_ONCE=361
 ,KW_SOMETIME_BEFORE=362
 ,KW_SOMETIME_AFTER=363
 ,KW_ALWAYS_WITHIN=364
 ,KW_IFF=365
 ,KW_FALSE=366
 ,KW_TRUE=367
 ,KW_NUMBER=368
 ,KW_UNDEFINED=369
     };
public:
 int yyparse(void);
 virtual void log_error(char *msg) = 0;
 virtual int next_token() = 0;
 yy_PDDL_Parser_stype yylval;
 int yynerrs;
 int yychar;
public:
 int yydebug;
public:
 PDDL_Parser(hsps::StringTable& t);
public:
 public: virtual std::ostream& at_position(std::ostream& s) = 0; virtual char* current_file() = 0; bool error_flag; private: hsps::PDDL_Base::variable_vec current_param; hsps::index_vec stored_n_param; hsps::PDDL_Base::TypeSet current_type_set; hsps::index_type last_n_functions; hsps::PDDL_Base::AtomBase* current_atom; hsps::PDDL_Base::atom_base_vec current_atom_stack; hsps::PDDL_Base::Context* current_context; hsps::lvector<Context*> stored_context; hsps::PDDL_Base::DKEL_Item* current_item; hsps::lvector<ConjunctiveGoal*> current_goal; hsps::PDDL_Base::Symbol* current_preference_name; hsps::PDDL_Base::HTableEntry* current_entry; char* current_plan_file; hsps::index_type n_plans_in_current_file;
};
typedef struct yy_buffer_state *YY_BUFFER_STATE;
class PDDL_Scanner
{
 private:
 char *yy_c_buf_p;
 char yy_hold_char;
 int yy_n_chars;
 int yy_init;
 int yy_start;
 int yy_did_buffer_switch_on_eof;
 private:
 void yy_initialize();
 int input();
 int yyinput() {return input();};
 int yy_get_next_buffer();
 void yyunput( char c, char *buf_ptr );
 long yy_get_previous_state_ ( void );
 long yy_try_NUL_trans_ ( long current_state_ );
 protected:
 YY_BUFFER_STATE YY_CURRENT_BUFFER;
 void yyrestart ( FILE *input_file );
 void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer );
 void yy_load_buffer_state( void );
 YY_BUFFER_STATE yy_create_buffer( FILE *file, int size );
 void yy_delete_buffer( YY_BUFFER_STATE b );
 void yy_init_buffer( YY_BUFFER_STATE b, FILE *file );
 protected:
 virtual void yy_echo()
  ;
 virtual int yy_input(char *buf,int &result,int max_size)
  ;
 virtual void yy_fatal_error(char *msg)
  ;
 virtual int yy_wrap()
  ;
 public:
 char *yytext;
 int yyleng;
 FILE *yyin;
 FILE *yyout;
 int next_token ( yy_PDDL_Parser_stype& val);
 PDDL_Scanner(hsps::StringTable& t) ;
 virtual ~PDDL_Scanner() ;
 int yy_flex_debug;
 public:
 private: hsps::StringTable& _tab; bool _reset; char* _filename; int _line_no; bool _trace_line; public: void open_file(char* fname, bool trace); void close_file(); char* current_file() const { return _filename; }; int current_line() const { return _line_no; };
};
struct yy_buffer_state
    {
    FILE *yy_input_file;
    char *yy_ch_buf;
    char *yy_buf_pos;
    int yy_buf_size;
    int yy_n_chars;
    int yy_eof_status;
    };
void PDDL_Scanner::yy_echo()
{fwrite( (char *) yytext, yyleng, 1, yyout );
}
int PDDL_Scanner::yy_input(char * buffer,int &result,int max_size)
{return result= fread( buffer, 1,max_size,yyin );
}
void PDDL_Scanner::yy_fatal_error(char *msg)
{fputs( msg, stderr );putc( '\n', stderr );exit( 1 );
}
int PDDL_Scanner::yy_wrap()
{return 1;
}
void PDDL_Scanner::yy_initialize()
{
 yyin=0;yyout=0;yy_init = 1;
 yy_start=0;
 yytext=0;yyleng=0;
 YY_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
 yy_flex_debug=1;
}
PDDL_Scanner::PDDL_Scanner(hsps::StringTable& t) : _tab(t), _reset(false), _filename(0), _line_no(1), _trace_line(false)
{yy_initialize();
 ;
}
PDDL_Scanner::~PDDL_Scanner()
{;
 if(YY_CURRENT_BUFFER)
  yy_delete_buffer(YY_CURRENT_BUFFER);
}
typedef int yy_state_type;
static const short int yy_accept[544] =
    { 0,
      113, 113, 116, 115, 1, 3, 115, 115, 5, 6,
       11, 9, 10, 12, 113, 17, 2, 15, 19, 13,
      115, 7, 8, 112, 112, 112, 112, 112, 112, 112,
      112, 112, 112, 112, 112, 112, 112, 112, 1, 0,
        4, 0, 18, 113, 114, 111, 111, 111, 111, 111,
      111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
      111, 111, 111, 111, 2, 16, 14, 110, 110, 112,
      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
       43, 112, 112, 112, 112, 112, 112, 112, 112, 112,
      112, 4, 114, 111, 111, 111, 111, 111, 111, 111,
      111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
      111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
      111, 111, 111, 111, 110, 110, 110, 112, 42, 112,
        0, 112, 112, 112, 112, 112, 112, 112, 112, 112,
      112, 47, 112, 112, 112, 112, 112, 48, 112, 112,
      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
      111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
      111, 111, 111, 98, 111, 111, 111, 111, 111, 111,
      111, 111, 97, 111, 111, 111, 111, 111, 111, 99,
       79, 111, 111, 111, 110, 112, 112, 0, 0, 112,
      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
      112, 112, 112, 49, 112, 51, 112, 111, 111, 111,
      111, 111, 111, 111, 111, 111, 111, 93, 111, 111,
       57, 111, 56, 111, 111, 81, 111, 111, 78, 111,
      111, 95, 111, 111, 111, 111, 111, 111, 111, 80,
       82, 110, 112, 112, 0, 0, 112, 112, 112, 112,
      112, 112, 112, 112, 112, 50, 112, 46, 112, 112,
      112, 112, 112, 0, 112, 112, 112, 92, 112, 112,
      112, 112, 111, 94, 111, 111, 111, 111, 111, 111,
       29, 111, 111, 111, 111, 111, 111, 111, 111, 111,
      111, 111, 111, 111, 111, 111, 111, 111, 41, 24,
      110, 104, 73, 35, 0, 112, 112, 72, 112, 25,
       26, 52, 112, 44, 45, 112, 112, 112, 112, 74,
        0, 112, 112, 112, 112, 112, 112, 100, 27, 111,
      111, 111, 111, 54, 111, 37, 111, 111, 111, 111,
      111, 111, 58, 63, 111, 111, 111, 111, 111, 111,
      111, 59, 111, 110, 112, 0, 112, 90, 112, 91,
      112, 112, 112, 112, 0, 112, 53, 112, 112, 112,
      112, 112, 111, 111, 111, 83, 111, 111, 111, 85,
      111, 111, 111, 111, 55, 111, 111, 111, 111, 28,
      111, 111, 111, 110, 112, 34, 89, 112, 69, 112,
       68, 112, 65, 64, 36, 112, 112, 70, 105, 112,
      112, 111, 111, 111, 39, 111, 111, 111, 111, 111,
      111, 60, 111, 111, 111, 111, 111, 111, 66, 112,
      112, 87, 112, 88, 112, 112, 112, 112, 112, 75,
       33, 21, 111, 111, 40, 23, 96, 38, 111, 111,
      111, 111, 111, 111, 111, 111, 112, 86, 112, 112,
      101, 71, 112, 112, 67, 111, 111, 77, 111, 31,
      111, 22, 111, 111, 111, 112, 112, 102, 112, 112,
      103, 111, 111, 111, 111, 111, 111, 112, 106, 112,
      112, 111, 111, 32, 20, 111, 111, 109, 112, 112,
      111, 111, 61, 111, 108, 112, 111, 111, 84, 107,
       30, 62, 0
    } ;
static const char yy_ec[128] =
    { 0,
        1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 2, 4, 5, 6, 7, 8, 9, 1, 10,
       11, 12, 13, 1, 14, 15, 16, 17, 17, 17,
       17, 17, 17, 17, 17, 17, 17, 18, 19, 20,
       21, 22, 23, 1, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
       44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
       24, 25, 26, 1, 27, 1, 28, 29, 30, 31,
       32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
       42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
       52, 53, 1, 54, 1, 55, 1
    } ;
static const char yy_meta[56] =
    { 0,
        1, 1, 2, 3, 1, 3, 3, 3, 3, 1,
        1, 3, 3, 3, 3, 3, 3, 1, 1, 1,
        3, 1, 1, 1, 3, 1, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 3, 3
    } ;
static const short int yy_base[553] =
    { 0,
        0, 0, 923, 1829, 912, 1829, 51, 854, 1829, 1829,
     1829, 1829, 823, 1829, 42, 50, 0, 814, 1829, 807,
      792, 1829, 1829, 100, 152, 23, 87, 91, 142, 27,
      164, 102, 133, 106, 155, 173, 182, 191, 813, 106,
     1829, 115, 1829, 46, 786, 235, 287, 93, 215, 225,
      236, 194, 235, 242, 223, 275, 279, 240, 179, 285,
      286, 290, 298, 299, 0, 1829, 1829, 347, 399, 0,
      328, 332, 345, 342, 395, 382, 392, 404, 416, 420,
      429, 432, 441, 450, 453, 467, 464, 477, 480, 489,
      492, 502, 505, 514, 517, 526, 529, 538, 549, 559,
      562, 170, 784, 0, 116, 187, 216, 293, 347, 350,
      319, 400, 455, 268, 419, 479, 389, 289, 574, 548,
      541, 551, 569, 572, 584, 581, 587, 456, 592, 595,
      599, 601, 606, 610, 0, 752, 27, 620, 623, 632,
      458, 240, 635, 644, 656, 647, 665, 668, 677, 680,
      689, 692, 701, 704, 748, 716, 720, 729, 740, 743,
      752, 763, 766, 775, 779, 791, 795, 807, 804, 817,
      607, 612, 829, 750, 778, 714, 803, 801, 707, 825,
      650, 683, 728, 695, 827, 838, 837, 831, 848, 840,
      849, 857, 842, 862, 850, 867, 863, 869, 870, 888,
      874, 881, 875, 880, 249, 883, 897, 754, 747, 751,
      735, 906, 909, 918, 922, 934, 931, 943, 947, 956,
      959, 969, 736, 973, 982, 985, 994, 998, 1007, 1010,
     1019, 1022, 1031, 1034, 1043, 1046, 1055, 941, 882, 903,
     1053, 930, 1067, 1058, 921, 1065, 997, 961, 988, 1068,
      979, 1080, 1025, 1076, 1078, 1077, 1088, 1095, 1090, 1097,
     1098, 1099, 1100, 1103, 1118, 1117, 1124, 741, 1110, 1121,
     1125, 299, 1119, 1133, 734, 736, 706, 686, 1136, 1145,
     1149, 1158, 1161, 1170, 1173, 1182, 1185, 1194, 1197, 678,
     1206, 1210, 1219, 108, 1222, 1238, 1234, 1247, 1251, 1260,
     1264, 1273, 1148, 1139, 1225, 1285, 1188, 1157, 1272, 1279,
     1232, 1286, 1294, 1291, 1292, 1293, 1304, 1311, 1298, 1305,
     1315, 1317, 1312, 1313, 1318, 1325, 1326, 668, 1330, 1332,
      168, 1352, 1328, 1829, 663, 659, 654, 1338, 1341, 1355,
     1364, 1367, 1376, 1379, 1388, 1391, 660, 1400, 1403, 1413,
      648, 1416, 1425, 74, 1428, 637, 1437, 1440, 1343, 1415,
     1351, 1452, 1443, 1370, 1394, 1447, 1455, 1464, 1458, 1465,
     1469, 1472, 1473, 1476, 1477, 1484, 1478, 1496, 1501, 1487,
     1502, 1506, 636, 23, 622, 618, 616, 646, 1512, 1499,
     1522, 629, 1525, 1535, 612, 1538, 1547, 608, 583, 1551,
      583, 1563, 1545, 1509, 1569, 1519, 1532, 1571, 1566, 1570,
     1577, 1583, 1581, 1596, 1584, 1595, 1601, 1602, 1590, 1598,
     1605, 574, 543, 244, 547, 1829, 560, 316, 1611, 528,
     1614, 515, 1623, 1626, 1829, 1636, 509, 0, 1640, 517,
     1649, 1648, 1610, 1661, 1613, 1654, 1662, 1655, 1663, 1667,
     1669, 1690, 1676, 1681, 1686, 1687, 522, 503, 497, 493,
      491, 0, 481, 0, 485, 1698, 471, 370, 475, 1701,
     1695, 1704, 1705, 467, 1708, 1713, 1716, 1719, 1723, 433,
     1725, 1727, 1726, 1734, 428, 413, 417, 0, 410, 406,
     1735, 0, 394, 394, 0, 1731, 388, 1737, 372, 1738,
     1748, 1749, 1755, 366, 366, 354, 353, 0, 323, 333,
     1757, 301, 302, 1758, 1759, 293, 302, 269, 0, 274,
      233, 237, 220, 1761, 1762, 200, 190, 0, 168, 145,
      144, 129, 0, 124, 0, 131, 116, 89, 0, 0,
        0, 0, 1829, 1808, 1812, 114, 1814, 1816, 1818, 1820,
     1822, 1824
    } ;
static const short int yy_def[553] =
    { 0,
      543, 1, 543, 543, 543, 543, 544, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 545, 543, 543, 543,
      546, 543, 543, 547, 547, 25, 25, 25, 25, 25,
       25, 25, 25, 25, 25, 25, 25, 25, 543, 544,
      543, 544, 543, 543, 543, 548, 548, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 545, 543, 543, 549, 549, 550,
       25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
       25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
       25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
       25, 544, 543, 551, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 552, 69, 69, 25, 25, 25,
      543, 550, 25, 25, 25, 25, 25, 25, 25, 25,
       25, 25, 25, 25, 550, 25, 25, 25, 25, 25,
       25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 69, 25, 25, 543, 543, 550,
      550, 25, 25, 25, 25, 25, 25, 25, 25, 25,
       25, 25, 550, 25, 25, 25, 25, 25, 25, 25,
       25, 25, 25, 25, 25, 25, 25, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 551, 47, 47,
       47, 69, 25, 25, 543, 543, 550, 550, 25, 25,
       25, 25, 25, 25, 25, 25, 25, 25, 25, 550,
       25, 25, 25, 543, 25, 25, 25, 25, 25, 25,
       25, 25, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 551, 47, 47,
       69, 25, 25, 543, 543, 550, 550, 25, 25, 25,
       25, 25, 25, 25, 25, 25, 550, 25, 25, 25,
      543, 25, 25, 550, 25, 550, 25, 25, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 551, 69, 550, 543, 550, 550, 25, 25,
       25, 550, 25, 25, 543, 25, 25, 550, 550, 25,
      550, 25, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 551, 551, 69, 550, 543, 550, 550, 25, 550,
       25, 550, 25, 25, 543, 25, 550, 550, 25, 550,
       25, 47, 47, 47, 47, 47, 47, 47, 47, 47,
       47, 47, 47, 47, 47, 47, 551, 551, 69, 550,
      550, 550, 550, 550, 550, 25, 550, 550, 550, 25,
       47, 47, 47, 551, 47, 47, 47, 47, 47, 551,
       47, 47, 47, 47, 551, 551, 550, 550, 550, 550,
       25, 550, 550, 550, 550, 47, 551, 47, 551, 47,
       47, 47, 47, 551, 551, 550, 550, 550, 550, 550,
       47, 551, 551, 47, 47, 551, 551, 550, 550, 550,
      550, 551, 551, 47, 47, 551, 551, 550, 550, 550,
      551, 551, 551, 551, 550, 550, 551, 551, 551, 550,
      551, 551, 0, 543, 543, 543, 543, 543, 543, 543,
      543, 543
    } ;
static const short int yy_nxt[1885] =
    { 0,
        4, 5, 6, 4, 7, 8, 4, 4, 4, 9,
       10, 11, 12, 13, 4, 14, 15, 16, 17, 18,
       19, 20, 21, 22, 4, 23, 24, 25, 24, 26,
       27, 28, 29, 24, 24, 30, 24, 24, 24, 31,
       32, 33, 34, 24, 24, 35, 36, 37, 24, 38,
       24, 24, 24, 4, 4, 41, 45, 76, 44, 83,
       45, 71, 44, 71, 424, 71, 84, 85, 71, 71,
      136, 205, 86, 71, 136, 42, 46, 47, 46, 48,
       49, 50, 51, 52, 53, 54, 46, 55, 56, 57,
       58, 59, 60, 46, 61, 62, 63, 46, 64, 46,
       46, 46, 46, 70, 398, 70, 70, 70, 70, 294,
       41, 70, 70, 70, 70, 70, 70, 68, 77, 102,
       70, 399, 105, 542, 70, 71, 79, 71, 78, 71,
       42, 71, 71, 71, 108, 351, 71, 71, 105, 42,
       71, 80, 71, 89, 71, 105, 71, 71, 71, 90,
       93, 71, 71, 70, 70, 70, 541, 70, 70, 70,
       70, 105, 540, 70, 70, 70, 70, 70, 70, 81,
      539, 71, 70, 71, 41, 538, 70, 91, 71, 71,
       71, 92, 71, 82, 94, 537, 95, 71, 71, 536,
       72, 87, 73, 71, 42, 71, 96, 74, 75, 88,
       71, 71, 71, 384, 71, 70, 70, 125, 105, 71,
       71, 71, 535, 71, 97, 136, 105, 98, 71, 71,
       71, 126, 99, 105, 105, 100, 101, 71, 71, 71,
      534, 71, 105, 171, 533, 117, 71, 71, 104, 105,
      104, 104, 104, 104, 105, 105, 104, 104, 104, 104,
      104, 104, 105, 532, 105, 104, 109, 111, 121, 104,
      105, 172, 110, 114, 105, 105, 118, 124, 105, 105,
      105, 105, 531, 112, 530, 113, 272, 115, 210, 211,
      105, 105, 119, 116, 459, 105, 120, 105, 104, 104,
      104, 136, 104, 104, 104, 104, 136, 179, 104, 104,
      104, 104, 104, 104, 105, 529, 122, 104, 105, 528,
      123, 104, 127, 105, 105, 105, 106, 130, 105, 105,
      105, 131, 105, 128, 105, 132, 134, 105, 105, 129,
      105, 105, 107, 173, 105, 105, 183, 527, 105, 526,
      104, 104, 523, 105, 105, 331, 136, 522, 105, 133,
      135, 176, 135, 135, 135, 135, 462, 463, 135, 135,
      135, 135, 135, 135, 105, 521, 71, 135, 71, 520,
       71, 135, 71, 71, 71, 139, 105, 71, 71, 105,
       71, 138, 71, 71, 519, 71, 174, 140, 71, 518,
       71, 71, 105, 517, 175, 105, 141, 493, 494, 516,
      135, 135, 135, 513, 135, 135, 135, 135, 142, 143,
      135, 135, 135, 135, 135, 135, 182, 512, 105, 135,
       71, 144, 71, 135, 145, 510, 509, 71, 71, 105,
       71, 177, 71, 71, 105, 71, 508, 71, 71, 507,
       71, 71, 71, 146, 71, 105, 137, 148, 105, 71,
       71, 506, 135, 135, 71, 149, 71, 505, 71, 141,
       71, 71, 147, 180, 105, 71, 71, 150, 504, 71,
       71, 499, 71, 152, 71, 71, 151, 71, 71, 71,
      155, 71, 154, 195, 105, 105, 71, 71, 71, 208,
       71, 71, 153, 71, 497, 71, 71, 178, 71, 71,
      105, 105, 71, 209, 71, 71, 495, 71, 105, 71,
       71, 492, 71, 71, 156, 71, 490, 157, 71, 181,
       71, 489, 71, 71, 105, 71, 158, 71, 159, 71,
       71, 488, 71, 160, 71, 71, 161, 71, 71, 487,
       71, 163, 71, 71, 136, 71, 162, 71, 71, 486,
       71, 71, 71, 485, 71, 71, 469, 71, 467, 71,
       71, 465, 71, 164, 71, 165, 71, 71, 464, 71,
      105, 71, 71, 461, 71, 166, 71, 105, 71, 168,
      105, 188, 460, 71, 71, 167, 105, 71, 458, 71,
      169, 189, 187, 105, 71, 71, 105, 71, 105, 71,
       71, 105, 71, 105, 71, 71, 184, 71, 170, 185,
      105, 191, 457, 105, 105, 190, 105, 105, 440, 105,
      192, 105, 186, 196, 105, 438, 105, 193, 105, 105,
      105, 194, 105, 197, 201, 105, 105, 105, 198, 105,
      105, 105, 238, 199, 105, 200, 202, 206, 203, 437,
      435, 105, 105, 239, 204, 105, 432, 105, 71, 428,
       71, 71, 427, 71, 426, 71, 71, 207, 71, 71,
       71, 425, 71, 71, 215, 212, 423, 71, 71, 250,
       71, 71, 71, 401, 71, 71, 395, 71, 213, 71,
       71, 214, 71, 71, 71, 105, 71, 217, 392, 216,
      388, 71, 71, 71, 387, 71, 71, 386, 71, 383,
       71, 71, 105, 71, 71, 71, 220, 71, 71, 347,
       71, 251, 218, 71, 105, 219, 71, 71, 105, 71,
       71, 337, 71, 336, 71, 71, 105, 71, 71, 221,
      105, 71, 71, 105, 71, 245, 71, 71, 222, 71,
       71, 224, 105, 248, 71, 225, 71, 105, 71, 105,
       71, 71, 71, 335, 334, 71, 71, 71, 226, 71,
      328, 290, 252, 105, 71, 71, 278, 243, 71, 105,
       71, 71, 277, 71, 228, 71, 71, 227, 71, 71,
       71, 229, 71, 276, 275, 105, 223, 71, 71, 136,
      103, 71, 103, 71, 230, 244, 71, 105, 71, 71,
      232, 71, 71, 71, 39, 71, 231, 71, 233, 71,
       71, 71, 69, 105, 71, 71, 234, 67, 247, 71,
      105, 71, 105, 71, 66, 71, 71, 71, 235, 44,
       71, 71, 71, 246, 236, 71, 105, 71, 105, 71,
       71, 237, 71, 71, 105, 71, 105, 71, 105, 240,
      105, 256, 71, 71, 249, 254, 105, 105, 255, 105,
      105, 105, 105, 253, 241, 242, 105, 105, 105, 105,
      259, 257, 105, 105, 258, 105, 105, 105, 260, 261,
      262, 105, 265, 105, 105, 105, 263, 264, 105, 105,
       43, 268, 105, 105, 105, 267, 270, 105, 105, 105,
      105, 304, 105, 39, 105, 105, 266, 105, 269, 105,
      105, 71, 543, 71, 543, 271, 105, 105, 71, 71,
      274, 543, 105, 105, 273, 71, 543, 71, 305, 279,
      280, 543, 71, 71, 71, 543, 71, 71, 105, 71,
      310, 71, 71, 543, 71, 71, 71, 282, 281, 105,
       71, 307, 71, 71, 71, 283, 105, 71, 71, 71,
      105, 71, 71, 543, 71, 105, 71, 284, 286, 71,
       71, 71, 303, 71, 543, 71, 105, 71, 71, 285,
      105, 543, 71, 71, 287, 294, 71, 71, 543, 71,
      289, 71, 71, 543, 71, 71, 105, 71, 105, 71,
      288, 71, 291, 71, 71, 71, 293, 105, 71, 71,
       71, 292, 71, 71, 105, 71, 105, 71, 71, 295,
       71, 71, 71, 105, 71, 313, 71, 312, 71, 71,
       71, 297, 105, 71, 71, 296, 543, 71, 71, 543,
       71, 298, 71, 71, 105, 71, 71, 71, 543, 71,
       71, 543, 71, 543, 71, 71, 543, 71, 299, 300,
      105, 71, 71, 543, 71, 301, 71, 71, 543, 71,
       71, 71, 105, 71, 71, 543, 71, 105, 71, 71,
      302, 71, 71, 71, 105, 71, 105, 105, 105, 306,
       71, 71, 308, 105, 309, 105, 105, 105, 543, 105,
      105, 311, 105, 105, 314, 315, 317, 105, 543, 105,
      316, 105, 105, 105, 105, 105, 320, 105, 105, 105,
      319, 543, 105, 105, 318, 105, 321, 322, 324, 105,
      105, 323, 105, 105, 105, 105, 105, 105, 105, 325,
      105, 327, 326, 105, 105, 329, 543, 71, 543, 71,
      543, 543, 105, 105, 332, 71, 330, 338, 105, 105,
      105, 71, 339, 333, 71, 543, 71, 105, 71, 71,
      340, 71, 71, 71, 105, 71, 105, 71, 359, 71,
       71, 71, 543, 105, 71, 71, 71, 364, 341, 71,
      543, 71, 105, 71, 71, 342, 71, 71, 343, 543,
       71, 71, 543, 71, 543, 71, 71, 105, 344, 71,
       71, 543, 71, 345, 346, 71, 543, 71, 71, 543,
       71, 71, 71, 105, 71, 71, 543, 71, 363, 71,
       71, 348, 71, 71, 71, 349, 71, 354, 71, 543,
       71, 71, 71, 543, 105, 71, 71, 71, 543, 71,
       71, 105, 71, 350, 71, 71, 352, 71, 71, 353,
      105, 360, 71, 356, 71, 543, 71, 105, 71, 71,
       71, 543, 543, 71, 71, 71, 355, 71, 543, 71,
      543, 71, 71, 71, 543, 543, 71, 71, 71, 357,
       71, 105, 71, 543, 71, 71, 71, 365, 105, 71,
       71, 71, 361, 358, 105, 105, 543, 105, 71, 71,
      105, 105, 105, 105, 105, 366, 369, 374, 371, 362,
      105, 367, 368, 105, 105, 372, 105, 370, 105, 105,
      105, 105, 379, 105, 105, 373, 105, 105, 377, 105,
      105, 375, 378, 376, 105, 105, 105, 105, 105, 105,
      105, 105, 105, 380, 382, 385, 71, 543, 71, 381,
      105, 105, 105, 71, 71, 105, 71, 105, 71, 71,
      105, 71, 543, 71, 71, 543, 389, 71, 105, 543,
       71, 404, 71, 71, 543, 71, 105, 71, 71, 105,
       71, 71, 71, 543, 71, 71, 543, 71, 543, 71,
       71, 543, 71, 71, 71, 105, 71, 71, 543, 71,
      543, 71, 71, 105, 71, 71, 71, 390, 71, 71,
      543, 71, 543, 71, 71, 407, 391, 71, 71, 105,
       71, 71, 408, 71, 105, 71, 71, 396, 71, 71,
      403, 71, 393, 71, 71, 394, 71, 543, 71, 71,
      105, 71, 71, 71, 397, 71, 71, 400, 71, 543,
       71, 71, 105, 71, 71, 71, 105, 402, 71, 405,
       71, 105, 71, 71, 105, 71, 71, 105, 105, 406,
      409, 410, 105, 105, 105, 543, 413, 105, 105, 411,
      105, 105, 105, 105, 543, 105, 105, 105, 543, 105,
      105, 412, 430, 105, 105, 416, 105, 105, 105, 422,
      414, 105, 415, 105, 417, 105, 418, 543, 419, 105,
      105, 105, 420, 421, 543, 105, 543, 71, 105, 71,
      543, 105, 543, 429, 71, 71, 105, 105, 105, 543,
       71, 105, 71, 431, 105, 443, 433, 71, 71, 543,
       71, 105, 71, 71, 105, 71, 434, 71, 71, 543,
       71, 71, 445, 71, 105, 71, 71, 105, 436, 543,
       71, 71, 439, 71, 71, 71, 442, 71, 543, 71,
      105, 71, 71, 71, 441, 105, 71, 71, 105, 105,
      105, 71, 446, 71, 444, 543, 105, 447, 71, 71,
      105, 105, 105, 105, 105, 105, 105, 448, 449, 105,
      543, 450, 105, 451, 105, 105, 105, 105, 105, 105,
      105, 105, 453, 452, 105, 105, 455, 454, 543, 105,
      105, 105, 105, 105, 456, 543, 105, 105, 543, 71,
      105, 71, 71, 468, 71, 472, 71, 71, 105, 71,
       71, 71, 543, 71, 71, 466, 71, 474, 71, 71,
      543, 71, 71, 543, 71, 543, 71, 105, 71, 470,
       71, 71, 71, 105, 105, 71, 71, 71, 471, 71,
      105, 105, 477, 105, 71, 71, 105, 543, 105, 105,
      476, 473, 475, 480, 543, 105, 105, 105, 105, 479,
      105, 543, 105, 478, 105, 105, 105, 483, 484, 105,
      481, 105, 543, 543, 105, 543, 105, 482, 543, 491,
      543, 105, 105, 105, 105, 105, 71, 105, 71, 71,
      105, 71, 105, 71, 71, 105, 71, 71, 105, 105,
      105, 496, 105, 105, 105, 105, 105, 543, 105, 543,
      105, 105, 501, 105, 105, 543, 105, 105, 105, 498,
      500, 502, 105, 71, 503, 71, 511, 105, 105, 105,
       71, 71, 105, 105, 105, 543, 105, 105, 105, 514,
      105, 105, 543, 105, 105, 543, 543, 543, 524, 543,
      105, 515, 105, 105, 525, 543, 105, 105, 40, 40,
       40, 40, 65, 543, 65, 65, 71, 71, 105, 105,
      136, 136, 70, 70, 104, 104, 135, 135, 3, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543
    } ;
static const short int yy_chk[1885] =
    { 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 7, 15, 26, 15, 30,
       44, 26, 44, 26, 384, 30, 30, 30, 26, 26,
      384, 137, 30, 30, 137, 7, 16, 16, 16, 16,
       16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
       16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
       16, 16, 16, 24, 354, 24, 24, 24, 24, 294,
       40, 24, 24, 24, 24, 24, 24, 546, 27, 42,
       24, 354, 48, 538, 24, 27, 28, 27, 27, 28,
       40, 28, 27, 27, 48, 294, 28, 28, 48, 42,
       32, 28, 32, 32, 34, 105, 34, 32, 32, 32,
       34, 34, 34, 24, 24, 25, 537, 25, 25, 25,
       25, 105, 536, 25, 25, 25, 25, 25, 25, 29,
      534, 33, 25, 33, 102, 532, 25, 33, 33, 33,
       29, 33, 29, 29, 35, 531, 35, 29, 29, 530,
       25, 31, 25, 35, 102, 35, 35, 25, 25, 31,
       35, 35, 31, 331, 31, 25, 25, 59, 59, 31,
       31, 36, 529, 36, 36, 331, 106, 36, 36, 36,
       37, 59, 37, 52, 59, 38, 38, 37, 37, 38,
      527, 38, 106, 106, 526, 52, 38, 38, 46, 52,
       46, 46, 46, 46, 49, 107, 46, 46, 46, 46,
       46, 46, 55, 523, 50, 46, 49, 50, 55, 46,
       49, 107, 49, 51, 53, 51, 53, 58, 55, 58,
       50, 54, 522, 50, 521, 50, 205, 51, 142, 142,
       53, 51, 54, 51, 424, 58, 54, 54, 46, 46,
       47, 424, 47, 47, 47, 47, 205, 114, 47, 47,
       47, 47, 47, 47, 56, 520, 56, 47, 57, 518,
       57, 47, 60, 114, 60, 61, 47, 61, 118, 62,
       56, 62, 108, 60, 57, 63, 64, 63, 64, 60,
       60, 61, 47, 108, 118, 62, 118, 517, 108, 516,
       47, 47, 513, 63, 64, 272, 272, 512, 111, 63,
       68, 111, 68, 68, 68, 68, 428, 428, 68, 68,
       68, 68, 68, 68, 111, 510, 71, 68, 71, 509,
       72, 68, 72, 71, 71, 73, 109, 72, 72, 110,
       74, 72, 74, 73, 507, 73, 109, 74, 74, 506,
       73, 73, 109, 505, 110, 110, 75, 468, 468, 504,
       68, 68, 69, 499, 69, 69, 69, 69, 75, 76,
       69, 69, 69, 69, 69, 69, 117, 497, 117, 69,
       76, 77, 76, 69, 77, 494, 493, 76, 76, 112,
       77, 112, 77, 75, 117, 75, 490, 77, 77, 489,
       75, 75, 78, 78, 78, 112, 69, 80, 115, 78,
       78, 487, 69, 69, 79, 80, 79, 486, 80, 141,
       80, 79, 79, 115, 115, 80, 80, 81, 485, 81,
       82, 480, 82, 83, 81, 81, 82, 82, 82, 83,
       86, 83, 85, 128, 113, 128, 83, 83, 84, 141,
       84, 85, 84, 85, 474, 84, 84, 113, 85, 85,
      113, 128, 87, 141, 87, 86, 469, 86, 116, 87,
       87, 467, 86, 86, 87, 88, 465, 88, 89, 116,
       89, 463, 88, 88, 116, 89, 89, 90, 90, 90,
       91, 461, 91, 92, 90, 90, 93, 91, 91, 460,
       92, 94, 92, 93, 459, 93, 93, 92, 92, 458,
       93, 93, 94, 457, 94, 95, 440, 95, 437, 94,
       94, 432, 95, 95, 96, 96, 96, 97, 430, 97,
      121, 96, 96, 427, 97, 97, 98, 120, 98, 99,
      122, 121, 425, 98, 98, 98, 121, 99, 423, 99,
      100, 122, 120, 120, 99, 99, 122, 100, 123, 100,
      101, 124, 101, 119, 100, 100, 119, 101, 101, 119,
      126, 124, 422, 125, 123, 123, 127, 124, 401, 119,
      125, 129, 119, 129, 130, 399, 126, 126, 131, 125,
      132, 127, 127, 129, 132, 133, 171, 129, 130, 134,
      130, 172, 171, 131, 131, 131, 132, 138, 133, 398,
      395, 133, 171, 172, 134, 134, 392, 172, 138, 388,
      138, 139, 387, 139, 386, 138, 138, 140, 139, 139,
      140, 385, 140, 143, 146, 143, 383, 140, 140, 181,
      143, 143, 144, 356, 144, 146, 351, 146, 144, 144,
      144, 145, 146, 146, 145, 181, 145, 148, 347, 147,
      337, 145, 145, 147, 336, 147, 148, 335, 148, 328,
      147, 147, 182, 148, 148, 149, 151, 149, 150, 290,
      150, 182, 149, 149, 184, 150, 150, 151, 182, 151,
      152, 278, 152, 277, 151, 151, 179, 152, 152, 153,
      184, 153, 154, 176, 154, 176, 153, 153, 154, 154,
      154, 156, 179, 179, 156, 157, 156, 183, 157, 176,
      157, 156, 156, 276, 275, 157, 157, 158, 159, 158,
      268, 223, 183, 183, 158, 158, 211, 174, 159, 174,
      159, 160, 210, 160, 161, 159, 159, 160, 160, 160,
      161, 162, 161, 209, 208, 174, 155, 161, 161, 136,
      103, 162, 45, 162, 163, 175, 163, 175, 162, 162,
      165, 163, 163, 164, 39, 164, 164, 165, 166, 165,
      164, 164, 21, 175, 165, 165, 167, 20, 178, 166,
      178, 166, 177, 167, 18, 167, 166, 166, 168, 13,
      167, 167, 169, 177, 169, 168, 178, 168, 177, 169,
      169, 170, 168, 168, 180, 170, 185, 170, 173, 173,
      188, 188, 170, 170, 180, 186, 187, 186, 187, 190,
      180, 193, 185, 185, 173, 173, 188, 189, 191, 195,
      191, 189, 187, 186, 190, 190, 192, 193, 192, 194,
      195, 194, 197, 189, 191, 195, 196, 196, 198, 199,
        8, 200, 192, 201, 203, 199, 203, 194, 197, 204,
      202, 239, 196, 5, 198, 199, 198, 200, 202, 201,
      203, 206, 3, 206, 0, 204, 202, 239, 206, 206,
      207, 0, 240, 200, 206, 207, 0, 207, 240, 212,
      213, 0, 207, 207, 212, 0, 212, 213, 240, 213,
      245, 212, 212, 0, 213, 213, 214, 215, 214, 242,
      215, 242, 215, 214, 214, 216, 245, 215, 215, 217,
      238, 217, 216, 0, 216, 242, 217, 217, 219, 216,
      216, 218, 238, 218, 0, 219, 238, 219, 218, 218,
      248, 0, 219, 219, 220, 227, 220, 221, 0, 221,
      222, 220, 220, 0, 221, 221, 248, 222, 251, 222,
      221, 224, 224, 224, 222, 222, 226, 249, 224, 224,
      225, 225, 225, 226, 251, 226, 247, 225, 225, 228,
      226, 226, 227, 249, 227, 249, 228, 247, 228, 227,
      227, 230, 247, 228, 228, 229, 0, 229, 230, 0,
      230, 231, 229, 229, 253, 230, 230, 231, 0, 231,
      232, 0, 232, 0, 231, 231, 0, 232, 232, 233,
      253, 233, 234, 0, 234, 235, 233, 233, 0, 234,
      234, 235, 241, 235, 236, 0, 236, 244, 235, 235,
      237, 236, 236, 237, 246, 237, 243, 250, 241, 241,
      237, 237, 243, 244, 244, 254, 256, 255, 0, 252,
      246, 246, 243, 250, 250, 252, 255, 257, 0, 259,
      254, 254, 256, 255, 258, 252, 260, 261, 262, 263,
      258, 0, 264, 257, 257, 259, 261, 261, 264, 269,
      258, 263, 260, 261, 262, 263, 266, 265, 264, 265,
      270, 267, 266, 267, 271, 269, 0, 273, 0, 273,
        0, 0, 266, 265, 273, 273, 270, 279, 304, 267,
      271, 274, 280, 274, 279, 0, 279, 303, 274, 274,
      281, 279, 279, 280, 304, 280, 308, 281, 303, 281,
      280, 280, 0, 303, 281, 281, 282, 308, 282, 283,
        0, 283, 308, 282, 282, 283, 283, 283, 284, 0,
      284, 285, 0, 285, 0, 284, 284, 307, 285, 285,
      286, 0, 286, 287, 289, 287, 0, 286, 286, 0,
      287, 287, 288, 307, 288, 289, 0, 289, 307, 288,
      288, 291, 289, 289, 291, 292, 291, 297, 292, 0,
      292, 291, 291, 0, 305, 292, 292, 293, 0, 293,
      295, 311, 295, 293, 293, 293, 295, 295, 295, 296,
      305, 305, 297, 300, 297, 0, 296, 311, 296, 297,
      297, 0, 0, 296, 296, 298, 299, 298, 0, 299,
        0, 299, 298, 298, 0, 0, 299, 299, 300, 301,
      300, 309, 301, 0, 301, 300, 300, 309, 310, 301,
      301, 302, 306, 302, 306, 312, 0, 309, 302, 302,
      314, 315, 316, 313, 310, 310, 314, 319, 316, 306,
      306, 312, 313, 317, 320, 317, 314, 315, 316, 313,
      318, 323, 324, 319, 321, 318, 322, 325, 322, 317,
      320, 320, 323, 321, 326, 327, 318, 323, 324, 329,
      321, 330, 322, 325, 327, 332, 333, 0, 333, 326,
      326, 327, 359, 333, 333, 329, 338, 330, 338, 339,
      361, 339, 0, 338, 338, 0, 339, 339, 359, 0,
      332, 361, 332, 340, 0, 340, 361, 332, 332, 364,
      340, 340, 341, 0, 341, 342, 0, 342, 0, 341,
      341, 0, 342, 342, 343, 364, 343, 344, 0, 344,
        0, 343, 343, 365, 344, 344, 345, 343, 345, 346,
        0, 346, 0, 345, 345, 365, 346, 346, 348, 365,
      348, 349, 365, 349, 360, 348, 348, 352, 349, 349,
      360, 350, 348, 350, 352, 349, 352, 0, 350, 350,
      360, 352, 352, 353, 353, 353, 355, 355, 355, 0,
      353, 353, 363, 355, 355, 357, 366, 357, 358, 362,
      358, 362, 357, 357, 367, 358, 358, 369, 363, 363,
      367, 368, 366, 368, 370, 0, 371, 362, 371, 369,
      367, 372, 373, 369, 0, 374, 375, 377, 0, 368,
      370, 370, 390, 376, 371, 376, 380, 372, 373, 382,
      372, 374, 375, 377, 377, 378, 378, 0, 379, 376,
      379, 381, 380, 381, 0, 382, 0, 390, 404, 390,
        0, 378, 0, 389, 390, 390, 379, 381, 406, 0,
      389, 382, 389, 391, 404, 404, 393, 389, 389, 0,
      391, 407, 391, 393, 406, 393, 394, 391, 391, 0,
      393, 393, 407, 394, 403, 394, 396, 407, 396, 0,
      394, 394, 400, 396, 396, 397, 403, 397, 0, 400,
      403, 400, 397, 397, 402, 409, 400, 400, 405, 410,
      408, 402, 408, 402, 405, 0, 411, 409, 402, 402,
      413, 409, 412, 415, 405, 410, 408, 411, 412, 419,
        0, 413, 411, 414, 416, 414, 413, 420, 412, 415,
      417, 418, 417, 416, 421, 419, 419, 418, 0, 443,
      416, 414, 445, 420, 421, 0, 417, 418, 0, 429,
      421, 429, 431, 439, 431, 443, 429, 429, 445, 431,
      431, 433, 0, 433, 434, 436, 434, 446, 433, 433,
        0, 434, 434, 0, 436, 0, 436, 442, 439, 441,
      439, 436, 436, 446, 448, 439, 439, 441, 442, 441,
      444, 447, 449, 442, 441, 441, 450, 0, 451, 446,
      448, 444, 447, 452, 0, 453, 444, 447, 449, 451,
      454, 0, 450, 450, 451, 455, 456, 455, 456, 452,
      453, 453, 0, 0, 471, 0, 454, 454, 0, 466,
        0, 455, 456, 472, 473, 452, 466, 475, 466, 470,
      471, 470, 476, 466, 466, 477, 470, 470, 478, 472,
      473, 473, 479, 475, 481, 483, 482, 0, 476, 0,
      496, 477, 482, 484, 478, 0, 498, 500, 479, 479,
      481, 483, 482, 491, 484, 491, 496, 501, 502, 484,
      491, 491, 498, 500, 503, 0, 511, 514, 515, 501,
      524, 525, 0, 501, 502, 0, 0, 0, 514, 0,
      503, 503, 511, 514, 515, 0, 524, 525, 544, 544,
      544, 544, 545, 0, 545, 545, 547, 547, 548, 548,
      549, 549, 550, 550, 551, 551, 552, 552, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
      543, 543, 543, 543
    } ;
static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;
static const short int yy_rule_linenum[115] =
    { 0,
       39, 40, 41, 43, 48, 49, 50, 51, 52, 53,
       54, 55, 56, 57, 58, 59, 60, 61, 62, 64,
       65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
       75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
       95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
      115, 116, 117, 118, 119, 121, 122, 123, 124, 125,
      126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
      136, 137, 138, 139, 141, 142, 143, 144, 145, 147,
      148, 149, 151, 152, 153, 154, 155, 156, 157, 159,
      167, 172, 205, 206
    } ;
int PDDL_Scanner::next_token ( yy_PDDL_Parser_stype& val)
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;
    if ( yy_init )
 {
  {
  ;
  }
 if ( ! yy_start )
     yy_start = 1;
 if ( ! yyin )
     yyin = stdin;
 if ( ! yyout )
     yyout = stdout;
 if ( YY_CURRENT_BUFFER )
     yy_init_buffer( YY_CURRENT_BUFFER, yyin );
 else
     YY_CURRENT_BUFFER = yy_create_buffer( yyin, (8192 * 2) );
 yy_load_buffer_state();
 yy_init=0;
 }
    while ( 1 )
 {
 yy_cp = yy_c_buf_p;
 *yy_cp = yy_hold_char;
 yy_bp = yy_cp;
 yy_current_state = yy_start;
yy_match:
 do
     {
     register char yy_c = yy_ec[*yy_cp];
     if ( yy_accept[yy_current_state] )
  {
  yy_last_accepting_state = yy_current_state;
  yy_last_accepting_cpos = yy_cp;
  }
     while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
  {
  yy_current_state = yy_def[yy_current_state];
  if ( yy_current_state >= 544 )
      yy_c = yy_meta[yy_c];
  }
     yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
     ++yy_cp;
     }
 while ( yy_current_state != 543 );
 yy_cp = yy_last_accepting_cpos;
 yy_current_state = yy_last_accepting_state;
yy_find_action:
 yy_act = yy_accept[yy_current_state];
 yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
 ;
do_action:
 if ( yy_flex_debug )
  {
  if ( yy_act == 0 )
   fprintf( stderr , "--scanner backtracking\n" );
  else if ( yy_act < 116 -1 )
   fprintf( stderr ,
    "--accepting rule at line %d (\"%s\")\n",
    yy_rule_linenum[yy_act], yytext );
  else if ( yy_act == 116 -1 )
   fprintf( stderr ,
    "--accepting default rule (\"%s\")\n",
    yytext );
  else if ( yy_act == 116 )
   fprintf( stderr , "--(end of buffer or a NUL)\n" );
  else
   fprintf( stderr , "--EOF\n" );
  }
 switch ( yy_act )
     {
     case 0:
     *yy_cp = yy_hold_char;
     yy_cp = yy_last_accepting_cpos;
     yy_current_state = yy_last_accepting_state;
     goto yy_find_action;
case 1:
;
 break;
case 2:
;
 break;
case 3:
{ _line_no++; if (_trace_line) std::cerr << std::endl << "LINE: " << _line_no << std::endl; }
 break;
case 4:
{
  val.sval = strndup(yytext + 1, strlen(yytext) - 2);
  return PDDL_Parser::TK_STRING;
}
 break;
case 5:
{return PDDL_Parser::TK_OPEN;}
 break;
case 6:
{return PDDL_Parser::TK_CLOSE;}
 break;
case 7:
{return PDDL_Parser::TK_OPEN_SQ;}
 break;
case 8:
{return PDDL_Parser::TK_CLOSE_SQ;}
 break;
case 9:
{return PDDL_Parser::TK_PLUS;}
 break;
case 10:
{return PDDL_Parser::TK_HYPHEN;}
 break;
case 11:
{return PDDL_Parser::TK_MUL;}
 break;
case 12:
{return PDDL_Parser::TK_DIV;}
 break;
case 13:
{return PDDL_Parser::TK_GREATER;}
 break;
case 14:
{return PDDL_Parser::TK_GREATEQ;}
 break;
case 15:
{return PDDL_Parser::TK_LESS;}
 break;
case 16:
{return PDDL_Parser::TK_LESSEQ;}
 break;
case 17:
{return PDDL_Parser::TK_COLON;}
 break;
case 18:
{return PDDL_Parser::TK_HASHT;}
 break;
case 19:
{return PDDL_Parser::TK_EQ;}
 break;
case 20:
{return PDDL_Parser::KW_REQS;}
 break;
case 21:
{return PDDL_Parser::KW_CONSTANTS;}
 break;
case 22:
{return PDDL_Parser::KW_PREDS;}
 break;
case 23:
{return PDDL_Parser::KW_FUNS;}
 break;
case 24:
{return PDDL_Parser::KW_TYPES;}
 break;
case 25:
{return PDDL_Parser::KW_DEFINE;}
 break;
case 26:
{return PDDL_Parser::KW_DOMAIN;}
 break;
case 27:
{return PDDL_Parser::KW_ACTION;}
 break;
case 28:
{return PDDL_Parser::KW_PROCESS;}
 break;
case 29:
{return PDDL_Parser::KW_EVENT;}
 break;
case 30:
{return PDDL_Parser::KW_ACTION;}
 break;
case 31:
{return PDDL_Parser::KW_ARGS;}
 break;
case 32:
{return PDDL_Parser::KW_PRE;}
 break;
case 33:
{return PDDL_Parser::KW_COND;}
 break;
case 34:
{return PDDL_Parser::KW_AT_START;}
 break;
case 35:
{return PDDL_Parser::KW_AT_END;}
 break;
case 36:
{return PDDL_Parser::KW_OVER_ALL;}
 break;
case 37:
{return PDDL_Parser::KW_EFFECT;}
 break;
case 38:
{return PDDL_Parser::KW_INVARIANT;}
 break;
case 39:
{return PDDL_Parser::KW_DURATION;}
 break;
case 40:
{return PDDL_Parser::KW_EXPANSION;}
 break;
case 41:
{return PDDL_Parser::KW_TASKS;}
 break;
case 42:
{return PDDL_Parser::KW_AND;}
 break;
case 43:
{return PDDL_Parser::KW_OR;}
 break;
case 44:
{return PDDL_Parser::KW_EXISTS;}
 break;
case 45:
{return PDDL_Parser::KW_FORALL;}
 break;
case 46:
{return PDDL_Parser::KW_IMPLY;}
 break;
case 47:
{return PDDL_Parser::KW_IFF;}
 break;
case 48:
{return PDDL_Parser::KW_NOT;}
 break;
case 49:
{return PDDL_Parser::KW_TRUE;}
 break;
case 50:
{return PDDL_Parser::KW_FALSE;}
 break;
case 51:
{return PDDL_Parser::KW_WHEN;}
 break;
case 52:
{return PDDL_Parser::KW_EITHER;}
 break;
case 53:
{return PDDL_Parser::KW_PROBLEM;}
 break;
case 54:
{return PDDL_Parser::KW_FORDOMAIN;}
 break;
case 55:
{return PDDL_Parser::KW_OBJECTS;}
 break;
case 56:
{return PDDL_Parser::KW_INIT;}
 break;
case 57:
{return PDDL_Parser::KW_GOAL;}
 break;
case 58:
{return PDDL_Parser::KW_LENGTH;}
 break;
case 59:
{return PDDL_Parser::KW_SERIAL;}
 break;
case 60:
{return PDDL_Parser::KW_PARALLEL;}
 break;
case 61:
{return PDDL_Parser::KW_SERIAL;}
 break;
case 62:
{return PDDL_Parser::KW_PARALLEL;}
 break;
case 63:
{return PDDL_Parser::KW_METRIC;}
 break;
case 64:
{return PDDL_Parser::KW_MINIMIZE;}
 break;
case 65:
{return PDDL_Parser::KW_MAXIMIZE;}
 break;
case 66:
{return PDDL_Parser::KW_DURATION_VAR;}
 break;
case 67:
{return PDDL_Parser::KW_TOTAL_TIME;}
 break;
case 68:
{return PDDL_Parser::KW_INCREASE;}
 break;
case 69:
{return PDDL_Parser::KW_DECREASE;}
 break;
case 70:
{return PDDL_Parser::KW_SCALE_UP;}
 break;
case 71:
{return PDDL_Parser::KW_SCALE_DOWN;}
 break;
case 72:
{return PDDL_Parser::KW_ASSIGN;}
 break;
case 73:
{return PDDL_Parser::KW_ASSIGN;}
 break;
case 74:
{return PDDL_Parser::KW_NUMBER;}
 break;
case 75:
{return PDDL_Parser::KW_UNDEFINED;}
 break;
case 76:
{return PDDL_Parser::KW_INVARIANT;}
 break;
case 77:
{return PDDL_Parser::KW_IRRELEVANT;}
 break;
case 78:
{return PDDL_Parser::KW_NAME;}
 break;
case 79:
{return PDDL_Parser::KW_TAG;}
 break;
case 80:
{return PDDL_Parser::KW_TAG;}
 break;
case 81:
{return PDDL_Parser::KW_TAG;}
 break;
case 82:
{return PDDL_Parser::KW_VARS;}
 break;
case 83:
{return PDDL_Parser::KW_CONTEXT;}
 break;
case 84:
{return PDDL_Parser::KW_SET_CONSTRAINT;}
 break;
case 85:
{return PDDL_Parser::KW_FORMULA;}
 break;
case 86:
{return PDDL_Parser::KW_AT_LEAST_N;}
 break;
case 87:
{return PDDL_Parser::KW_AT_MOST_N;}
 break;
case 88:
{return PDDL_Parser::KW_EXACTLY_N;}
 break;
case 89:
{return PDDL_Parser::KW_AT_LEAST_N;}
 break;
case 90:
{return PDDL_Parser::KW_AT_MOST_N;}
 break;
case 91:
{return PDDL_Parser::KW_EXACTLY_N;}
 break;
case 92:
{return PDDL_Parser::KW_SETOF;}
 break;
case 93:
{return PDDL_Parser::KW_FACT;}
 break;
case 94:
{return PDDL_Parser::KW_ASSOC;}
 break;
case 95:
{return PDDL_Parser::KW_PLAN;}
 break;
case 96:
{return PDDL_Parser::KW_HEURISTIC;}
 break;
case 97:
{return PDDL_Parser::KW_OPT;}
 break;
case 98:
{return PDDL_Parser::KW_INF;}
 break;
case 99:
{return PDDL_Parser::KW_SET;}
 break;
case 100:
{return PDDL_Parser::KW_WITHIN;}
 break;
case 101:
{return PDDL_Parser::KW_PREFERENCE;}
 break;
case 102:
{return PDDL_Parser::KW_VIOLATED;}
 break;
case 103:
{ return PDDL_Parser::KW_CONSTRAINTS; }
 break;
case 104:
{ return PDDL_Parser::KW_ALWAYS; }
 break;
case 105:
{ return PDDL_Parser::KW_SOMETIME; }
 break;
case 106:
{ return PDDL_Parser::KW_AT_MOST_ONCE; }
 break;
case 107:
{ return PDDL_Parser::KW_SOMETIME_BEFORE; }
 break;
case 108:
{ return PDDL_Parser::KW_SOMETIME_AFTER; }
 break;
case 109:
{ return PDDL_Parser::KW_ALWAYS_WITHIN; }
 break;
case 110:
{
  val.sym = _tab.inserta(yytext);
  if (val.sym->val == 0) return PDDL_Parser::TK_NEW_VAR_SYMBOL;
  if (((hsps::PDDL_Base::Symbol*)val.sym->val)->sym_class == hsps::PDDL_Base::sym_variable)
    return PDDL_Parser::TK_VAR_SYMBOL;
  return PDDL_Parser::TK_NEW_VAR_SYMBOL;
}
 break;
case 111:
{
  val.sym = _tab.inserta(yytext);
  return PDDL_Parser::TK_KEYWORD;
}
 break;
case 112:
{
  val.sym = _tab.inserta(yytext);
  if (val.sym->val == 0) return PDDL_Parser::TK_NEW_SYMBOL;
  else {
    if (yy_flex_debug) {
      hsps::PDDL_Base::Symbol* s = (hsps::PDDL_Base::Symbol*)val.sym->val;
      std::cerr << "symbol " << s->print_name
  << " has class " << s->sym_class
  << std::endl;
    }
    switch (((hsps::PDDL_Base::Symbol*)val.sym->val)->sym_class) {
    case hsps::PDDL_Base::sym_object:
      return PDDL_Parser::TK_OBJ_SYMBOL;
    case hsps::PDDL_Base::sym_typename:
      return PDDL_Parser::TK_TYPE_SYMBOL;
    case hsps::PDDL_Base::sym_predicate:
      return PDDL_Parser::TK_PRED_SYMBOL;
    case hsps::PDDL_Base::sym_object_function:
      return PDDL_Parser::TK_OBJFUN_SYMBOL;
    case hsps::PDDL_Base::sym_function:
      return PDDL_Parser::TK_FUN_SYMBOL;
    case hsps::PDDL_Base::sym_action:
      return PDDL_Parser::TK_ACTION_SYMBOL;
    case hsps::PDDL_Base::sym_preference:
      return PDDL_Parser::TK_PREFERENCE_SYMBOL;
    case hsps::PDDL_Base::sym_set:
      return PDDL_Parser::TK_SET_SYMBOL;
    default:
      return PDDL_Parser::TK_MISC_SYMBOL;
    }
  }
}
 break;
case 113:
val.ival = atoi(yytext); return PDDL_Parser::TK_INT;
 break;
case 114:
val.rval = hsps::rational::ator(yytext); return PDDL_Parser::TK_FLOAT;
 break;
case 115:
yy_echo();
 break;
case (116 + 0 + 1):
    return ( 0 );
     case 116:
  {
  int yy_amount_of_matched_text = yy_cp - yytext - 1;
  *yy_cp = yy_hold_char;
  if ( yy_c_buf_p <= &YY_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
      {
      yy_state_type yy_next_state;
      yy_c_buf_p = yytext + yy_amount_of_matched_text;
      yy_current_state = ((yy_state_type)(yy_get_previous_state_()));
      yy_next_state = ((yy_state_type)(yy_try_NUL_trans_(yy_current_state)));
      yy_bp = yytext + 0;
      if ( yy_next_state )
   {
   yy_cp = ++yy_c_buf_p;
   yy_current_state = yy_next_state;
   goto yy_match;
   }
      else
   {
       yy_cp = yy_last_accepting_cpos;
       yy_current_state = yy_last_accepting_state;
   goto yy_find_action;
   }
      }
  else switch ( yy_get_next_buffer() )
      {
      case 1:
   {
   yy_did_buffer_switch_on_eof = 0;
   if ( yy_wrap() )
       {
       yy_c_buf_p = yytext + 0;
       yy_act = (116 + (yy_start - 1) / 2 + 1);
       goto do_action;
       }
   else
       {
       if ( ! yy_did_buffer_switch_on_eof )
    do { yy_init_buffer( YY_CURRENT_BUFFER, yyin ); yy_load_buffer_state(); } while ( 0 );
       }
   }
   break;
      case 0:
   yy_c_buf_p = yytext + yy_amount_of_matched_text;
   yy_current_state = ((yy_state_type)(yy_get_previous_state_()));
   yy_cp = yy_c_buf_p;
   yy_bp = yytext + 0;
   goto yy_match;
      case 2:
   yy_c_buf_p =
       &YY_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];
   yy_current_state = ((yy_state_type)(yy_get_previous_state_()));
   yy_cp = yy_c_buf_p;
   yy_bp = yytext + 0;
   goto yy_find_action;
      }
  break;
  }
     default:
  fprintf(stderr , "action # %d\n", yy_act );
  yy_fatal_error("fatal flex scanner internal error--no action found");
     }
 }
 return ( 0 );
    }
int PDDL_Scanner::yy_get_next_buffer()
    {
    register char *dest = YY_CURRENT_BUFFER->yy_ch_buf;
    register char *source = yytext - 1;
    register int number_to_move, i;
    int ret_val;
    if ( yy_c_buf_p > &YY_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
 yy_fatal_error("fatal flex scanner internal error--end of buffer missed");
    number_to_move = yy_c_buf_p - yytext;
    for ( i = 0; i < number_to_move; ++i )
 *(dest++) = *(source++);
    if ( YY_CURRENT_BUFFER->yy_eof_status != 0 )
 yy_n_chars = 0;
    else
 {
 int num_to_read = YY_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;
 if ( num_to_read > 8192 )
     num_to_read = 8192;
 else if ( num_to_read <= 0 )
     yy_fatal_error("fatal error - scanner input buffer overflow");
 if ( yy_input((char *)(&YY_CURRENT_BUFFER->yy_ch_buf[number_to_move]), yy_n_chars,num_to_read) < 0 ) yy_fatal_error("YY_INPUT() in flex scanner failed");;
 }
    if ( yy_n_chars == 0 )
 {
 if ( number_to_move - 0 == 1 )
     {
     ret_val = 1;
     YY_CURRENT_BUFFER->yy_eof_status = 2;
     }
 else
     {
     ret_val = 2;
     YY_CURRENT_BUFFER->yy_eof_status = 1;
     }
 }
    else
 ret_val = 0;
    yy_n_chars += number_to_move;
    YY_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = 0;
    YY_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = 0;
    yytext = &YY_CURRENT_BUFFER->yy_ch_buf[1];
    return ( ret_val );
    }
long PDDL_Scanner::yy_get_previous_state_()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;
    yy_current_state = yy_start;
    for ( yy_cp = yytext + 0; yy_cp < yy_c_buf_p; ++yy_cp )
 {
 register char yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
 if ( yy_accept[yy_current_state] )
     {
     yy_last_accepting_state = yy_current_state;
     yy_last_accepting_cpos = yy_cp;
     }
 while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
     {
     yy_current_state = yy_def[yy_current_state];
     if ( yy_current_state >= 544 )
  yy_c = yy_meta[yy_c];
     }
 yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
 }
    return (long)( yy_current_state );
    }
long PDDL_Scanner::yy_try_NUL_trans_(long yy_current_state_)
    {
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
    register int yy_is_jam;
    register char *yy_cp = yy_c_buf_p;
    register char yy_c = 1;
    if ( yy_accept[yy_current_state] )
 {
 yy_last_accepting_state = yy_current_state;
 yy_last_accepting_cpos = yy_cp;
 }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 {
 yy_current_state = yy_def[yy_current_state];
 if ( yy_current_state >= 544 )
     yy_c = yy_meta[yy_c];
 }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 543);
    return (long)( yy_is_jam ? 0 : yy_current_state );
    }
void PDDL_Scanner::yyunput( char c, char *yy_bp )
    {
    register char *yy_cp = yy_c_buf_p;
    *yy_cp = yy_hold_char;
    if ( yy_cp < YY_CURRENT_BUFFER->yy_ch_buf + 2 )
 {
 register int number_to_move = yy_n_chars + 2;
 register char *dest =
     &YY_CURRENT_BUFFER->yy_ch_buf[YY_CURRENT_BUFFER->yy_buf_size + 2];
 register char *source =
     &YY_CURRENT_BUFFER->yy_ch_buf[number_to_move];
 while ( source > YY_CURRENT_BUFFER->yy_ch_buf )
     *--dest = *--source;
 yy_cp += dest - source;
 yy_bp += dest - source;
 yy_n_chars = YY_CURRENT_BUFFER->yy_buf_size;
 if ( yy_cp < YY_CURRENT_BUFFER->yy_ch_buf + 2 )
     yy_fatal_error("flex scanner push-back overflow");
 }
    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
 yy_cp[-2] = '\n';
    *--yy_cp = c;
    yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
    }
int PDDL_Scanner::input()
    {
    int c;
    char *yy_cp = yy_c_buf_p;
    *yy_cp = yy_hold_char;
    if ( *yy_c_buf_p == 0 )
 {
 if ( yy_c_buf_p < &YY_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
     *yy_c_buf_p = '\0';
 else
     {
     yytext = yy_c_buf_p;
     ++yy_c_buf_p;
     switch ( yy_get_next_buffer() )
  {
  case 1:
      {
      if ( yy_wrap() )
   {
   yy_c_buf_p = yytext + 0;
   return ( EOF );
   }
      do { yy_init_buffer( YY_CURRENT_BUFFER, yyin ); yy_load_buffer_state(); } while ( 0 );
      return ( input() );
      }
      break;
  case 0:
      yy_c_buf_p = yytext + 0;
      break;
  case 2:
      yy_fatal_error("unexpected last match in YY_PDDL_Scanner_CLASS::input()");
  }
     }
 }
    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;
    return ( c );
    }
void PDDL_Scanner::yyrestart ( FILE *input_file )
    {
    yy_init_buffer( YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state();
    }
void PDDL_Scanner::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    {
    if ( YY_CURRENT_BUFFER == new_buffer )
 return;
    if ( YY_CURRENT_BUFFER )
 {
 *yy_c_buf_p = yy_hold_char;
 YY_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
 YY_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
 }
    YY_CURRENT_BUFFER = new_buffer;
    yy_load_buffer_state();
    yy_did_buffer_switch_on_eof = 1;
    }
void PDDL_Scanner::yy_load_buffer_state( )
    {
    yy_n_chars = YY_CURRENT_BUFFER->yy_n_chars;
    yytext = yy_c_buf_p = YY_CURRENT_BUFFER->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }
YY_BUFFER_STATE PDDL_Scanner::yy_create_buffer( FILE *file, int size )
    {
    YY_BUFFER_STATE b;
    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
 yy_fatal_error("out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()");
    b->yy_buf_size = size;
    b->yy_ch_buf = (char *) malloc( (unsigned) (b->yy_buf_size + 2) );
    if ( ! b->yy_ch_buf )
 yy_fatal_error("out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()");
    yy_init_buffer( b, file );
    return ( b );
    }
void PDDL_Scanner::yy_delete_buffer( YY_BUFFER_STATE b )
    {
    if ( b == YY_CURRENT_BUFFER )
 YY_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;
    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }
void PDDL_Scanner::yy_init_buffer( YY_BUFFER_STATE b, FILE *file)
    {
    b->yy_input_file = file;
    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;
    b->yy_ch_buf[1] = 0;
    b->yy_ch_buf[2] = 0;
    b->yy_buf_pos = &b->yy_ch_buf[1];
    b->yy_eof_status = 0;
    }
int yy_wrap() {
  return 1;
}
void PDDL_Scanner::open_file(char* name, bool trace) {
  yy_flex_debug = trace;
  yyin = fopen(name, "r");
  if (!yyin) {
    std::cerr << "error: can't open " << name << std::endl;
    exit(255);
  }
  _filename = name;
  if (_reset) yy_init_buffer(YY_CURRENT_BUFFER, yyin);
  _reset = true;
  _line_no = 1;
  _trace_line = trace;
}
void PDDL_Scanner::close_file() {
  if (_filename != 0) {
    fclose(yyin);
    _filename = 0;
  }
}
